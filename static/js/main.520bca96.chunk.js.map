{"version":3,"sources":["components/SideBar/SubMenu.js","services/api.js","auth.js","components/SideBar/index.js","components/Content/Navbar.js","protected.route.js","store/actions/page.js","components/Mask/index.js","services/patientsService.js","components/Patients/storePatient.js","components/Patients/patients.js","store/actions/patients.js","components/Dropzone/index.js","components/Appointments/index.js","store/actions/appointments.js","components/Appointments/listAppointments.js","components/Content/index.js","components/Login/index.js","App.js","serviceWorker.js","store/reducers/pageReducer.js","store/reducers/patientsReducer.js","store/reducers/appointmentsReducer.js","store/reducers/index.js","store/sagas/patients.js","services/appointmentsService.js","store/sagas/appointments.js","store/sagas/index.js","index.js"],"names":["SubMenu","props","useState","collapsed","setCollapsed","icon","title","items","NavItem","onClick","className","classNames","NavLink","Collapse","isOpen","navbar","map","item","index","key","tag","Link","to","target","api","axios","create","baseURL","interceptors","request","use","headers","localStorage","getItem","error","this","authenticated","data","callBack","elseCallBack","post","then","response","status","setItem","access_token","catch","err","console","log","submenus","SideBar","color","toggle","style","faTimesCircle","faHospitalAlt","Nav","cursor","vertical","faUsers","faUserMd","auth","logout","window","location","reload","faPowerOff","connect","store","pageTitle","pageReducer","setOpen","useEffect","Navbar","light","expand","Button","faBars","NavbarToggler","ProtectedRoute","Component","component","rest","render","isAuthenticated","pathname","state","from","setPageTitle","type","payload","phoneMask","value","replace","get","id","delete","body","dispatch","actions","cpf","setCpf","cep","setCep","foreign","setForeign","emergencyContact","setEmergencyContact","setValue","phone","setPhone","mobilephone","setMobilephone","isCepValid","setIsCepValid","dateColor","setDateColor","address","user","role_id","gender_id","setBody","handleVerifyPasswords","password","password_confirmation","handleDateChange","e","name","handleChangeBody","handleChangePhone","handleChangeUser","val","length","currencyMask","handleChangeAddress","handlePlusInformationChange","plusInformation","handleVerifyDate","date","Date","birthday","age","getFullYear","handleFormSubmit","a","preventDefault","Swal","fire","patientsService","confirmButtonColor","message","text","autoComplete","onSubmit","Row","Col","md","size","htmlFor","onChange","placeholder","required","marginTop","cpfMask","maxLength","marginBottom","onKeyDown","defaultChecked","checked","res","erro","document","querySelector","logradouro","bairro","uf","localidade","city","street","neighborhood","disabled","min","patients","patientsReducer","filterPatients","patient","fetchPatients","deletePatient","Table","striped","responsive","rg","faEdit","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","faTrash","height","width","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","StyledDropzone","useDropzone","acceptedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","files","file","path","faUpload","appointments","appointmentsReducer","storeAppointment","fetchAllPatients","requestBody","setRequestBody","handleRequestBody","receipt","handleStoreAppointment","textAlign","isLoading","fetchAppointments","deleteAppointment","appointment","time","patient_id","Container","fluid","exact","StorePatients","Patients","Appointments","ListAppointments","Login","email","setEmail","setPassword","incorrectMessage","setIncorrectMessage","loader","setLoader","offset","login","history","push","Content","Boolean","hostname","match","initState","action","filteredPatients","filter","toLocaleLowerCase","includes","remainingPatients","jsonResponse","success","remainingAppointments","combineReducers","fetchAll","call","put","appointmentsService","watchSagas","all","takeEvery","patientsSagas","appointmentsSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.520bca96.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport  { Collapse, NavItem, NavLink } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SubMenu = props => {\r\n  \r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const toggleNavbar = () => setCollapsed(!collapsed)\r\n  const { icon, title, items } = props;\r\n \r\n  return (\r\n    <div>\r\n      <NavItem onClick={toggleNavbar} className={classNames({'menu-open': !collapsed})}>\r\n        <NavLink className=\"dropdown-toggle\">\r\n          <FontAwesomeIcon icon={icon} className=\"mr-2\"/>{title}\r\n        </NavLink>\r\n      </NavItem>\r\n      <Collapse isOpen={!collapsed} navbar className={classNames('items-menu',{'mb-1': !collapsed})}>\r\n        {items.map((item, index) => (\r\n            <NavItem key={index} className=\"pl-4\">\r\n              <NavLink tag={Link} to={item.target}>\r\n                {item.title}\r\n              </NavLink>\r\n            </NavItem>\r\n            ))}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubMenu;","import axios from 'axios'\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'https://appointments12.herokuapp.com/api/' \r\n\r\n})\r\n\r\napi.interceptors.request.use(\r\n    request => {\r\n        request.headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'Authorization': \"Bearer \" + localStorage.getItem('access_token'),\r\n        }\r\n      return request\r\n    },\r\n    error => error\r\n)\r\n\r\nexport default api\r\n","import api from './services/api'\r\n\r\nclass Auth{\r\n    constructor(props){\r\n        this.authenticated = false\r\n    }\r\n\r\n    login(data, callBack, elseCallBack){\r\n\r\n        api.post('/auth/login', data)\r\n            .then(response => {\r\n                if(response.status === 200){\r\n                    localStorage.setItem(\"access_token\", response.data.access_token)\r\n                    this.authenticated = true\r\n                    \r\n                    callBack()\r\n                }\r\n                else{\r\n                    this.authenticated = false\r\n                    elseCallBack()\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.authenticated = false\r\n                elseCallBack()\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n    logout(callBack){\r\n        this.authenticated = false\r\n        callBack()\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated\r\n    }\r\n}\r\n\r\nexport default new Auth()","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faPowerOff, faHospitalAlt, faUserMd, faUsers, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport SubMenu from './SubMenu'\r\nimport { NavItem, NavLink, Nav } from 'reactstrap'\r\nimport classNames from 'classnames'\r\nimport auth from '../../auth'\r\nimport \"./style.scss\"\r\n\r\nconst SideBar = props => (\r\n\t<div className={classNames('sidebar', {'is-open': props.isOpen})}>\r\n\t\t<div className=\"sidebar-header\">\r\n\t\t<span color=\"info\" onClick={props.toggle} style={{color: '#fff'}}><FontAwesomeIcon icon={faTimesCircle} /></span>\r\n\t\t<h3 className=\"sidebar-title\"><FontAwesomeIcon icon={faHospitalAlt} /> Consultas</h3>\r\n\t\t</div>\r\n\t\t<div className=\"side-menu\">\r\n\t\t<Nav style={{cursor: 'pointer'}} vertical className=\"list-unstyled pb-3\">\r\n\t\t\t<p>Bem vindo Usuário</p>\r\n\t\t\t<SubMenu title=\"Pacientes\" icon={faUsers} items={submenus[0]}/>\r\n\t\t\t<SubMenu title=\"Atendimentos\" icon={faUserMd} items={submenus[1]}/>\r\n\t\t\t<NavItem>\r\n\t\t\t<NavLink onClick={() => auth.logout(() => window.location.reload(false))}>\r\n\t\t\t\t<FontAwesomeIcon icon={faPowerOff} className=\"mr-2\"/>Sair\r\n\t\t\t</NavLink>\r\n\t\t\t</NavItem>\r\n\t\t</Nav>\t\t\t\t\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nconst submenus = [\r\n[\r\n\t{\r\n\ttitle: \"Cadastrar pacientes\",\r\n\ttarget: \"cadastrar-pacientes\"\r\n\t},\r\n\t{\r\n\ttitle: \"Gerenciar pacientes\",\r\n\ttarget: \"pacientes\",\t\t\t\t\r\n\t}\r\n],\r\n[\r\n\t{\r\n\ttitle: \"Novo\",\r\n\ttarget: \"cadastrar-atendimento\",\t\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Atendimentos\",\r\n\ttarget: \"atendimentos\",\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Material de Apoio\",\r\n\ttarget: \"material-apoio\",\t\t\t\t\r\n\t}\r\n]\r\n]\r\n\t\r\n\r\nexport default SideBar","import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { Navbar, Button, NavbarToggler, Collapse, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NavBar = props => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  useEffect(() => {\r\n    //console.log(props)\r\n  })\r\n  \r\n  return (\r\n    <Navbar color=\"light\" light className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\" expand=\"md\">\r\n      <Button color=\"info\" onClick={props.toggle}>\r\n        <FontAwesomeIcon icon={faBars}/>\r\n      </Button>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"m-auto\" navbar>\r\n          <NavItem>\r\n            <div className=\"page-title\">\r\n              <h1 className=\"title\">\r\n                {props.pageTitle}\r\n              </h1>\r\n            </div>\r\n          </NavItem>\r\n      </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return{\r\n    pageTitle: store.pageReducer.pageTitle\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavBar)","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return(\r\n        <Route {...rest} render={\r\n            (props) => {\r\n                if(auth.isAuthenticated()){\r\n                    return <Component {...props} />\r\n                }else{\r\n                    return <Redirect to={\r\n                        {\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                from: props.location\r\n                            }\r\n                        }\r\n                    } />\r\n                }\r\n            }\r\n        }/>\r\n    )\r\n}","export const setPageTitle = title => ({\r\n    type: 'SET_PAGE_TITLE',\r\n    payload: title\r\n})","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') \r\n}\r\n\r\nexport const phoneMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '')\r\n        .replace(/(\\d{0})(\\d)/, '$1($2') \r\n        .replace(/(\\d{2})(\\d)/, '$1) $2')\r\n}\r\n\r\nexport const currencyMask = val => {\r\n    let value = val\r\n        .replace(/\\D/g, '')\r\n        .replace(/^0+/g, '')\r\n\r\n    if(value.length === 1){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{1})$/g, \"0,0$1\")\r\n    }\r\n    else if(value.length === 2){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \"0,$1\")\r\n    }\r\n    else{\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \",$1\")\r\n    }\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/patients?page=-1')\r\nconst fetch = () => api.get('/patients')\r\nconst store = body => api.post('/patients', body)\r\nconst deletePatient = id => api.delete(`/patients/${id}`)\r\n\r\nexport default { \r\n    fetchAll,\r\n    fetch,\r\n    deletePatient,\r\n    store\r\n}","import React, { useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport { cpfMask, phoneMask, currencyMask } from '../Mask/index'\r\nimport patientsService from \"../../services/patientsService\"\r\nimport Swal from \"sweetalert2\"\r\nimport axios from \"axios\"\r\n\r\nconst StorePatients = props => {\r\n\r\n    const [cpf, setCpf] = useState(\"\")\r\n    const [cep, setCep] = useState(\"\")\r\n    const [foreign, setForeign] = useState(false)\r\n    const [emergencyContact, setEmergencyContact] = useState(\"\")\r\n    const [value, setValue] = useState(\"R$ 0,00\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [mobilephone, setMobilephone] = useState(\"\")\r\n    const [isCepValid, setIsCepValid] = useState(false)\r\n    const [dateColor, setDateColor] = useState(\"form-control input nascimento\")\r\n    const [body, setBody] = useState({address: {state: \"AC\"}, user: {role_id: 1, gender_id: 1}})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Cadastrar Paciente\")\r\n    })\r\n\r\n    const handleCpf = e => {\r\n        setCpf(cpfMask(e.target.value))\r\n\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleVerifyPasswords = () => {\r\n        return body.user.password === body.user.password_confirmation\r\n    }\r\n\r\n    const handleChangeCep = e => {\r\n        let cep = e.target.value.replace(/[^0-9]/g, '')\r\n        setCep(cep)\r\n\r\n        if (cep.length === 8)\r\n            axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n                .then(res => {\r\n                    if (!res.data.erro) {\r\n                        setIsCepValid(true)\r\n                        document.querySelector(\"#street\").value = res.data.logradouro\r\n                        document.querySelector(\"#neighborhood\").value = res.data.bairro\r\n                        document.querySelector(\"#state\").value = res.data.uf\r\n                        document.querySelector(\"#city\").value = res.data.localidade\r\n                        setBody({\r\n                            ...body,\r\n                            address: {\r\n                                ...body.address,\r\n                                city: res.data.localidade,\r\n                                cep: cep,\r\n                                street: res.data.logradouro,\r\n                                state: res.data.uf,\r\n                                neighborhood: res.data.bairro\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        setIsCepValid(false)\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"Um erro ocorreu ao buscar o CEP: \", err))\r\n        else\r\n            setBody({\r\n                ...body,\r\n                address: {\r\n                    ...body.address,\r\n                    cep: cep\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleDateChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n\r\n        setDateColor(\"form-control input\")\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangePhone = e => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n\r\n        if (!foreign) {\r\n            value = value.replace(/[^0-9]/g, '')\r\n\r\n            if (name == \"telephone\")\r\n                setPhone(phoneMask(value))\r\n            else\r\n                setMobilephone(phoneMask(value))\r\n        } else {\r\n            if (name == \"telephone\")\r\n                setPhone(value)\r\n            else\r\n                setMobilephone(value)\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeUser = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (name == \"value\") {\r\n            setValue(currencyMask(value))\r\n            value = value.replace(/[^0-9]/g, '')\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            user: {\r\n                ...body.user,\r\n                name: body.name,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeAddress = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            address: {\r\n                ...body.address,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePlusInformationChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (!foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(phoneMask(value))\r\n        if (foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(value)\r\n\r\n        setBody({\r\n            ...body,\r\n            plusInformation: {\r\n                ...body.plusInformation,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleVerifyDate = () => {\r\n        let date = new Date()\r\n        let birthday = new Date(body.birthday)\r\n        let age = date.getFullYear() - birthday.getFullYear()\r\n        return !(age > 130 || age < 0)\r\n    }\r\n\r\n    const handleFormSubmit = async e => {\r\n        e.preventDefault()\r\n        if(value === \"R$ 0,00\")\r\n            return Swal.fire(\"Por favor informe o valor da consulta.\")\r\n        if (handleVerifyPasswords() && handleVerifyDate()) {\r\n            await setBody({\r\n                ...body,\r\n                foreign: foreign\r\n            })\r\n            await patientsService.store(body)\r\n                .then(() => {\r\n                    Swal.fire({\r\n                        title: \"Paciente cadastrado com sucesso!\",\r\n                        icon: \"success\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    if(e.message == \"Request failed with status code 422\"){\r\n                        return Swal.fire({\r\n                            title: \"Email já cadastrado.\",\r\n                            text: \"Por favor tente com um endereço de email diferente.\",\r\n                            icon: \"warning\",\r\n                            confirmButtonColor: \"#1492A5\"\r\n                        })\r\n                    }\r\n                    Swal.fire({\r\n                        title: \"Ocorreu um erro.\",\r\n                        text: \"Por favor tente novamente mais tarde.\",\r\n                        icon: \"warning\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n        } else {\r\n            if (!handleVerifyPasswords())\r\n                return Swal.fire(\"As senhas divergem.\")\r\n            if (!handleVerifyDate())\r\n                return Swal.fire(\"Por favor informe uma data de nascimento válida.\")\r\n        }\r\n    }\r\n\r\n    const handleForeignChange = () => {\r\n        setPhone(\"\")\r\n        setMobilephone(\"\")\r\n        setEmergencyContact(\"\")\r\n\r\n        if (!foreign)\r\n            setForeign(true)\r\n        else\r\n            setForeign(false)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"new-password\" onSubmit={handleFormSubmit}>\r\n            <Row>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados do paciente\r\n                        </h1>\r\n                        <Row>\r\n                            <Col md={8}>\r\n                                <label htmlFor=\"name\">Nome: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"telephone\">Telefone Fixo: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"telephone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={phone}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"phone\">Celular: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"phone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={mobilephone}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"cpf\">CPF: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cpf\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleCpf}\r\n                                    maxLength=\"14\"\r\n                                    placeholder=\"___.___.___-__\"\r\n                                    value={cpf}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"rg\">RG: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"rg\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"birthday\">Data de Nascimento: </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    name=\"birthday\"\r\n                                    className={dateColor}\r\n                                    placeholder=\"Data de Nascimento\"\r\n                                    onChange={handleDateChange}\r\n                                    onKeyDown={handleDateChange}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Gênero\r\n                            <div className=\"genders\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Masculino\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                        />\r\n                                    Feminino\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <input\r\n                                    className=\"foreignCheckbox\"\r\n                                    name=\"foreign\"\r\n                                    type=\"checkbox\"\r\n                                    checked={foreign}\r\n                                    onChange={handleForeignChange}\r\n                                />\r\n                                <span className=\"foreignLabel\">\r\n                                    Estrangeiro?\r\n                                </span>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Endereço\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cep\">CEP: </label>\r\n                                <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeCep}\r\n                                    type=\"text\"\r\n                                    name=\"cep\"\r\n                                    className=\"form-control input\"\r\n                                    value={cep}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"street\">Logradouro: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"street\"\r\n                                    type=\"text\"\r\n                                    name=\"street\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Rua, AV, etc...\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"complement\">Complemento: </label>\r\n                                <input\r\n                                    id=\"complement\"\r\n                                    type=\"text\"\r\n                                    name=\"complement\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleChangeAddress}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"neighborhood\">Bairro: </label>\r\n                                <input\r\n                                    id=\"neighborhood\"\r\n                                    type=\"text\"\r\n                                    name=\"neighborhood\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                    onChange={handleChangeAddress}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={3}>\r\n                                <label htmlFor=\"numero\">Número: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"number\"\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    name=\"number\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={3}>\r\n                                {\r\n                                    foreign ? (\r\n                                        <>\r\n                                            <label htmlFor=\"state\">Estado: </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"state\"\r\n                                                id=\"state\"\r\n                                                className=\"form-control input\"\r\n                                                disabled={isCepValid}\r\n                                                onChange={handleChangeAddress}\r\n                                            />\r\n                                        </>\r\n                                    )\r\n                                        : (\r\n                                            <>\r\n                                                <label htmlFor=\"state\">UF: </label>\r\n                                                <select\r\n                                                    name=\"state\"\r\n                                                    id=\"state\"\r\n                                                    className=\"form-control input\"\r\n                                                    disabled={isCepValid}\r\n                                                    onChange={handleChangeAddress}\r\n                                                >\r\n                                                    <option value=\"AC\">AC</option>\r\n                                                    <option value=\"AL\">AL</option>\r\n                                                    <option value=\"AP\">AP</option>\r\n                                                    <option value=\"AM\">AM</option>\r\n                                                    <option value=\"BA\">BA</option>\r\n                                                    <option value=\"CE\">CE</option>\r\n                                                    <option value=\"DF\">DF</option>\r\n                                                    <option value=\"ES\">ES</option>\r\n                                                    <option value=\"GO\">GO</option>\r\n                                                    <option value=\"MA\">MA</option>\r\n                                                    <option value=\"MT\">MT</option>\r\n                                                    <option value=\"MS\">MS</option>\r\n                                                    <option value=\"MG\">MG</option>\r\n                                                    <option value=\"PA\">PA</option>\r\n                                                    <option value=\"PB\">PB</option>\r\n                                                    <option value=\"PR\">PR</option>\r\n                                                    <option value=\"PE\">PE</option>\r\n                                                    <option value=\"PI\">PI</option>\r\n                                                    <option value=\"RJ\">RJ</option>\r\n                                                    <option value=\"RN\">RN</option>\r\n                                                    <option value=\"RS\">RS</option>\r\n                                                    <option value=\"RO\">RO</option>\r\n                                                    <option value=\"RR\">RR</option>\r\n                                                    <option value=\"SC\">SC</option>\r\n                                                    <option value=\"SP\">SP</option>\r\n                                                    <option value=\"SE\">SE</option>\r\n                                                    <option value=\"TO\">TO</option>\r\n                                                </select>\r\n                                            </>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"city\">Municipio: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeAddress}\r\n                                    name=\"city\"\r\n                                    id=\"city\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Informações adicionais\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_contact\">Contato de Emergência: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_contact\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={emergencyContact}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_name\">Nome: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_name\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"observation\">Observação: </label>\r\n                                <textarea\r\n                                    className=\"form-control input\"\r\n                                    name=\"observation\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                >\r\n                                </textarea>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Valor da Sessão\r\n                    </h1>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"value\">Valor: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeUser}\r\n                                    className=\"form-control input\"\r\n                                    name=\"value\"\r\n                                    value={value}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Deseja recibo?\r\n                            <div className=\"receipt\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados de Acesso ao Sistema\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"email\">Email: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"email\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password\">Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password_confirmation\">Repetir Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password_confirmation\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"role_id\">Hierarquia: </label>\r\n                                <select \r\n                                    className=\"form-control input\" \r\n                                    name=\"role\"\r\n                                >\r\n                                    <option value=\"1\">Admin</option>\r\n                                    <option value=\"1\">Médico</option>\r\n                                    <option value=\"2\">Paciente</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                Cadastro ativo?\r\n                            <div className=\"active\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: '100px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">Salvar dados</h1>\r\n                        <Button type=\"submit\">Salvar</Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StorePatients)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col, Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Patients = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar pacientes\")\r\n        props.fetchPatients()\r\n    },[])\r\n\r\n    const handleInput = e => {\r\n        props.filterPatients(e.target.value)\r\n    }\r\n\r\n    const deletePatient = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este paciente?',\r\n            text: 'Todos os registros vinculados ao paciente serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n        .then(res => {\r\n            if(res.value)\r\n                props.deletePatient(id)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"box\">\r\n            <Row>\r\n                <Col md={12}>\r\n                    <label htmlFor=\"search\">Pesquisar:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control input\" \r\n                        placeholder=\"Digite aqui o nome do paciente...\" \r\n                        onChange={handleInput} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <>\r\n                {\r\n                    props.patients.patients ? (\r\n                        <Table striped responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>RG:</th>\r\n                                    <th>Celular:</th>\r\n                                    <th>Editar:</th>\r\n                                    <th>Deletar:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.patients.patients.map((patient, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{patient.name}</td>\r\n                                    <td>{patient.rg}</td>\r\n                                    <td>{patient.phone}</td>\r\n                                    <td>\r\n                                        <button onClick={() => Swal.fire('Em construção')} className=\"btn edit-button\">\r\n                                            <FontAwesomeIcon icon={faEdit} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => deletePatient(patient.id) } \r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    ) : (\r\n                        <Loader className=\"loader\" type=\"TailSpin\" color=\"#17A2B8\" height={100} width={100} />\r\n                    )\r\n                }\r\n            </>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    filterPatients: patient => dispatch(actions.filterPatients(patient)),\r\n    fetchPatients: () => dispatch(actions.fetchAllPatients()),\r\n    deletePatient: id => dispatch(actions.deletePatient(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patients)","export const filterPatients = patient => ({\r\n    type: \"FILTER_PATIENTS\",\r\n    payload: patient\r\n})\r\n\r\nexport const fetchPatients = () => ({\r\n    type: \"FETCH_PATIENTS_SAGA\"\r\n})\r\n\r\nexport const fetchAllPatients = () => ({\r\n    type: \"FETCH_ALL_PATIENTS_SAGA\"\r\n})\r\n\r\n\r\nexport const deletePatient = id => ({\r\n    type: \"DELETE_PATIENT_SAGA\",\r\n    payload: id\r\n})","import React, { useMemo, useEffect } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n}\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n}\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n}\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n}\r\n\r\nconst StyledDropzone = () => {\r\n\r\n    const {\r\n        acceptedFiles,\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone()\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept\r\n    ])\r\n\r\n    const files = acceptedFiles.map(file => (\r\n        <li key={file.path}>\r\n          {file.path} - {file.size} bytes\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <div {...getRootProps({ style })}>\r\n                <input {...getInputProps()} />\r\n                <p>Arraste e solte aqui os arquivos que deseja salvar.</p>\r\n                <FontAwesomeIcon icon={faUpload} />\r\n            </div>\r\n            <h5>Arquivos:</h5>\r\n            <ul>{files}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StyledDropzone","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Row, Col, Button } from \"reactstrap\"\r\nimport * as actions from \"../../store/actions\"\r\nimport StyledDropzone from \"../Dropzone\"\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Appointments = props => {\r\n\r\n    const [requestBody, setRequestBody] = useState({})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Novo Atendimento\")\r\n        props.fetchAllPatients()\r\n    },[])\r\n\r\n    const handleRequestBody = e => {\r\n        setRequestBody({\r\n            ...requestBody,\r\n            receipt: true,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleStoreAppointment = async e => {\r\n        e.preventDefault()\r\n        await props.storeAppointment(requestBody)\r\n        await Swal.fire({\r\n            title: \"Atendimento cadastrado com sucesso!\",\r\n            icon: \"success\",\r\n            confirmButtonColor: \"#1492A5\"\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleStoreAppointment} style={{marginBottom: '100px'}}>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"patient_id\">Paciente: </label>\r\n                                <select \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"patient_id\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Buscar...\" \r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                >\r\n                                    <option>Selecione...</option>\r\n                                    {\r\n                                        props.patients.patients ? \r\n                                        props.patients.patients.map(patient => (\r\n                                            <option key={patient.id} value={patient.id}>\r\n                                                {patient.name}\r\n                                            </option>\r\n                                        )) : (\"\")\r\n                                    }\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"link\">Link: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"link\" \r\n                                    type=\"text\" \r\n                                    className=\"form-control input\" \r\n                                    placeholder=\"http://exemplo.com.br/link\" \r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"date\">Data: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"date\" \r\n                                    type=\"date\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"time\">Hora: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"time\" \r\n                                    type=\"time\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"notes\">Notas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"notes\" \r\n                                    className=\"form-control\"\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cronogram\">Cronograma: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"cronogram\" \r\n                                    className=\"form-control\"\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"abstract\">Resumo: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"abstract\" \r\n                                    className=\"form-control\"\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"todo_list\">Tarefas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"todo_list\" \r\n                                    className=\"form-control\"\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={12} className=\"dropzone\">\r\n                                <StyledDropzone />\r\n                            </Col>\r\n                            <Col md={12} style={{textAlign: 'center', marginTop: '32px'}}>\r\n                                <Button\r\n                                    className=\"storeAppointmentButton shadow-none\"\r\n                                    disabled={props.appointments.isLoading}\r\n                                >\r\n                                    CADASTRAR ATENDIMENTO \r\n                                    {\r\n                                        props.appointments.isLoading ?\r\n                                            <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} />\r\n                                        : \"\"\r\n                                    }\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer,\r\n        appointments: store.appointmentsReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    storeAppointment: data => dispatch(actions.storeAppointments(data)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAllPatients: () => dispatch(actions.fetchAllPatients())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Appointments)","export const storeAppointments = data => ({\r\n    type: \"STORE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const fetchAllAppointments = () => ({\r\n    type: \"FETCH_ALL_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: \"DELETE_APPOINTMENT_SAGA\",\r\n    payload: id\r\n})","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col, Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst ListAppointments = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar atendimentos\")\r\n        props.fetchAppointments()\r\n        console.log(props.appointments)\r\n    }, [])\r\n\r\n    const deleteAppointment = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este atendimento?',\r\n            text: 'Todos os registros vinculados ao atendimento serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n            .then(res => {\r\n                if (res.value)\r\n                    props.deleteAppointment(id)\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"box\">\r\n            {\r\n                props.appointments.appointments ? (\r\n                    <Table striped responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Data:</th>\r\n                                <th>Hora:</th>\r\n                                <th>Paciente:</th>\r\n                                <th>Editar:</th>\r\n                                <th>Deletar:</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {props.appointments.appointments.map((appointment, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{appointment.date}</td>\r\n                                    <td>{appointment.time}</td>\r\n                                    <td>{appointment.patient_id}</td>\r\n                                    <td>\r\n                                        <button onClick={() => Swal.fire('Em construção')} className=\"btn edit-button\">\r\n                                            <FontAwesomeIcon icon={faEdit} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button\r\n                                            id={appointment.id}\r\n                                            onClick={() => deleteAppointment(appointment.id)}\r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                ) : (\r\n                        <Loader className=\"loader\" type=\"TailSpin\" color=\"#17A2B8\" height={100} width={100} />\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAppointments: () => dispatch(actions.fetchAllAppointments()),\r\n    deleteAppointment: id => dispatch(actions.deleteAppointment(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        appointments: store.appointmentsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListAppointments)","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Container } from 'reactstrap'\r\nimport NavBar from './Navbar'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ProtectedRoute } from '../../protected.route'\r\n\r\nimport StorePatients from '../Patients/storePatient'\r\nimport Patients from '../Patients/patients'\r\nimport Appointments from '../Appointments/index'\r\nimport ListAppointments from '../Appointments/listAppointments'\r\n\r\nexport default props => (\r\n    <Container fluid className={classNames('content', {'is-open': props.isOpen})}>\r\n\t\t<NavBar toggle={props.toggle}/>\r\n\t\t<Switch>\r\n\t\t\t<ProtectedRoute exact path=\"/\" component={() => \"Em construção...\" } />\r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-pacientes\" component={StorePatients} />\r\n\t\t\t<ProtectedRoute exact path=\"/pacientes\" component={Patients} />          \r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-atendimento\" component={Appointments} />          \r\n\t\t\t<ProtectedRoute exact path=\"/atendimentos\" component={ListAppointments} />          \r\n\t\t</Switch>\r\n    </Container>\r\n)","import React, { useState } from 'react'\r\nimport auth from '../../auth'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHospitalAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from 'react-loader-spinner'\r\nimport './style.scss'\r\n\r\nconst Login = props => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [incorrectMessage, setIncorrectMessage] = useState(false)\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const handleLogin = e => {\r\n        setLoader(true)\r\n        e.preventDefault()\r\n        \r\n        let data = {email: email, password: password}\r\n\r\n        auth.login(data, \r\n            () => props.history.push(\"/\"), \r\n            () => {\r\n                setIncorrectMessage(true)\r\n                setLoader(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n                <Col className=\"form-background\" md={{size: 6, offset: 3}}>\r\n                    <form onSubmit={handleLogin}>\r\n                        <h2><FontAwesomeIcon icon={faHospitalAlt} /> Acessar</h2>\r\n                        <input onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" name=\"user\" required />\r\n                        <input onChange={e => setPassword(e.target.value)} type=\"password\" className=\"form-control\" name=\"password\" required />\r\n                        { loader ? <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} /> : \"\" }\r\n                        { incorrectMessage ? <p>Usuário ou senha incorretos</p> : \"\" }\r\n                        <Button className=\"login-button\">Acessar</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SideBar from './components/SideBar'\r\nimport Content from './components/Content'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './App.scss'\r\nimport Login from './components/Login'\r\n\r\nexport default () => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n\t\t<Switch>\r\n\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t<div className=\"App wrapper\">\r\n\t\t\t<SideBar toggle={toggle} isOpen={isOpen} />\r\n\t\t\t<Content toggle={toggle} isOpen={isOpen} />\r\n\t\t</div>\r\n\t\t</Switch>\r\n    </Router>\r\n  )\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const initState = {\r\n    pageTitle: \"Gerenciador de consultas\"\r\n}\r\n\r\nconst pageReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case \"SET_PAGE_TITLE\":\r\n            return {\r\n              pageTitle: action.payload  \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pageReducer","const initState = {}\r\n\r\nconst patientsReducer = (state = {}, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case \"FILTER_PATIENTS\":\r\n            let filteredPatients = initState.patients.filter(patient => {\r\n                let name = patient.name.toLocaleLowerCase()\r\n                return name.includes(action.payload.toLocaleLowerCase())\r\n            })\r\n            return {\r\n                patients: filteredPatients\r\n            }\r\n\r\n        case \"SET_PATIENTS\":\r\n            initState.patients = action.payload\r\n            return {\r\n                patients: action.payload\r\n            }\r\n\r\n        case \"DELETE_PATIENT\":\r\n            let remainingPatients = state.patients.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.patients = remainingPatients\r\n            return {\r\n                patients: remainingPatients,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport default patientsReducer","const initState = {\r\n    isLoading: false,\r\n    success: false\r\n}\r\n\r\nconst appointmentsReducer = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"TOGGLE_APPOINTMENTS_LOADER\":\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_SUCCESS\":\r\n            console.log(\"AUEBA reducer\")\r\n            return {\r\n                success: true,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_FAILURE\":\r\n            return {\r\n                success: false,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS\":\r\n            initState.appointments = action.payload\r\n            return {\r\n                appointments: action.payload\r\n            }\r\n\r\n        case \"DELETE_APPOINTMENT\":\r\n            let remainingAppointments = state.appointments.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.appointments = remainingAppointments\r\n            return {\r\n                appointments: remainingAppointments,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default appointmentsReducer","import { combineReducers } from 'redux'\r\nimport pageReducer from './pageReducer'\r\nimport patientsReducer from './patientsReducer'\r\nimport appointmentsReducer from './appointmentsReducer'\r\n\r\nexport default combineReducers ({\r\n    pageReducer,\r\n    patientsReducer,\r\n    appointmentsReducer\r\n})","import { put, call } from 'redux-saga/effects'\r\nimport patientsService from '../../services/patientsService'\r\n\r\nexport function* fetchPatients(){\r\n    let jsonResponse = yield call(patientsService.fetch)\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(patientsService.fetchAll)\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* deletePatient(action){\r\n    let jsonResponse = yield call(patientsService.deletePatient, action.payload)\r\n    yield put({\r\n        type: \"DELETE_PATIENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/appointments')\r\nconst store = body => api.post('/appointments', body)\r\nconst deleteAppointment = id => api.delete(`/appointments/${id}`)\r\n\r\nexport default {\r\n    fetchAll,\r\n    deleteAppointment,\r\n    store\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport appointmentsService from '../../services/appointmentsService'\r\n\r\nexport function* storeAppointment(action){\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    let jsonResponse = yield call(appointmentsService.store, action.payload)\r\n\r\n    if(jsonResponse.status === 200){\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_SUCCESS\"\r\n        })\r\n    }else{\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\"\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(appointmentsService.fetchAll)\r\n    yield put({\r\n        type: \"SET_APPOINTMENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* deleteAppointment(action){\r\n    let jsonResponse = yield call(appointmentsService.deleteAppointment, action.payload)\r\n    yield put({\r\n        type: \"DELETE_APPOINTMENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import { takeEvery, all } from 'redux-saga/effects'\r\nimport * as patientsSagas from './patients'\r\nimport * as appointmentsSagas from './appointments'\r\n\r\nexport function* watchSagas(){\r\n    yield all([\r\n        yield takeEvery(\"FETCH_PATIENTS_SAGA\", patientsSagas.fetchPatients),\r\n        yield takeEvery(\"FETCH_ALL_PATIENTS_SAGA\", patientsSagas.fetchAll),\r\n        yield takeEvery(\"DELETE_PATIENT_SAGA\", patientsSagas.deletePatient),\r\n        yield takeEvery(\"STORE_APPOINTMENTS_SAGA\", appointmentsSagas.storeAppointment),\r\n        yield takeEvery(\"FETCH_ALL_APPOINTMENTS_SAGA\", appointmentsSagas.fetchAll)\r\n    ])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { watchSagas } from './store/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(watchSagas)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}