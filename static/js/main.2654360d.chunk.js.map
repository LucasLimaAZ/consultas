{"version":3,"sources":["components/SideBar/SubMenu.js","services/api.js","auth.js","components/SideBar/index.js","components/Content/Navbar.js","protected.route.js","store/actions/page.js","components/Mask/index.js","services/patientsService.js","components/Patients/storePatient.js","components/Patients/patients.js","store/actions/patients.js","components/Content/index.js","components/Login/index.js","App.js","serviceWorker.js","store/reducers/pageReducer.js","store/reducers/patientsReducer.js","store/reducers/index.js","store/sagas/patients.js","store/sagas/index.js","index.js"],"names":["SubMenu","props","useState","collapsed","setCollapsed","icon","title","items","NavItem","onClick","className","classNames","NavLink","Collapse","isOpen","navbar","map","item","index","key","tag","Link","to","target","api","axios","create","baseURL","interceptors","request","use","headers","localStorage","getItem","error","this","authenticated","data","callBack","elseCallBack","post","then","response","status","setItem","access_token","catch","err","console","log","submenus","SideBar","color","toggle","style","faTimesCircle","faHospitalAlt","Nav","cursor","vertical","faUsers","faUserMd","auth","logout","window","location","reload","faPowerOff","connect","store","pageTitle","pageReducer","setOpen","useEffect","Navbar","light","expand","Button","faBars","NavbarToggler","ProtectedRoute","Component","component","rest","render","isAuthenticated","pathname","state","from","setPageTitle","type","payload","phoneMask","value","replace","get","id","delete","body","dispatch","actions","cpf","setCpf","emergencyContact","setEmergencyContact","setValue","phone","setPhone","mobilephone","setMobilephone","isCepValid","setIsCepValid","dateColor","setDateColor","setBody","handleDateChage","e","name","handleChangeBody","handleChangePhone","handleChangeUser","val","length","currencyMask","user","handleChangeAddress","address","handlePlusInformationChange","plusInformation","autoComplete","onSubmit","preventDefault","patientsService","res","Swal","fire","confirmButtonColor","text","Row","Col","md","size","htmlFor","onChange","placeholder","marginTop","cpfMask","maxLength","marginBottom","onKeyDown","defaultChecked","cep","erro","document","querySelector","logradouro","bairro","uf","localidade","city","street","neighborhood","disabled","patients","patientsReducer","filterPatients","patient","fetchPatients","deletePatient","setInitState","rg","faEdit","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","faTrash","height","width","Container","fluid","exact","path","StorePatients","Patients","Login","email","setEmail","password","setPassword","incorrectMessage","setIncorrectMessage","loader","setLoader","offset","login","history","push","required","Content","Boolean","hostname","match","initState","action","filteredPatients","filter","toLocaleLowerCase","includes","remainingPatients","jsonResponse","combineReducers","fetchAll","call","put","watchSagas","all","takeEvery","patientsSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2654360d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport  { Collapse, NavItem, NavLink } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SubMenu = props => {\r\n  \r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const toggleNavbar = () => setCollapsed(!collapsed)\r\n  const { icon, title, items } = props;\r\n \r\n  return (\r\n    <div>\r\n      <NavItem onClick={toggleNavbar} className={classNames({'menu-open': !collapsed})}>\r\n        <NavLink className=\"dropdown-toggle\">\r\n          <FontAwesomeIcon icon={icon} className=\"mr-2\"/>{title}\r\n        </NavLink>\r\n      </NavItem>\r\n      <Collapse isOpen={!collapsed} navbar className={classNames('items-menu',{'mb-1': !collapsed})}>\r\n        {items.map((item, index) => (\r\n            <NavItem key={index} className=\"pl-4\">\r\n              <NavLink tag={Link} to={item.target}>\r\n                {item.title}\r\n              </NavLink>\r\n            </NavItem>\r\n            ))}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubMenu;","import axios from 'axios'\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'https://appointments12.herokuapp.com/api/' \r\n\r\n})\r\n\r\napi.interceptors.request.use(\r\n    request => {\r\n        request.headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'Authorization': \"Bearer \" + localStorage.getItem('access_token'),\r\n        }\r\n      return request\r\n    },\r\n    error => error\r\n)\r\n\r\nexport default api\r\n","import api from './services/api'\r\n\r\nclass Auth{\r\n    constructor(props){\r\n        this.authenticated = false\r\n    }\r\n\r\n    login(data, callBack, elseCallBack){\r\n\r\n        api.post('/auth/login', data)\r\n            .then(response => {\r\n                if(response.status === 200){\r\n                    localStorage.setItem(\"access_token\", response.data.access_token)\r\n                    this.authenticated = true\r\n                    \r\n                    callBack()\r\n                }\r\n                else{\r\n                    this.authenticated = false\r\n                    elseCallBack()\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.authenticated = false\r\n                elseCallBack()\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n    logout(callBack){\r\n        this.authenticated = false\r\n        callBack()\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated\r\n    }\r\n}\r\n\r\nexport default new Auth()","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faPowerOff, faHospitalAlt, faUserMd, faUsers, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport SubMenu from './SubMenu'\r\nimport { NavItem, NavLink, Nav } from 'reactstrap'\r\nimport classNames from 'classnames'\r\nimport auth from '../../auth'\r\nimport \"./style.scss\"\r\n\r\nconst SideBar = props => (\r\n\t<div className={classNames('sidebar', {'is-open': props.isOpen})}>\r\n\t\t<div className=\"sidebar-header\">\r\n\t\t<span color=\"info\" onClick={props.toggle} style={{color: '#fff'}}><FontAwesomeIcon icon={faTimesCircle} /></span>\r\n\t\t<h3 className=\"sidebar-title\"><FontAwesomeIcon icon={faHospitalAlt} /> Consultas</h3>\r\n\t\t</div>\r\n\t\t<div className=\"side-menu\">\r\n\t\t<Nav style={{cursor: 'pointer'}} vertical className=\"list-unstyled pb-3\">\r\n\t\t\t<p>Bem vindo Usuário</p>\r\n\t\t\t<SubMenu title=\"Pacientes\" icon={faUsers} items={submenus[0]}/>\r\n\t\t\t<SubMenu title=\"Agendamento\" icon={faUserMd} items={submenus[1]}/>\r\n\t\t\t<NavItem>\r\n\t\t\t<NavLink onClick={() => auth.logout(() => window.location.reload(false))}>\r\n\t\t\t\t<FontAwesomeIcon icon={faPowerOff} className=\"mr-2\"/>Sair\r\n\t\t\t</NavLink>\r\n\t\t\t</NavItem>\r\n\t\t</Nav>\t\t\t\t\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nconst submenus = [\r\n[\r\n\t{\r\n\ttitle: \"Cadastrar pacientes\",\r\n\ttarget: \"cadastrar-pacientes\"\r\n\t},\r\n\t{\r\n\ttitle: \"Gerenciar pacientes\",\r\n\ttarget: \"pacientes\",\t\t\t\t\r\n\t}\r\n],\r\n[\r\n\t{\r\n\ttitle: \"Novo\",\r\n\ttarget: \"cadastrar-atendimento\",\t\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Agendamentos\",\r\n\ttarget: \"agendamentos\",\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Material de Apoio\",\r\n\ttarget: \"material-apoio\",\t\t\t\t\r\n\t}\r\n]\r\n]\r\n\t\r\n\r\nexport default SideBar","import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { Navbar, Button, NavbarToggler, Collapse, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NavBar = props => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  useEffect(() => {\r\n    //console.log(props)\r\n  })\r\n  \r\n  return (\r\n    <Navbar color=\"light\" light className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\" expand=\"md\">\r\n      <Button color=\"info\" onClick={props.toggle}>\r\n        <FontAwesomeIcon icon={faBars}/>\r\n      </Button>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"m-auto\" navbar>\r\n          <NavItem>\r\n            <div className=\"page-title\">\r\n              <h1 className=\"title\">\r\n                {props.pageTitle}\r\n              </h1>\r\n            </div>\r\n          </NavItem>\r\n      </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return{\r\n    pageTitle: store.pageReducer.pageTitle\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavBar)","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return(\r\n        <Route {...rest} render={\r\n            (props) => {\r\n                if(auth.isAuthenticated()){\r\n                    return <Component {...props} />\r\n                }else{\r\n                    return <Redirect to={\r\n                        {\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                from: props.location\r\n                            }\r\n                        }\r\n                    } />\r\n                }\r\n            }\r\n        }/>\r\n    )\r\n}","export const setPageTitle = title => ({\r\n    type: 'SET_PAGE_TITLE',\r\n    payload: title\r\n})","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') \r\n}\r\n\r\nexport const phoneMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '')\r\n        .replace(/(\\d{0})(\\d)/, '$1($2') \r\n        .replace(/(\\d{2})(\\d)/, '$1) $2')\r\n}\r\n\r\nexport const currencyMask = val => {\r\n    let value = val\r\n        .replace(/\\D/g, '')\r\n        .replace(/^0+/g, '')\r\n\r\n    if(value.length === 1){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{1})$/g, \"0,0$1\")\r\n    }\r\n    else if(value.length === 2){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \"0,$1\")\r\n    }\r\n    else{\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \",$1\")\r\n    }\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/patients')\r\nconst store = body => api.post('/patients', body)\r\nconst deletePatient = id => api.delete(`/patients/${id}`)\r\n\r\nexport default {\r\n    fetchAll,\r\n    deletePatient,\r\n    store\r\n}","import React, { useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport { cpfMask, phoneMask, currencyMask } from '../Mask/index'\r\nimport patientsService from \"../../services/patientsService\"\r\nimport Swal from \"sweetalert2\"\r\nimport axios from \"axios\"\r\n\r\nconst StorePatients = props => {\r\n\r\n    const [cpf, setCpf] = useState(\"\")\r\n    const [emergencyContact, setEmergencyContact] = useState(\"\")\r\n    const [value, setValue] = useState(\"R$ 0,00\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [mobilephone, setMobilephone] = useState(\"\")\r\n    const [isCepValid, setIsCepValid] = useState(false)\r\n    const [dateColor, setDateColor] = useState(\"form-control input nascimento\")\r\n    const [body, setBody] = useState({})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Cadastrar Paciente\")\r\n    })\r\n\r\n    const handleCpf = e => {\r\n        setCpf(cpfMask(e.target.value))\r\n        \r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeCep = e => {\r\n        let cep = e.target.value\r\n\r\n        if(cep.length === 8)\r\n            axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n            .then(res => {\r\n                if(!res.data.erro){\r\n                    setIsCepValid(true)\r\n                    document.querySelector(\"#street\").value = res.data.logradouro\r\n                    document.querySelector(\"#neighborhood\").value = res.data.bairro\r\n                    document.querySelector(\"#state\").value = res.data.uf\r\n                    document.querySelector(\"#city\").value = res.data.localidade\r\n                    setBody({\r\n                        ...body,\r\n                        address: {\r\n                            ...body.address,\r\n                            city: res.data.localidade,\r\n                            cep: cep,\r\n                            street: res.data.logradouro,\r\n                            state: res.data.uf,\r\n                            neighborhood: res.data.bairro\r\n                        }\r\n                    })\r\n                }\r\n                else{\r\n                    setIsCepValid(false)\r\n                }\r\n            })\r\n            .catch(err => console.log(\"Um erro ocorreu ao buscar o CEP: \", err))\r\n    }\r\n\r\n    const handleDateChage = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n\r\n        setDateColor(\"form-control input\")\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangePhone = e => {\r\n        let value = e.target.value.replace(/[^0-9]/g, '')\r\n        let name = e.target.name\r\n\r\n        if(name == \"telephone\")\r\n            setPhone(phoneMask(value))\r\n        else\r\n            setMobilephone(phoneMask(value))\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeUser = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if(name == \"value\"){\r\n            setValue(currencyMask(value))\r\n            value = value.replace(/[^0-9]/g, '')\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            user: {\r\n                ...body.user,\r\n                name: body.name,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeAddress = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            address: {\r\n                ...body.address,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePlusInformationChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if(name == \"emergency_contact\")\r\n            setEmergencyContact(phoneMask(value))\r\n\r\n        setBody({\r\n            ...body,\r\n            plusInformation: {\r\n                ...body.plusInformation,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault()\r\n        patientsService.store(body)\r\n        .then(res => {\r\n            Swal.fire({\r\n                title: \"Paciente cadastrado com sucesso!\",\r\n                icon: \"success\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n        })\r\n        .catch(err => {\r\n            Swal.fire({\r\n                title: \"Ocorreu um erro.\",\r\n                text: \"Por favor tente novamente mais tarde.\",\r\n                icon: \"warning\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n        })\r\n    }\r\n\r\n    return(\r\n        <form autoComplete=\"new-password\" onSubmit={handleFormSubmit}>\r\n        <Row>\r\n            <Col md={{size: 6}}>\r\n                <div className=\"box\">\r\n                    <h1 className=\"subtitle\">\r\n                        Dados do paciente\r\n                    </h1>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <label htmlFor=\"name\">Nome: </label>\r\n                            <input \r\n                                onChange={handleChangeBody} \r\n                                type=\"text\" \r\n                                name=\"name\" \r\n                                placeholder=\"Nome completo\" \r\n                                className=\"form-control input\" \r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"telephone\">Telefone Fixo: </label>                                    \r\n                            <input\r\n                                onChange={handleChangePhone} \r\n                                type=\"text\" \r\n                                name=\"telephone\" \r\n                                className=\"form-control input\" \r\n                                placeholder=\"DDD + número\"\r\n                                value={phone}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop: '32px'}}>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"phone\">Celular: </label>\r\n                            <input \r\n                                onChange={handleChangePhone} \r\n                                type=\"text\" \r\n                                name=\"phone\" \r\n                                className=\"form-control input\" \r\n                                placeholder=\"DDD + número\"\r\n                                value={mobilephone}\r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"cpf\">CPF: </label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"cpf\" \r\n                                className=\"form-control input\"\r\n                                onChange={handleCpf} \r\n                                maxLength=\"14\" \r\n                                placeholder=\"___.___.___-__\" \r\n                                value={cpf}\r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"rg\">RG: </label>\r\n                            <input \r\n                                onChange={handleChangeBody} \r\n                                type=\"text\" \r\n                                name=\"rg\" \r\n                                className=\"form-control input\"\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"birthday\">Data de Nascimento: </label>\r\n                            <input \r\n                                type=\"date\" \r\n                                name=\"birthday\" \r\n                                className={dateColor}\r\n                                placeholder=\"Data de Nascimento\" \r\n                                onChange={handleDateChage}\r\n                                onKeyDown={handleDateChage}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            Gênero\r\n                            <div className=\"genders\">\r\n                                <label>\r\n                                    <input \r\n                                        type=\"radio\" \r\n                                        className=\"option-input radio\" \r\n                                        name=\"genders\" \r\n                                        defaultChecked \r\n                                    />\r\n                                    Masculino\r\n                                </label>\r\n                                <br />\r\n                                <label>\r\n                                    <input type=\"radio\" \r\n                                        className=\"option-input radio\" \r\n                                        name=\"genders\" \r\n                                    />\r\n                                    Feminino\r\n                                </label>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Col>\r\n            <Col md={{size: 6}}>\r\n                <div className=\"box\">\r\n                    <h1 className=\"subtitle\">\r\n                        Endereço\r\n                    </h1>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"cep\">CEP: </label>\r\n                            <input \r\n                                maxLength=\"8\" \r\n                                onChange={handleChangeCep} \r\n                                type=\"text\" \r\n                                name=\"cep\" \r\n                                className=\"form-control input\" \r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"street\">Logradouro: </label>\r\n                            <input \r\n                                onChange={handleChangeAddress} \r\n                                id=\"street\" \r\n                                type=\"text\" \r\n                                name=\"street\" \r\n                                className=\"form-control input\" \r\n                                placeholder=\"Rua, AV, etc...\" \r\n                                disabled={isCepValid}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"numero\">Número: </label>\r\n                            <input \r\n                                onChange={handleChangeAddress} \r\n                                id=\"number\" \r\n                                type=\"number\" \r\n                                name=\"number\" \r\n                                className=\"form-control input\" \r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"neighborhood\">Bairro: </label>                                    \r\n                            <input \r\n                                id=\"neighborhood\" \r\n                                type=\"text\" \r\n                                name=\"neighborhood\" \r\n                                className=\"form-control input\"\r\n                                disabled={isCepValid}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginBottom: '32px'}}>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"state\">UF: </label>                                    \r\n                            <select \r\n                                name=\"state\" \r\n                                id=\"state\" \r\n                                className=\"form-control input\"\r\n                                disabled={isCepValid}\r\n                            >\r\n                                <option value=\"AC\">AC</option>\r\n                                <option value=\"AL\">AL</option>\r\n                                <option value=\"AP\">AP</option>\r\n                                <option value=\"AM\">AM</option>\r\n                                <option value=\"BA\">BA</option>\r\n                                <option value=\"CE\">CE</option>\r\n                                <option value=\"DF\">DF</option>\r\n                                <option value=\"ES\">ES</option>\r\n                                <option value=\"GO\">GO</option>\r\n                                <option value=\"MA\">MA</option>\r\n                                <option value=\"MT\">MT</option>\r\n                                <option value=\"MS\">MS</option>\r\n                                <option value=\"MG\">MG</option>\r\n                                <option value=\"PA\">PA</option>\r\n                                <option value=\"PB\">PB</option>\r\n                                <option value=\"PR\">PR</option>\r\n                                <option value=\"PE\">PE</option>\r\n                                <option value=\"PI\">PI</option>\r\n                                <option value=\"RJ\">RJ</option>\r\n                                <option value=\"RN\">RN</option>\r\n                                <option value=\"RS\">RS</option>\r\n                                <option value=\"RO\">RO</option>\r\n                                <option value=\"RR\">RR</option>\r\n                                <option value=\"SC\">SC</option>\r\n                                <option value=\"SP\">SP</option>\r\n                                <option value=\"SE\">SE</option>\r\n                                <option value=\"TO\">TO</option>\r\n                            </select>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"city\">Municipio: </label>\r\n                            <input \r\n                                type=\"text\" \r\n                                onChange={handleChangeAddress} \r\n                                name=\"city\" \r\n                                id=\"city\" \r\n                                className=\"form-control input\"\r\n                                disabled={isCepValid} \r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n            <Col md={12}>\r\n                <div className=\"box\">\r\n                    <h1 className=\"subtitle\">\r\n                        Informações adicionais\r\n                    </h1>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"emergency_contact\">Contato de Emergência: </label>                                    \r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"emergency_contact\" \r\n                                className=\"form-control input\" \r\n                                placeholder=\"DDD + número\" \r\n                                onChange={handlePlusInformationChange}\r\n                                value={emergencyContact}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"emergency_name\">Nome: </label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"emergency_name\" \r\n                                className=\"form-control input\" \r\n                                placeholder=\"Nome completo\" \r\n                                onChange={handlePlusInformationChange}\r\n                            />                               \r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n                        <Col md={12}>\r\n                            <label htmlFor=\"observation\">Observação: </label>                                    \r\n                            <textarea \r\n                                className=\"form-control input\" \r\n                                name=\"observation\"\r\n                                onChange={handlePlusInformationChange}\r\n                            >\r\n                            </textarea>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n            <Col md={12}>\r\n                <div className=\"box\">\r\n                    <h1 className=\"subtitle\">\r\n                        Valor da Sessão\r\n                    </h1>\r\n                    <Row style={{marginBottom: '32px'}}>\r\n                        <Col md={6}>\r\n                            <label htmlFor=\"value\">Valor: </label>                                    \r\n                            <input \r\n                                type=\"text\"\r\n                                onChange={handleChangeUser} \r\n                                className=\"form-control input\" \r\n                                name=\"value\" \r\n                                value={value}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            Deseja recibo?\r\n                            <div className=\"receipt\">\r\n                                <label>\r\n                                    <input \r\n                                        type=\"radio\" \r\n                                        className=\"option-input radio\" \r\n                                        name=\"receipt\" \r\n                                        defaultChecked \r\n                                    />\r\n                                    Sim\r\n                                </label>\r\n                                <br />\r\n                                <label>\r\n                                    <input \r\n                                        type=\"radio\" \r\n                                        className=\"option-input radio\" \r\n                                        name=\"receipt\" \r\n                                    />\r\n                                    Não\r\n                                </label>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n            <Col md={12}>\r\n                <div className=\"box\">\r\n                    <h1 className=\"subtitle\">\r\n                        Dados de Acesso ao Sistema\r\n                    </h1>\r\n                    <Row>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"email\">Email: </label>                                    \r\n                            <input \r\n                                onChange={handleChangeUser} \r\n                                type=\"email\" \r\n                                className=\"form-control input\" \r\n                                name=\"email\" \r\n                                autoComplete=\"new-password\"\r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"password\">Senha: </label>                                    \r\n                            <input \r\n                                onChange={handleChangeUser} \r\n                                type=\"password\" \r\n                                className=\"form-control input\" \r\n                                name=\"password\" \r\n                                autoComplete=\"new-password\"\r\n                            />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"password_confirmation\">Repetir Senha: </label>                                    \r\n                            <input \r\n                                onChange={handleChangeUser} \r\n                                type=\"password\" \r\n                                className=\"form-control input\" \r\n                                name=\"password_confirmation\" \r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop: '32px', marginBottom: '32px'}}>\r\n                        <Col md={4}>\r\n                            <label htmlFor=\"role\">Hierarquia: </label>                                    \r\n                            <select className=\"form-control input\" name=\"role\">\r\n                                <option>Teste 1</option>\r\n                                <option>Teste 2</option>\r\n                                <option>Teste 3</option>\r\n                            </select>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            Cadastro ativo?\r\n                            <div className=\"active\">\r\n                                <label>\r\n                                    <input \r\n                                        type=\"radio\" \r\n                                        className=\"option-input radio\" \r\n                                        name=\"active\" \r\n                                        defaultChecked \r\n                                    />\r\n                                    Sim\r\n                                </label>\r\n                                <br />\r\n                                <label>\r\n                                    <input \r\n                                        type=\"radio\" \r\n                                        className=\"option-input radio\" \r\n                                        name=\"active\" \r\n                                    />\r\n                                    Não\r\n                                </label>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{marginBottom: '100px'}}>\r\n            <Col md={12}>\r\n                <div className=\"box\">\r\n                    <h1 className=\"subtitle\">Salvar dados</h1>\r\n                    <Button type=\"submit\">Salvar</Button>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   setPageTitle: title => dispatch(actions.setPageTitle(title))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StorePatients)","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Patients = props => {\r\n\r\n    const [initState, setInitState] = useState([])\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar pacientes\")\r\n        props.fetchPatients()\r\n        setInitState(props.patients)\r\n    },[])\r\n\r\n    const handleInput = e => {\r\n        props.filterPatients(e.target.value)\r\n    }\r\n\r\n    const deletePatient = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este paciente?',\r\n            text: 'Todos os registros vinculados ao paciente serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n        .then(res => {\r\n            if(res.value)\r\n                props.deletePatient(id)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"box\">\r\n            <Row>\r\n                <Col md={12}>\r\n                    <label htmlFor=\"search\">Pesquisar:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control input\" \r\n                        placeholder=\"Digite aqui o nome do paciente...\" \r\n                        onChange={handleInput} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n                {\r\n                    props.patients.patients ? (\r\n                        <table className=\"table table-striped table-sm table-responsive\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>RG:</th>\r\n                                    <th>Celular:</th>\r\n                                    <th>Editar:</th>\r\n                                    <th>Deletar:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.patients.patients.map((patient, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{patient.name}</td>\r\n                                    <td>{patient.rg}</td>\r\n                                    <td>{patient.phone}</td>\r\n                                    <td>\r\n                                        <button onClick={() => Swal.fire('Em construção')} className=\"btn edit-button\">\r\n                                            <FontAwesomeIcon icon={faEdit} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => deletePatient(patient.id) } \r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                        </table>\r\n                    ) : (\r\n                        <Loader className=\"loader\" type=\"TailSpin\" color=\"#17A2B8\" height={100} width={100} />\r\n                    )\r\n                }\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    filterPatients: patient => dispatch(actions.filterPatients(patient)),\r\n    fetchPatients: () => dispatch(actions.fetchPatients()),\r\n    deletePatient: id => dispatch(actions.deletePatient(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patients)","export const filterPatients = patient => ({\r\n    type: \"FILTER_PATIENTS\",\r\n    payload: patient\r\n})\r\n\r\nexport const fetchPatients = () => ({\r\n    type: \"FETCH_PATIENTS_SAGA\"\r\n})\r\n\r\nexport const deletePatient = id => ({\r\n    type: \"DELETE_PATIENT_SAGA\",\r\n    payload: id\r\n})","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Container } from 'reactstrap'\r\nimport NavBar from './Navbar'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ProtectedRoute } from '../../protected.route'\r\n\r\nimport StorePatients from '../Patients/storePatient'\r\nimport Patients from '../Patients/patients'\r\n\r\nexport default props => (\r\n    <Container fluid className={classNames('content', {'is-open': props.isOpen})}>\r\n\t\t<NavBar toggle={props.toggle}/>\r\n\t\t<Switch>\r\n\t\t\t<ProtectedRoute exact path=\"/\" component={() => \"Em construção...\" } />\r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-pacientes\" component={StorePatients} />\r\n\t\t\t<ProtectedRoute exact path=\"/pacientes\" component={Patients} />          \r\n\t\t</Switch>\r\n    </Container>\r\n)","import React, { useState } from 'react'\r\nimport auth from '../../auth'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHospitalAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from 'react-loader-spinner'\r\nimport './style.scss'\r\n\r\nconst Login = props => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [incorrectMessage, setIncorrectMessage] = useState(false)\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const handleLogin = e => {\r\n        setLoader(true)\r\n        e.preventDefault()\r\n        \r\n        let data = {email: email, password: password}\r\n\r\n        auth.login(data, \r\n            () => props.history.push(\"/\"), \r\n            () => {\r\n                setIncorrectMessage(true)\r\n                setLoader(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n                <Col className=\"form-background\" md={{size: 6, offset: 3}}>\r\n                    <form onSubmit={handleLogin}>\r\n                        <h2><FontAwesomeIcon icon={faHospitalAlt} /> Acessar</h2>\r\n                        <input onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" name=\"user\" required />\r\n                        <input onChange={e => setPassword(e.target.value)} type=\"password\" className=\"form-control\" name=\"password\" required />\r\n                        { loader ? <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} /> : \"\" }\r\n                        { incorrectMessage ? <p>Usuário ou senha incorretos</p> : \"\" }\r\n                        <Button className=\"login-button\">Acessar</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SideBar from './components/SideBar'\r\nimport Content from './components/Content'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './App.scss'\r\nimport Login from './components/Login'\r\n\r\nexport default () => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n\t\t<Switch>\r\n\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t<div className=\"App wrapper\">\r\n\t\t\t<SideBar toggle={toggle} isOpen={isOpen} />\r\n\t\t\t<Content toggle={toggle} isOpen={isOpen} />\r\n\t\t</div>\r\n\t\t</Switch>\r\n    </Router>\r\n  )\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const initState = {\r\n    pageTitle: \"Gerenciador de consultas\"\r\n}\r\n\r\nconst pageReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case \"SET_PAGE_TITLE\":\r\n            return {\r\n              pageTitle: action.payload  \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pageReducer","const initState = {}\r\n\r\nconst patientsReducer = (state = {}, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case \"FILTER_PATIENTS\":\r\n            let filteredPatients = initState.patients.filter(patient => {\r\n                let name = patient.name.toLocaleLowerCase()\r\n                return name.includes(action.payload.toLocaleLowerCase())\r\n            })\r\n            return {\r\n                patients: filteredPatients\r\n            }\r\n\r\n        case \"SET_PATIENTS\":\r\n            initState.patients = action.payload\r\n            return {\r\n                patients: action.payload\r\n            }\r\n\r\n        case \"DELETE_PATIENT\":\r\n            let remainingPatients = state.patients.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.patients = remainingPatients\r\n            return {\r\n                patients: remainingPatients,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport default patientsReducer","import { combineReducers } from 'redux'\r\nimport pageReducer from './pageReducer'\r\nimport patientsReducer from './patientsReducer'\r\n\r\nexport default combineReducers ({\r\n    pageReducer,\r\n    patientsReducer\r\n})","import { put, call } from 'redux-saga/effects'\r\nimport patientsService from '../../services/patientsService'\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(patientsService.fetchAll)\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* deletePatient(action){\r\n    let jsonResponse = yield call(patientsService.deletePatient, action.payload)\r\n    yield put({\r\n        type: \"DELETE_PATIENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import { takeEvery, all } from 'redux-saga/effects'\r\nimport * as patientsSagas from './patients'\r\n\r\nexport function* watchSagas(){\r\n    yield all([\r\n        yield takeEvery(\"FETCH_PATIENTS_SAGA\", patientsSagas.fetchAll),\r\n        yield takeEvery(\"DELETE_PATIENT_SAGA\", patientsSagas.deletePatient)\r\n    ])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { watchSagas } from './store/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(watchSagas)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}