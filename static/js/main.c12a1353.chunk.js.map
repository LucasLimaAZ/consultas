{"version":3,"sources":["components/SideBar/SubMenu.js","services/api.js","auth.js","components/SideBar/index.js","components/Content/Navbar.js","protected.route.js","store/actions/page.js","components/Mask/index.js","services/patientsService.js","components/Patients/storePatient.js","components/Patients/patients.js","store/actions/patients.js","components/Content/index.js","components/Login/index.js","App.js","serviceWorker.js","store/reducers/pageReducer.js","store/reducers/patientsReducer.js","store/reducers/index.js","store/sagas/patients.js","store/sagas/index.js","index.js"],"names":["SubMenu","props","useState","collapsed","setCollapsed","icon","title","items","NavItem","onClick","className","classNames","NavLink","Collapse","isOpen","navbar","map","item","index","key","tag","Link","to","target","api","axios","create","baseURL","interceptors","request","use","headers","localStorage","getItem","error","this","authenticated","data","callBack","elseCallBack","post","then","response","status","setItem","access_token","catch","err","console","log","submenus","SideBar","color","toggle","style","faTimesCircle","faHospitalAlt","Nav","cursor","vertical","faUsers","faUserMd","auth","logout","window","location","reload","faPowerOff","connect","store","pageTitle","pageReducer","setOpen","useEffect","Navbar","light","expand","Button","faBars","NavbarToggler","ProtectedRoute","Component","component","rest","render","isAuthenticated","pathname","state","from","setPageTitle","type","payload","phoneMask","value","replace","get","id","delete","body","dispatch","actions","cpf","setCpf","cep","setCep","foreign","setForeign","emergencyContact","setEmergencyContact","setValue","phone","setPhone","mobilephone","setMobilephone","isCepValid","setIsCepValid","dateColor","setDateColor","setBody","handleDateChage","e","name","handleChangeBody","handleChangePhone","handleChangeUser","val","length","currencyMask","user","handleChangeAddress","address","handlePlusInformationChange","plusInformation","handleFormSubmit","a","preventDefault","password","password_confirmation","patientsService","Swal","fire","confirmButtonColor","text","autoComplete","onSubmit","Row","Col","md","size","htmlFor","onChange","placeholder","marginTop","cpfMask","maxLength","marginBottom","onKeyDown","defaultChecked","checked","res","erro","document","querySelector","logradouro","bairro","uf","localidade","city","street","neighborhood","disabled","min","patients","patientsReducer","filterPatients","patient","fetchPatients","deletePatient","Table","striped","responsive","rg","faEdit","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","faTrash","height","width","Container","fluid","exact","path","StorePatients","Patients","Login","email","setEmail","setPassword","incorrectMessage","setIncorrectMessage","loader","setLoader","offset","login","history","push","required","Content","Boolean","hostname","match","initState","action","filteredPatients","filter","toLocaleLowerCase","includes","remainingPatients","jsonResponse","combineReducers","fetchAll","call","put","watchSagas","all","takeEvery","patientsSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c12a1353.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport  { Collapse, NavItem, NavLink } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SubMenu = props => {\r\n  \r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const toggleNavbar = () => setCollapsed(!collapsed)\r\n  const { icon, title, items } = props;\r\n \r\n  return (\r\n    <div>\r\n      <NavItem onClick={toggleNavbar} className={classNames({'menu-open': !collapsed})}>\r\n        <NavLink className=\"dropdown-toggle\">\r\n          <FontAwesomeIcon icon={icon} className=\"mr-2\"/>{title}\r\n        </NavLink>\r\n      </NavItem>\r\n      <Collapse isOpen={!collapsed} navbar className={classNames('items-menu',{'mb-1': !collapsed})}>\r\n        {items.map((item, index) => (\r\n            <NavItem key={index} className=\"pl-4\">\r\n              <NavLink tag={Link} to={item.target}>\r\n                {item.title}\r\n              </NavLink>\r\n            </NavItem>\r\n            ))}\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubMenu;","import axios from 'axios'\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'https://appointments12.herokuapp.com/api/' \r\n\r\n})\r\n\r\napi.interceptors.request.use(\r\n    request => {\r\n        request.headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'Authorization': \"Bearer \" + localStorage.getItem('access_token'),\r\n        }\r\n      return request\r\n    },\r\n    error => error\r\n)\r\n\r\nexport default api\r\n","import api from './services/api'\r\n\r\nclass Auth{\r\n    constructor(props){\r\n        this.authenticated = false\r\n    }\r\n\r\n    login(data, callBack, elseCallBack){\r\n\r\n        api.post('/auth/login', data)\r\n            .then(response => {\r\n                if(response.status === 200){\r\n                    localStorage.setItem(\"access_token\", response.data.access_token)\r\n                    this.authenticated = true\r\n                    \r\n                    callBack()\r\n                }\r\n                else{\r\n                    this.authenticated = false\r\n                    elseCallBack()\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.authenticated = false\r\n                elseCallBack()\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n    logout(callBack){\r\n        this.authenticated = false\r\n        callBack()\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated\r\n    }\r\n}\r\n\r\nexport default new Auth()","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faPowerOff, faHospitalAlt, faUserMd, faUsers, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport SubMenu from './SubMenu'\r\nimport { NavItem, NavLink, Nav } from 'reactstrap'\r\nimport classNames from 'classnames'\r\nimport auth from '../../auth'\r\nimport \"./style.scss\"\r\n\r\nconst SideBar = props => (\r\n\t<div className={classNames('sidebar', {'is-open': props.isOpen})}>\r\n\t\t<div className=\"sidebar-header\">\r\n\t\t<span color=\"info\" onClick={props.toggle} style={{color: '#fff'}}><FontAwesomeIcon icon={faTimesCircle} /></span>\r\n\t\t<h3 className=\"sidebar-title\"><FontAwesomeIcon icon={faHospitalAlt} /> Consultas</h3>\r\n\t\t</div>\r\n\t\t<div className=\"side-menu\">\r\n\t\t<Nav style={{cursor: 'pointer'}} vertical className=\"list-unstyled pb-3\">\r\n\t\t\t<p>Bem vindo Usuário</p>\r\n\t\t\t<SubMenu title=\"Pacientes\" icon={faUsers} items={submenus[0]}/>\r\n\t\t\t<SubMenu title=\"Agendamento\" icon={faUserMd} items={submenus[1]}/>\r\n\t\t\t<NavItem>\r\n\t\t\t<NavLink onClick={() => auth.logout(() => window.location.reload(false))}>\r\n\t\t\t\t<FontAwesomeIcon icon={faPowerOff} className=\"mr-2\"/>Sair\r\n\t\t\t</NavLink>\r\n\t\t\t</NavItem>\r\n\t\t</Nav>\t\t\t\t\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nconst submenus = [\r\n[\r\n\t{\r\n\ttitle: \"Cadastrar pacientes\",\r\n\ttarget: \"cadastrar-pacientes\"\r\n\t},\r\n\t{\r\n\ttitle: \"Gerenciar pacientes\",\r\n\ttarget: \"pacientes\",\t\t\t\t\r\n\t}\r\n],\r\n[\r\n\t{\r\n\ttitle: \"Novo\",\r\n\ttarget: \"cadastrar-atendimento\",\t\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Agendamentos\",\r\n\ttarget: \"agendamentos\",\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Material de Apoio\",\r\n\ttarget: \"material-apoio\",\t\t\t\t\r\n\t}\r\n]\r\n]\r\n\t\r\n\r\nexport default SideBar","import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { Navbar, Button, NavbarToggler, Collapse, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NavBar = props => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  useEffect(() => {\r\n    //console.log(props)\r\n  })\r\n  \r\n  return (\r\n    <Navbar color=\"light\" light className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\" expand=\"md\">\r\n      <Button color=\"info\" onClick={props.toggle}>\r\n        <FontAwesomeIcon icon={faBars}/>\r\n      </Button>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"m-auto\" navbar>\r\n          <NavItem>\r\n            <div className=\"page-title\">\r\n              <h1 className=\"title\">\r\n                {props.pageTitle}\r\n              </h1>\r\n            </div>\r\n          </NavItem>\r\n      </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return{\r\n    pageTitle: store.pageReducer.pageTitle\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavBar)","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return(\r\n        <Route {...rest} render={\r\n            (props) => {\r\n                if(auth.isAuthenticated()){\r\n                    return <Component {...props} />\r\n                }else{\r\n                    return <Redirect to={\r\n                        {\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                from: props.location\r\n                            }\r\n                        }\r\n                    } />\r\n                }\r\n            }\r\n        }/>\r\n    )\r\n}","export const setPageTitle = title => ({\r\n    type: 'SET_PAGE_TITLE',\r\n    payload: title\r\n})","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') \r\n}\r\n\r\nexport const phoneMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '')\r\n        .replace(/(\\d{0})(\\d)/, '$1($2') \r\n        .replace(/(\\d{2})(\\d)/, '$1) $2')\r\n}\r\n\r\nexport const currencyMask = val => {\r\n    let value = val\r\n        .replace(/\\D/g, '')\r\n        .replace(/^0+/g, '')\r\n\r\n    if(value.length === 1){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{1})$/g, \"0,0$1\")\r\n    }\r\n    else if(value.length === 2){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \"0,$1\")\r\n    }\r\n    else{\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \",$1\")\r\n    }\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/patients')\r\nconst store = body => api.post('/patients', body)\r\nconst deletePatient = id => api.delete(`/patients/${id}`)\r\n\r\nexport default {\r\n    fetchAll,\r\n    deletePatient,\r\n    store\r\n}","import React, { useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport { cpfMask, phoneMask, currencyMask } from '../Mask/index'\r\nimport patientsService from \"../../services/patientsService\"\r\nimport Swal from \"sweetalert2\"\r\nimport axios from \"axios\"\r\n\r\nconst StorePatients = props => {\r\n\r\n    const [cpf, setCpf] = useState(\"\")\r\n    const [cep, setCep] = useState(\"\")\r\n    const [foreign, setForeign] = useState(false)\r\n    const [emergencyContact, setEmergencyContact] = useState(\"\")\r\n    const [value, setValue] = useState(\"R$ 0,00\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [mobilephone, setMobilephone] = useState(\"\")\r\n    const [isCepValid, setIsCepValid] = useState(false)\r\n    const [dateColor, setDateColor] = useState(\"form-control input nascimento\")\r\n    const [body, setBody] = useState({})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Cadastrar Paciente\")\r\n    })\r\n\r\n    const handleCpf = e => {\r\n        setCpf(cpfMask(e.target.value))\r\n\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleVerifyPasswords = () => {\r\n        return body.user.password === body.user.password_confirmation\r\n    }\r\n\r\n    const handleChangeCep = e => {\r\n        let cep = e.target.value.replace(/[^0-9]/g, '')\r\n        setCep(cep)\r\n\r\n        if (cep.length === 8)\r\n            axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n                .then(res => {\r\n                    if (!res.data.erro) {\r\n                        setIsCepValid(true)\r\n                        document.querySelector(\"#street\").value = res.data.logradouro\r\n                        document.querySelector(\"#neighborhood\").value = res.data.bairro\r\n                        document.querySelector(\"#state\").value = res.data.uf\r\n                        document.querySelector(\"#city\").value = res.data.localidade\r\n                        setBody({\r\n                            ...body,\r\n                            address: {\r\n                                ...body.address,\r\n                                city: res.data.localidade,\r\n                                cep: cep,\r\n                                street: res.data.logradouro,\r\n                                state: res.data.uf,\r\n                                neighborhood: res.data.bairro\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        setIsCepValid(false)\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"Um erro ocorreu ao buscar o CEP: \", err))\r\n    }\r\n\r\n    const handleDateChage = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n\r\n        setDateColor(\"form-control input\")\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangePhone = e => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n\r\n        if (!foreign) {\r\n            value = value.replace(/[^0-9]/g, '')\r\n\r\n            if (name == \"telephone\")\r\n                setPhone(phoneMask(value))\r\n            else\r\n                setMobilephone(phoneMask(value))\r\n        } else {\r\n            if (name == \"telephone\")\r\n                setPhone(value)\r\n            else\r\n                setMobilephone(value)\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeUser = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (name == \"value\") {\r\n            setValue(currencyMask(value))\r\n            value = value.replace(/[^0-9]/g, '')\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            user: {\r\n                ...body.user,\r\n                name: body.name,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeAddress = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            address: {\r\n                ...body.address,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePlusInformationChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (!foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(phoneMask(value))\r\n        if (foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(value)\r\n\r\n        setBody({\r\n            ...body,\r\n            plusInformation: {\r\n                ...body.plusInformation,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = async e => {\r\n        e.preventDefault()\r\n        if (handleVerifyPasswords()) {\r\n            await setBody({\r\n                ...body,\r\n                foreign: foreign\r\n            })\r\n            await patientsService.store(body)\r\n                .then(() => {\r\n                    Swal.fire({\r\n                        title: \"Paciente cadastrado com sucesso!\",\r\n                        icon: \"success\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n                .catch(() => {\r\n                    Swal.fire({\r\n                        title: \"Ocorreu um erro.\",\r\n                        text: \"Por favor tente novamente mais tarde.\",\r\n                        icon: \"warning\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n        } else\r\n            Swal.fire(\"As senhas divergem.\")\r\n    }\r\n\r\n    const handleForeignChange = () => {\r\n        setPhone(\"\")\r\n        setMobilephone(\"\")\r\n        setEmergencyContact(\"\")\r\n\r\n        if (!foreign)\r\n            setForeign(true)\r\n        else\r\n            setForeign(false)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"new-password\" onSubmit={handleFormSubmit}>\r\n            <Row>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados do paciente\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={8}>\r\n                                <label htmlFor=\"name\">Nome: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"telephone\">Telefone Fixo: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"telephone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={phone}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"phone\">Celular: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"phone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={mobilephone}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"cpf\">CPF: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cpf\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleCpf}\r\n                                    maxLength=\"14\"\r\n                                    placeholder=\"___.___.___-__\"\r\n                                    value={cpf}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"rg\">RG: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"rg\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"birthday\">Data de Nascimento: </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    name=\"birthday\"\r\n                                    className={dateColor}\r\n                                    placeholder=\"Data de Nascimento\"\r\n                                    onChange={handleDateChage}\r\n                                    onKeyDown={handleDateChage}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Gênero\r\n                            <div className=\"genders\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Masculino\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                        />\r\n                                    Feminino\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <input\r\n                                    className=\"foreignCheckbox\"\r\n                                    name=\"foreign\"\r\n                                    type=\"checkbox\"\r\n                                    checked={foreign}\r\n                                    onChange={handleForeignChange}\r\n                                />\r\n                                <span className=\"foreignLabel\">\r\n                                    Estrangeiro?\r\n                                </span>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Endereço\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cep\">CEP: </label>\r\n                                <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeCep}\r\n                                    type=\"text\"\r\n                                    name=\"cep\"\r\n                                    className=\"form-control input\"\r\n                                    value={cep}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"street\">Logradouro: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"street\"\r\n                                    type=\"text\"\r\n                                    name=\"street\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Rua, AV, etc...\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"numero\">Número: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"number\"\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    name=\"number\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"neighborhood\">Bairro: </label>\r\n                                <input\r\n                                    id=\"neighborhood\"\r\n                                    type=\"text\"\r\n                                    name=\"neighborhood\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                {\r\n                                    foreign ? (\r\n                                        <>\r\n                                            <label htmlFor=\"state\">Estado: </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"state\"\r\n                                                id=\"state\"\r\n                                                className=\"form-control input\"\r\n                                                disabled={isCepValid}\r\n                                            />\r\n                                        </>\r\n                                    )\r\n                                        : (\r\n                                            <>\r\n                                                <label htmlFor=\"state\">UF: </label>\r\n                                                <select\r\n                                                    name=\"state\"\r\n                                                    id=\"state\"\r\n                                                    className=\"form-control input\"\r\n                                                    disabled={isCepValid}\r\n                                                >\r\n                                                    <option value=\"AC\">AC</option>\r\n                                                    <option value=\"AL\">AL</option>\r\n                                                    <option value=\"AP\">AP</option>\r\n                                                    <option value=\"AM\">AM</option>\r\n                                                    <option value=\"BA\">BA</option>\r\n                                                    <option value=\"CE\">CE</option>\r\n                                                    <option value=\"DF\">DF</option>\r\n                                                    <option value=\"ES\">ES</option>\r\n                                                    <option value=\"GO\">GO</option>\r\n                                                    <option value=\"MA\">MA</option>\r\n                                                    <option value=\"MT\">MT</option>\r\n                                                    <option value=\"MS\">MS</option>\r\n                                                    <option value=\"MG\">MG</option>\r\n                                                    <option value=\"PA\">PA</option>\r\n                                                    <option value=\"PB\">PB</option>\r\n                                                    <option value=\"PR\">PR</option>\r\n                                                    <option value=\"PE\">PE</option>\r\n                                                    <option value=\"PI\">PI</option>\r\n                                                    <option value=\"RJ\">RJ</option>\r\n                                                    <option value=\"RN\">RN</option>\r\n                                                    <option value=\"RS\">RS</option>\r\n                                                    <option value=\"RO\">RO</option>\r\n                                                    <option value=\"RR\">RR</option>\r\n                                                    <option value=\"SC\">SC</option>\r\n                                                    <option value=\"SP\">SP</option>\r\n                                                    <option value=\"SE\">SE</option>\r\n                                                    <option value=\"TO\">TO</option>\r\n                                                </select>\r\n                                            </>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"city\">Municipio: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeAddress}\r\n                                    name=\"city\"\r\n                                    id=\"city\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Informações adicionais\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_contact\">Contato de Emergência: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_contact\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={emergencyContact}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_name\">Nome: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_name\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"observation\">Observação: </label>\r\n                                <textarea\r\n                                    className=\"form-control input\"\r\n                                    name=\"observation\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                >\r\n                                </textarea>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Valor da Sessão\r\n                    </h1>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"value\">Valor: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeUser}\r\n                                    className=\"form-control input\"\r\n                                    name=\"value\"\r\n                                    value={value}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Deseja recibo?\r\n                            <div className=\"receipt\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados de Acesso ao Sistema\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"email\">Email: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"email\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"new-password\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password\">Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password_confirmation\">Repetir Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password_confirmation\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"role\">Hierarquia: </label>\r\n                                <select className=\"form-control input\" name=\"role\">\r\n                                    <option>Teste 1</option>\r\n                                    <option>Teste 2</option>\r\n                                    <option>Teste 3</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                Cadastro ativo?\r\n                            <div className=\"active\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: '100px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">Salvar dados</h1>\r\n                        <Button type=\"submit\">Salvar</Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StorePatients)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col, Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Patients = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar pacientes\")\r\n        props.fetchPatients()\r\n    },[])\r\n\r\n    const handleInput = e => {\r\n        props.filterPatients(e.target.value)\r\n    }\r\n\r\n    const deletePatient = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este paciente?',\r\n            text: 'Todos os registros vinculados ao paciente serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n        .then(res => {\r\n            if(res.value)\r\n                props.deletePatient(id)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"box\">\r\n            <Row>\r\n                <Col md={12}>\r\n                    <label htmlFor=\"search\">Pesquisar:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control input\" \r\n                        placeholder=\"Digite aqui o nome do paciente...\" \r\n                        onChange={handleInput} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <>\r\n                {\r\n                    props.patients.patients ? (\r\n                        <Table striped responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>RG:</th>\r\n                                    <th>Celular:</th>\r\n                                    <th>Editar:</th>\r\n                                    <th>Deletar:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.patients.patients.map((patient, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{patient.name}</td>\r\n                                    <td>{patient.rg}</td>\r\n                                    <td>{patient.phone}</td>\r\n                                    <td>\r\n                                        <button onClick={() => Swal.fire('Em construção')} className=\"btn edit-button\">\r\n                                            <FontAwesomeIcon icon={faEdit} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => deletePatient(patient.id) } \r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    ) : (\r\n                        <Loader className=\"loader\" type=\"TailSpin\" color=\"#17A2B8\" height={100} width={100} />\r\n                    )\r\n                }\r\n            </>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    filterPatients: patient => dispatch(actions.filterPatients(patient)),\r\n    fetchPatients: () => dispatch(actions.fetchPatients()),\r\n    deletePatient: id => dispatch(actions.deletePatient(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patients)","export const filterPatients = patient => ({\r\n    type: \"FILTER_PATIENTS\",\r\n    payload: patient\r\n})\r\n\r\nexport const fetchPatients = () => ({\r\n    type: \"FETCH_PATIENTS_SAGA\"\r\n})\r\n\r\nexport const deletePatient = id => ({\r\n    type: \"DELETE_PATIENT_SAGA\",\r\n    payload: id\r\n})","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Container } from 'reactstrap'\r\nimport NavBar from './Navbar'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ProtectedRoute } from '../../protected.route'\r\n\r\nimport StorePatients from '../Patients/storePatient'\r\nimport Patients from '../Patients/patients'\r\n\r\nexport default props => (\r\n    <Container fluid className={classNames('content', {'is-open': props.isOpen})}>\r\n\t\t<NavBar toggle={props.toggle}/>\r\n\t\t<Switch>\r\n\t\t\t<ProtectedRoute exact path=\"/\" component={() => \"Em construção...\" } />\r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-pacientes\" component={StorePatients} />\r\n\t\t\t<ProtectedRoute exact path=\"/pacientes\" component={Patients} />          \r\n\t\t</Switch>\r\n    </Container>\r\n)","import React, { useState } from 'react'\r\nimport auth from '../../auth'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHospitalAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from 'react-loader-spinner'\r\nimport './style.scss'\r\n\r\nconst Login = props => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [incorrectMessage, setIncorrectMessage] = useState(false)\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const handleLogin = e => {\r\n        setLoader(true)\r\n        e.preventDefault()\r\n        \r\n        let data = {email: email, password: password}\r\n\r\n        auth.login(data, \r\n            () => props.history.push(\"/\"), \r\n            () => {\r\n                setIncorrectMessage(true)\r\n                setLoader(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n                <Col className=\"form-background\" md={{size: 6, offset: 3}}>\r\n                    <form onSubmit={handleLogin}>\r\n                        <h2><FontAwesomeIcon icon={faHospitalAlt} /> Acessar</h2>\r\n                        <input onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" name=\"user\" required />\r\n                        <input onChange={e => setPassword(e.target.value)} type=\"password\" className=\"form-control\" name=\"password\" required />\r\n                        { loader ? <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} /> : \"\" }\r\n                        { incorrectMessage ? <p>Usuário ou senha incorretos</p> : \"\" }\r\n                        <Button className=\"login-button\">Acessar</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SideBar from './components/SideBar'\r\nimport Content from './components/Content'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './App.scss'\r\nimport Login from './components/Login'\r\n\r\nexport default () => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n\t\t<Switch>\r\n\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t<div className=\"App wrapper\">\r\n\t\t\t<SideBar toggle={toggle} isOpen={isOpen} />\r\n\t\t\t<Content toggle={toggle} isOpen={isOpen} />\r\n\t\t</div>\r\n\t\t</Switch>\r\n    </Router>\r\n  )\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const initState = {\r\n    pageTitle: \"Gerenciador de consultas\"\r\n}\r\n\r\nconst pageReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case \"SET_PAGE_TITLE\":\r\n            return {\r\n              pageTitle: action.payload  \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pageReducer","const initState = {}\r\n\r\nconst patientsReducer = (state = {}, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case \"FILTER_PATIENTS\":\r\n            let filteredPatients = initState.patients.filter(patient => {\r\n                let name = patient.name.toLocaleLowerCase()\r\n                return name.includes(action.payload.toLocaleLowerCase())\r\n            })\r\n            return {\r\n                patients: filteredPatients\r\n            }\r\n\r\n        case \"SET_PATIENTS\":\r\n            initState.patients = action.payload\r\n            return {\r\n                patients: action.payload\r\n            }\r\n\r\n        case \"DELETE_PATIENT\":\r\n            let remainingPatients = state.patients.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.patients = remainingPatients\r\n            return {\r\n                patients: remainingPatients,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport default patientsReducer","import { combineReducers } from 'redux'\r\nimport pageReducer from './pageReducer'\r\nimport patientsReducer from './patientsReducer'\r\n\r\nexport default combineReducers ({\r\n    pageReducer,\r\n    patientsReducer\r\n})","import { put, call } from 'redux-saga/effects'\r\nimport patientsService from '../../services/patientsService'\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(patientsService.fetchAll)\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* deletePatient(action){\r\n    let jsonResponse = yield call(patientsService.deletePatient, action.payload)\r\n    yield put({\r\n        type: \"DELETE_PATIENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import { takeEvery, all } from 'redux-saga/effects'\r\nimport * as patientsSagas from './patients'\r\n\r\nexport function* watchSagas(){\r\n    yield all([\r\n        yield takeEvery(\"FETCH_PATIENTS_SAGA\", patientsSagas.fetchAll),\r\n        yield takeEvery(\"DELETE_PATIENT_SAGA\", patientsSagas.deletePatient)\r\n    ])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { watchSagas } from './store/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(watchSagas)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}