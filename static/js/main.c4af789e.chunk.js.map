{"version":3,"sources":["components/SideBar/SubMenu.js","services/api.js","auth.js","components/SideBar/index.js","components/Content/Navbar.js","protected.route.js","store/actions/page.js","store/actions/patients.js","store/actions/files.js","components/Home/index.js","store/actions/appointments.js","components/Mask/index.js","services/patientsService.js","components/Patients/storePatient.js","components/Patients/patientRecordModal.js","components/Patients/patients.js","components/Dropzone/index.js","components/Appointments/index.js","components/Appointments/listAppointments.js","components/Files/index.js","components/Content/index.js","components/Login/index.js","App.js","serviceWorker.js","store/reducers/pageReducer.js","store/reducers/patientsReducer.js","store/reducers/appointmentsReducer.js","store/reducers/filesReducer.js","store/reducers/index.js","store/sagas/patients.js","services/appointmentsService.js","store/sagas/appointments.js","services/filesService.js","store/sagas/files.js","store/sagas/index.js","index.js"],"names":["SubMenu","props","useState","collapsed","setCollapsed","icon","title","items","NavItem","onClick","className","classNames","NavLink","Collapse","isOpen","navbar","map","item","index","key","tag","Link","to","target","api","axios","create","baseURL","interceptors","request","use","headers","localStorage","getItem","error","this","authenticated","data","callBack","elseCallBack","post","then","response","status","setItem","access_token","catch","err","console","log","submenus","withRouter","color","toggle","style","faTimesCircle","faHospitalAlt","Nav","cursor","vertical","history","push","faHome","faUsers","faUserMd","auth","logout","window","location","reload","faPowerOff","connect","store","pageTitle","pageReducer","Navbar","light","expand","Button","faBars","ProtectedRoute","Component","component","rest","render","isAuthenticated","pathname","state","from","setPageTitle","type","payload","fetchPatients","page","fetchFiles","fetchFilesByPatient","patient","patients","patientsReducer","appointments","appointmentsReducer","todaysAppointments","madeAppointments","files","filesReducer","dispatch","actions","fetchTodaysAppointments","fetchMadeAppointments","useEffect","Row","Col","md","paginationData","total","faUser","faClipboardList","length","faBook","marginTop","size","offset","Table","responsive","appointment","name","time","abstract","height","width","phoneMask","value","replace","get","id","delete","body","cpf","setCpf","cep","setCep","foreign","setForeign","emergencyContact","setEmergencyContact","setValue","phone","setPhone","mobilephone","setMobilephone","isCepValid","setIsCepValid","dateColor","setDateColor","address","user","role_id","gender_id","setBody","handleVerifyPasswords","password","password_confirmation","handleDateChange","e","handleChangeBody","handleChangePhone","handleChangeUser","val","currencyMask","handleChangeAddress","handlePlusInformationChange","plusInformation","handleVerifyDate","date","Date","birthday","age","getFullYear","handleFormSubmit","a","preventDefault","Swal","fire","patientsService","confirmButtonColor","message","text","autoComplete","onSubmit","htmlFor","onChange","placeholder","required","cpfMask","maxLength","marginBottom","onKeyDown","defaultChecked","checked","res","erro","document","querySelector","logradouro","bairro","uf","localidade","city","street","neighborhood","disabled","min","fetchPatientAppointments","patientId","fetchPatientFiles","patientInfo","modal","setModal","nestedModal","setNestedModal","nestedFilesModal","setNestedFilesModal","closeAll","setCloseAll","toggleNested","toggleFilesNested","border","faClipboard","Modal","ModalHeader","ModalBody","rg","onClosed","undefined","striped","ModalFooter","file","created_at","split","href","path","faEye","filterPatients","deletePatient","handlePaginationClick","textAlign","faEdit","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","faTrash","Pagination","aria-label","PaginationItem","PaginationLink","first","previous","current_page","Array","last_page","fill","el","i","next","last","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","setSelectedFiles","useDropzone","acceptedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","faUpload","storeAppointment","updateAppointment","uploadFiles","patient_id","requestBody","setRequestBody","checkSuccess","handleRequestBody","success","FormData","selectedFiles","forEach","append","handleStoreAppointment","link","notes","cronogram","todo_list","isLoading","fetchAppointments","deleteAppointment","currentAppointment","filter","handleEdit","faCalendar","faClock","loader","fetchAllPatients","Container","fluid","exact","Home","StorePatients","Patients","Appointments","ListAppointments","Files","Login","email","setEmail","setPassword","incorrectMessage","setIncorrectMessage","setLoader","login","setOpen","Content","Boolean","hostname","match","initState","action","filteredPatients","toLocaleLowerCase","includes","remainingPatients","jsonResponse","errorMessage","remainingAppointments","initFiles","combineReducers","fetchAll","find","call","put","appointmentsService","upload","fetchByPatient","filesService","watchSagas","all","takeEvery","patientsSagas","appointmentsSagas","filesSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4af789e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport  { Collapse, NavItem, NavLink } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classNames from 'classnames'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SubMenu = props => {\r\n  \r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const toggleNavbar = () => setCollapsed(!collapsed)\r\n  const { icon, title, items } = props\r\n \r\n  return (\r\n    <div>\r\n      <NavItem onClick={toggleNavbar} className={classNames({'menu-open': !collapsed})}>\r\n        <NavLink className=\"dropdown-toggle\">\r\n          <FontAwesomeIcon icon={icon} className=\"mr-2\"/>{title}\r\n        </NavLink>\r\n      </NavItem>\r\n      <Collapse isOpen={!collapsed} navbar className={classNames('items-menu',{'mb-1': !collapsed})}>\r\n        {items.map((item, index) => (\r\n            <NavItem key={index} className=\"pl-4\">\r\n              <NavLink tag={Link} to={item.target}>\r\n                {item.title}\r\n              </NavLink>\r\n            </NavItem>\r\n            ))}\r\n      </Collapse>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubMenu","import axios from 'axios'\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'http://127.0.0.1:8000/api' \r\n\r\n})\r\n\r\napi.interceptors.request.use(\r\n    request => {\r\n        request.headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'Authorization': \"Bearer \" + localStorage.getItem('access_token'),\r\n        }\r\n      return request\r\n    },\r\n    error => error\r\n)\r\n\r\nexport default api\r\n","import api from './services/api'\r\n\r\nclass Auth{\r\n    constructor(props){\r\n        this.authenticated = false\r\n    }\r\n\r\n    login(data, callBack, elseCallBack){\r\n\r\n        api.post('/auth/login', data)\r\n            .then(response => {\r\n                if(response.status === 200){\r\n                    localStorage.setItem(\"access_token\", response.data.access_token)\r\n                    this.authenticated = true\r\n                    \r\n                    callBack()\r\n                }\r\n                else{\r\n                    this.authenticated = false\r\n                    elseCallBack()\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.authenticated = false\r\n                elseCallBack()\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n    logout(callBack){\r\n        this.authenticated = false\r\n        callBack()\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated\r\n    }\r\n}\r\n\r\nexport default new Auth()","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { \r\n\tfaHome, \r\n\tfaPowerOff, \r\n\tfaHospitalAlt, \r\n\tfaUserMd, \r\n\tfaUsers, \r\n\tfaTimesCircle \r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport SubMenu from './SubMenu'\r\nimport { NavItem, NavLink, Nav } from 'reactstrap'\r\nimport classNames from 'classnames'\r\nimport auth from '../../auth'\r\nimport \"./style.scss\"\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst SideBar = props => {\r\n\treturn (\r\n\t\t<div className={classNames('sidebar', {'is-open': props.isOpen})}>\r\n\t\t\t<div className=\"sidebar-header\">\r\n\t\t\t\t<span \r\n\t\t\t\t\tcolor=\"info\" \r\n\t\t\t\t\tonClick={props.toggle} \r\n\t\t\t\t\tstyle={{color: '#fff'}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faTimesCircle} />\r\n\t\t\t\t</span>\r\n\t\t\t\t<h3 className=\"sidebar-title\">\r\n\t\t\t\t\t<FontAwesomeIcon icon={faHospitalAlt} /> \r\n\t\t\t\t\tConsultas\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"side-menu\">\r\n\t\t\t\t<Nav \r\n\t\t\t\t\tstyle={{cursor: 'pointer'}} \r\n\t\t\t\t\tvertical \r\n\t\t\t\t\tclassName=\"list-unstyled pb-3\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<p>Bem vindo Usuário</p>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink onClick={() => props.history.push(\"/\")}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faHome} className=\"mr-2\"/>Home\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t<SubMenu \r\n\t\t\t\t\t\ttitle=\"Pacientes\" \r\n\t\t\t\t\t\ticon={faUsers}\r\n\t\t\t\t\t\titems={submenus[0]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SubMenu \r\n\t\t\t\t\t\ttitle=\"Atendimentos\" \r\n\t\t\t\t\t\ticon={faUserMd} \r\n\t\t\t\t\t\titems={submenus[1]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink onClick={() => auth.logout(() => window.location.reload(false))}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPowerOff} className=\"mr-2\"/>Sair\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t</Nav>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst submenus = [\r\n[\r\n\t{\r\n\ttitle: \"Cadastrar pacientes\",\r\n\ttarget: \"cadastrar-pacientes\"\r\n\t},\r\n\t{\r\n\ttitle: \"Gerenciar pacientes\",\r\n\ttarget: \"pacientes\",\t\t\t\t\r\n\t}\r\n],\r\n[\r\n\t{\r\n\ttitle: \"Novo\",\r\n\ttarget: \"cadastrar-atendimento\",\t\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Atendimentos\",\r\n\ttarget: \"atendimentos\",\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Material de Apoio\",\r\n\ttarget: \"material-apoio\",\t\t\t\t\r\n\t}\r\n]\r\n]\r\n\t\r\n\r\nexport default withRouter(SideBar)","import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { Navbar, Button, NavbarToggler, Collapse, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport './style.scss'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NavBar = props => {\r\n  return (\r\n    <Navbar \r\n      color=\"light\" \r\n      light \r\n      className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\" \r\n      expand=\"md\"\r\n    >\r\n      <Button color=\"info\" onClick={props.toggle}>\r\n        <FontAwesomeIcon icon={faBars}/>\r\n      </Button>\r\n\r\n      <Nav className=\"m-auto\" navbar>\r\n        <NavItem>\r\n          <div className=\"page-title\">\r\n            <h1 className=\"title\">\r\n              {props.pageTitle}\r\n            </h1>\r\n          </div>\r\n        </NavItem>\r\n      </Nav>\r\n\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return{\r\n    pageTitle: store.pageReducer.pageTitle\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavBar)","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return(\r\n        <Route {...rest} render={\r\n            (props) => {\r\n                if(auth.isAuthenticated()){\r\n                    return <Component {...props} />\r\n                }else{\r\n                    return <Redirect to={\r\n                        {\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                from: props.location\r\n                            }\r\n                        }\r\n                    } />\r\n                }\r\n            }\r\n        }/>\r\n    )\r\n}","export const setPageTitle = title => ({\r\n    type: 'SET_PAGE_TITLE',\r\n    payload: title\r\n})","export const filterPatients = patient => ({\r\n    type: \"FILTER_PATIENTS\",\r\n    payload: patient\r\n})\r\n\r\nexport const fetchPatients = page => ({\r\n    type: \"FETCH_PATIENTS_SAGA\",\r\n    payload: page\r\n})\r\n\r\nexport const fetchAllPatients = () => ({\r\n    type: \"FETCH_ALL_PATIENTS_SAGA\"\r\n})\r\n\r\nexport const fetchPatientInfo = id => ({\r\n    type: \"FETCH_PATIENT_INFO_SAGA\",\r\n    payload: id\r\n})\r\n\r\nexport const fetchPatientAppointments = id => ({\r\n    type: \"FETCH_PATIENT_APPOINTMENTS_SAGA\",\r\n    payload: id\r\n})\r\n\r\nexport const deletePatient = id => ({\r\n    type: \"DELETE_PATIENT_SAGA\",\r\n    payload: id\r\n})","export const setSelectedFiles = selectedFiles => ({\r\n    type: \"SET_SELECTED_FILES\",\r\n    payload: selectedFiles\r\n})\r\n\r\nexport const uploadFiles = (files, patient) => ({\r\n    type: \"UPLOAD_FILES\",\r\n    payload: {\r\n        files: files,\r\n        patient: patient\r\n    }\r\n})\r\n\r\nexport const fetchFiles = page => ({\r\n    type: \"FETCH_FILES\",\r\n    payload: page\r\n})\r\n\r\nexport const fetchFilesByPatient = patient => ({\r\n    type: \"FETCH_FILES_BY_PATIENT\",\r\n    payload: patient\r\n})","import { faUser, faBook, faClipboardList } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Col, Row, Table } from \"reactstrap\";\r\nimport * as actions from \"../../store/actions\"\r\nimport { connect } from \"react-redux\"\r\nimport \"./style.scss\"\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst Home = props => {\r\n\r\n    useEffect(() => {\r\n        props.fetchPatients()\r\n        props.fetchMadeAppointments()\r\n        props.fetchFiles()\r\n        props.fetchTodaysAppointments()\r\n    },[])\r\n\r\n    return(\r\n        <>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <div className=\"box padding\">\r\n                        <div className=\"flex\">\r\n                            <h1 className={props.patients?.paginationData?.total ? \"box-num animate\" : \"box-num\"}>\r\n                                {props.patients?.paginationData?.total}\r\n                            </h1>\r\n                            <h1 className=\"box-icon\"><FontAwesomeIcon icon={faUser} /></h1>\r\n                        </div>\r\n                        <h4 className=\"box-info\">Pacientes cadastrados</h4>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <div className=\"box padding\">\r\n                        <div className=\"flex\">\r\n                            <h1 className={props.madeAppointments > 0 ? \"box-num animate\" : \"box-num\"}>\r\n                                {props.madeAppointments}\r\n                            </h1>\r\n                            <h1 className=\"box-icon\"><FontAwesomeIcon icon={faClipboardList} /></h1>\r\n                        </div>\r\n                        <h4 className=\"box-info\">Atendimentos realizados</h4>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <div className=\"box padding\">\r\n                        <div className=\"flex\">\r\n                            <h1 className={props.files ? \"box-num animate\" : \"box-num\"}>\r\n                                {props.files?.length > 0 ? props.files.length : '0'}\r\n                            </h1>\r\n                            <h1 className=\"box-icon\"><FontAwesomeIcon icon={faBook} /></h1>\r\n                        </div>\r\n                        <h4 className=\"box-info\">Materiais de apoio</h4>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row style={{marginTop:'64px'}}>\r\n                <Col size={{md: '8', offset: '2'}}>\r\n                    <div className=\"box\">\r\n                        <h3 className=\"box-info\">Atendimentos do dia</h3>\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Paciente:</th>\r\n                                    <th>Horário:</th>\r\n                                    <th>Resumo:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    props.appointments?.map(appointment => (\r\n                                        <tr>\r\n                                            <td>{appointment.patient?.name}</td>\r\n                                            <td>{appointment.time}</td>\r\n                                            <td>{appointment.abstract}</td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                                {\r\n                                    !props.appointments ? \r\n                                        <Loader \r\n                                            className=\"loader\" \r\n                                            type=\"TailSpin\" \r\n                                            color=\"#17A2B8\" \r\n                                            height={100} \r\n                                            width={100} \r\n                                        />\r\n                                    : false\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer,\r\n        appointments: store.appointmentsReducer.todaysAppointments,\r\n        madeAppointments: store.appointmentsReducer.madeAppointments,\r\n        files: store.filesReducer.files\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchPatients: () => dispatch(actions.fetchPatients(1)),\r\n    fetchTodaysAppointments: () => dispatch(actions.fetchTodaysAppointments()),\r\n    fetchFiles: () => dispatch(actions.fetchFiles(1)),\r\n    fetchMadeAppointments: () => dispatch(actions.fetchMadeAppointments())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","export const storeAppointments = data => ({\r\n    type: \"STORE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const updateAppointments = data => ({\r\n    type: \"UPDATE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const fetchTodaysAppointments = () => ({\r\n    type: \"FETCH_TODAYS_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const fetchMadeAppointments = () => ({\r\n    type: \"FETCH_MADE_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const fetchAllAppointments = () => ({\r\n    type: \"FETCH_ALL_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: \"DELETE_APPOINTMENT_SAGA\",\r\n    payload: id\r\n})","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') \r\n}\r\n\r\nexport const phoneMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '')\r\n        .replace(/(\\d{0})(\\d)/, '$1($2') \r\n        .replace(/(\\d{2})(\\d)/, '$1) $2')\r\n}\r\n\r\nexport const currencyMask = val => {\r\n    let value = val\r\n        .replace(/\\D/g, '')\r\n        .replace(/^0+/g, '')\r\n\r\n    if(value.length === 1){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{1})$/g, \"0,0$1\")\r\n    }\r\n    else if(value.length === 2){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \"0,$1\")\r\n    }\r\n    else{\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \",$1\")\r\n    }\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/patients?page=-1')\r\nconst fetch = page => api.get(`/patients?page=${page}`)\r\nconst find = id => api.get(`/patients/${id}`)\r\nconst store = body => api.post('/patients', body)\r\nconst deletePatient = id => api.delete(`/patients/${id}`)\r\nconst fetchAppointments = patient => api.get(`/appointments/patient/${patient}`)\r\n\r\nexport default { \r\n    fetchAll,\r\n    fetch,\r\n    find,\r\n    fetchAppointments,\r\n    deletePatient,\r\n    store\r\n}","import React, { useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport { cpfMask, phoneMask, currencyMask } from '../Mask/index'\r\nimport patientsService from \"../../services/patientsService\"\r\nimport Swal from \"sweetalert2\"\r\nimport axios from \"axios\"\r\n\r\nconst StorePatients = props => {\r\n\r\n    const [cpf, setCpf] = useState(\"\")\r\n    const [cep, setCep] = useState(\"\")\r\n    const [foreign, setForeign] = useState(false)\r\n    const [emergencyContact, setEmergencyContact] = useState(\"\")\r\n    const [value, setValue] = useState(\"R$ 0,00\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [mobilephone, setMobilephone] = useState(\"\")\r\n    const [isCepValid, setIsCepValid] = useState(false)\r\n    const [dateColor, setDateColor] = useState(\"form-control input nascimento\")\r\n    const [body, setBody] = useState({address: {state: \"AC\"}, user: {role_id: 1, gender_id: 1}})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Cadastrar Paciente\")\r\n    })\r\n\r\n    const handleCpf = e => {\r\n        setCpf(cpfMask(e.target.value))\r\n\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleVerifyPasswords = () => {\r\n        return body.user.password === body.user.password_confirmation\r\n    }\r\n\r\n    const handleChangeCep = e => {\r\n        let cep = e.target.value.replace(/[^0-9]/g, '')\r\n        setCep(cep)\r\n\r\n        if (cep.length === 8)\r\n            axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n                .then(res => {\r\n                    if (!res.data.erro) {\r\n                        setIsCepValid(true)\r\n                        document.querySelector(\"#street\").value = res.data.logradouro\r\n                        document.querySelector(\"#neighborhood\").value = res.data.bairro\r\n                        document.querySelector(\"#state\").value = res.data.uf\r\n                        document.querySelector(\"#city\").value = res.data.localidade\r\n                        setBody({\r\n                            ...body,\r\n                            address: {\r\n                                ...body.address,\r\n                                city: res.data.localidade,\r\n                                cep: cep,\r\n                                street: res.data.logradouro,\r\n                                state: res.data.uf,\r\n                                neighborhood: res.data.bairro\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        setIsCepValid(false)\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"Um erro ocorreu ao buscar o CEP: \", err))\r\n        else\r\n            setBody({\r\n                ...body,\r\n                address: {\r\n                    ...body.address,\r\n                    cep: cep\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleDateChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n\r\n        setDateColor(\"form-control input\")\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangePhone = e => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n\r\n        if (!foreign) {\r\n            value = value.replace(/[^0-9]/g, '')\r\n\r\n            if (name == \"telephone\")\r\n                setPhone(phoneMask(value))\r\n            else\r\n                setMobilephone(phoneMask(value))\r\n        } else {\r\n            if (name == \"telephone\")\r\n                setPhone(value)\r\n            else\r\n                setMobilephone(value)\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeUser = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (name == \"value\") {\r\n            setValue(currencyMask(value))\r\n            value = value.replace(/[^0-9]/g, '')\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            user: {\r\n                ...body.user,\r\n                name: body.name,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeAddress = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            address: {\r\n                ...body.address,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePlusInformationChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (!foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(phoneMask(value))\r\n        if (foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(value)\r\n\r\n        setBody({\r\n            ...body,\r\n            plusInformation: {\r\n                ...body.plusInformation,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleVerifyDate = () => {\r\n        let date = new Date()\r\n        let birthday = new Date(body.birthday)\r\n        let age = date.getFullYear() - birthday.getFullYear()\r\n        return !(age > 130 || age < 0)\r\n    }\r\n\r\n    const handleFormSubmit = async e => {\r\n        e.preventDefault()\r\n        if(value === \"R$ 0,00\")\r\n            return Swal.fire(\"Por favor informe o valor da consulta.\")\r\n        if (handleVerifyPasswords() && handleVerifyDate()) {\r\n            await setBody({\r\n                ...body,\r\n                foreign: foreign\r\n            })\r\n            await patientsService.store(body)\r\n                .then(() => {\r\n                    Swal.fire({\r\n                        title: \"Paciente cadastrado com sucesso!\",\r\n                        icon: \"success\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    if(e.message == \"Request failed with status code 422\"){\r\n                        return Swal.fire({\r\n                            title: \"Email já cadastrado.\",\r\n                            text: \"Por favor tente com um endereço de email diferente.\",\r\n                            icon: \"warning\",\r\n                            confirmButtonColor: \"#1492A5\"\r\n                        })\r\n                    }\r\n                    Swal.fire({\r\n                        title: \"Ocorreu um erro.\",\r\n                        text: \"Por favor tente novamente mais tarde.\",\r\n                        icon: \"warning\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n        } else {\r\n            if (!handleVerifyPasswords())\r\n                return Swal.fire(\"As senhas divergem.\")\r\n            if (!handleVerifyDate())\r\n                return Swal.fire(\"Por favor informe uma data de nascimento válida.\")\r\n        }\r\n    }\r\n\r\n    const handleForeignChange = () => {\r\n        setPhone(\"\")\r\n        setMobilephone(\"\")\r\n        setEmergencyContact(\"\")\r\n\r\n        if (!foreign)\r\n            setForeign(true)\r\n        else\r\n            setForeign(false)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"new-password\" onSubmit={handleFormSubmit}>\r\n            <Row>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados do paciente\r\n                        </h1>\r\n                        <Row>\r\n                            <Col md={8}>\r\n                                <label htmlFor=\"name\">Nome: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"telephone\">Telefone Fixo: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"telephone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={phone}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"phone\">Celular: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"phone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={mobilephone}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"cpf\">CPF: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cpf\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleCpf}\r\n                                    maxLength=\"14\"\r\n                                    placeholder=\"___.___.___-__\"\r\n                                    value={cpf}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"rg\">RG: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"rg\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"birthday\">Data de Nascimento: </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    name=\"birthday\"\r\n                                    className={dateColor}\r\n                                    placeholder=\"Data de Nascimento\"\r\n                                    onChange={handleDateChange}\r\n                                    onKeyDown={handleDateChange}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Sexo\r\n                            <div className=\"genders\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Masculino\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                        />\r\n                                    Feminino\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <input\r\n                                    className=\"foreignCheckbox\"\r\n                                    name=\"foreign\"\r\n                                    type=\"checkbox\"\r\n                                    checked={foreign}\r\n                                    onChange={handleForeignChange}\r\n                                />\r\n                                <span className=\"foreignLabel\">\r\n                                    Estrangeiro?\r\n                                </span>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Endereço\r\n                    </h1>\r\n                        {foreign ? <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"country\">País:</label>\r\n                                <input\r\n                                    name=\"country\"\r\n                                    onChange={handleChangeAddress}\r\n                                    className=\"form-control input\"\r\n                                    text=\"text\"\r\n                                    id=\"country\"\r\n                                />\r\n                            </Col>\r\n                        </Row> : ''}\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cep\">CEP: </label>\r\n                                {foreign ? \r\n                                <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeAddress}\r\n                                    type=\"text\"\r\n                                    name=\"foreign_cep\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Formato internacional\"\r\n                                />\r\n                                : <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeCep}\r\n                                    type=\"text\"\r\n                                    name=\"cep\"\r\n                                    className=\"form-control input\"\r\n                                    value={cep}\r\n                                />} \r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"street\">Logradouro: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"street\"\r\n                                    type=\"text\"\r\n                                    name=\"street\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Rua, AV, etc...\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"complement\">Complemento: </label>\r\n                                <input\r\n                                    id=\"complement\"\r\n                                    type=\"text\"\r\n                                    name=\"complement\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleChangeAddress}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"neighborhood\">Bairro: </label>\r\n                                <input\r\n                                    id=\"neighborhood\"\r\n                                    type=\"text\"\r\n                                    name=\"neighborhood\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                    onChange={handleChangeAddress}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={3}>\r\n                                <label htmlFor=\"numero\">Número: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"number\"\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    name=\"number\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={3}>\r\n                                {\r\n                                    foreign ? (\r\n                                        <>\r\n                                            <label htmlFor=\"state\">Estado: </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"state\"\r\n                                                id=\"state\"\r\n                                                className=\"form-control input\"\r\n                                                disabled={isCepValid}\r\n                                                onChange={handleChangeAddress}\r\n                                            />\r\n                                        </>\r\n                                    )\r\n                                        : (\r\n                                            <>\r\n                                                <label htmlFor=\"state\">UF: </label>\r\n                                                <select\r\n                                                    name=\"state\"\r\n                                                    id=\"state\"\r\n                                                    className=\"form-control input\"\r\n                                                    disabled={isCepValid}\r\n                                                    onChange={handleChangeAddress}\r\n                                                >\r\n                                                    <option value=\"AC\">AC</option>\r\n                                                    <option value=\"AL\">AL</option>\r\n                                                    <option value=\"AP\">AP</option>\r\n                                                    <option value=\"AM\">AM</option>\r\n                                                    <option value=\"BA\">BA</option>\r\n                                                    <option value=\"CE\">CE</option>\r\n                                                    <option value=\"DF\">DF</option>\r\n                                                    <option value=\"ES\">ES</option>\r\n                                                    <option value=\"GO\">GO</option>\r\n                                                    <option value=\"MA\">MA</option>\r\n                                                    <option value=\"MT\">MT</option>\r\n                                                    <option value=\"MS\">MS</option>\r\n                                                    <option value=\"MG\">MG</option>\r\n                                                    <option value=\"PA\">PA</option>\r\n                                                    <option value=\"PB\">PB</option>\r\n                                                    <option value=\"PR\">PR</option>\r\n                                                    <option value=\"PE\">PE</option>\r\n                                                    <option value=\"PI\">PI</option>\r\n                                                    <option value=\"RJ\">RJ</option>\r\n                                                    <option value=\"RN\">RN</option>\r\n                                                    <option value=\"RS\">RS</option>\r\n                                                    <option value=\"RO\">RO</option>\r\n                                                    <option value=\"RR\">RR</option>\r\n                                                    <option value=\"SC\">SC</option>\r\n                                                    <option value=\"SP\">SP</option>\r\n                                                    <option value=\"SE\">SE</option>\r\n                                                    <option value=\"TO\">TO</option>\r\n                                                </select>\r\n                                            </>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"city\">Municipio: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeAddress}\r\n                                    name=\"city\"\r\n                                    id=\"city\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Informações adicionais\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_contact\">Contato de Emergência: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_contact\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={emergencyContact}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_name\">Nome: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_name\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"observation\">Observação: </label>\r\n                                <textarea\r\n                                    className=\"form-control input\"\r\n                                    name=\"observation\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                >\r\n                                </textarea>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Valor da Sessão\r\n                    </h1>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"value\">Valor: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeUser}\r\n                                    className=\"form-control input\"\r\n                                    name=\"value\"\r\n                                    value={value}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Deseja recibo?\r\n                            <div className=\"receipt\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados de Acesso ao Sistema\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"email\">Email: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"email\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password\">Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password_confirmation\">Repetir Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password_confirmation\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"role_id\">Hierarquia: </label>\r\n                                <select \r\n                                    className=\"form-control input\" \r\n                                    name=\"role\"\r\n                                >\r\n                                    <option value=\"1\">Admin</option>\r\n                                    <option value=\"1\">Médico</option>\r\n                                    <option value=\"2\">Paciente</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                Cadastro ativo?\r\n                            <div className=\"active\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: '100px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">Salvar dados</h1>\r\n                        <Button type=\"submit\">Salvar</Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StorePatients)","import { faClipboard, faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useState } from 'react'\r\nimport * as actions from '../../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst ModalExample = (props) => {\r\n\tconst { patientInfo, className } = props\r\n\r\n\tconst [modal, setModal] = useState(false)\r\n\tconst [nestedModal, setNestedModal] = useState(false)\r\n\tconst [nestedFilesModal, setNestedFilesModal] = useState(false)\r\n\tconst [closeAll, setCloseAll] = useState(false)\r\n\r\n\tconst toggle = () => setModal(!modal)\r\n\r\n\tconst toggleNested = () => {\r\n\t\tprops.fetchPatientAppointments(patientInfo.id)\r\n\t\tsetNestedModal(!nestedModal)\r\n\t\tsetCloseAll(false)\r\n\t}\r\n\r\n\tconst toggleFilesNested = () => {\r\n\t\tprops.fetchPatientFiles(patientInfo.id)\r\n\t\tsetNestedFilesModal(!nestedFilesModal)\r\n\t\tsetCloseAll(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button className=\"edit-button\" style={{border: '#17a2b8'}} onClick={toggle}>\r\n\t\t\t\t<FontAwesomeIcon icon={faClipboard} /></Button>\r\n\t\t\t<Modal isOpen={modal} toggle={toggle} className={className}>\r\n\t\t\t\t<ModalHeader toggle={toggle}>\r\n\t\t\t\t\t<h4 className=\"patient-record-title\">\r\n\t\t\t\t\t\tFICHA DO PACIENTE <FontAwesomeIcon icon={faClipboard} />\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</ModalHeader>\r\n\t\t\t\t<ModalBody>\r\n\t\t\t\t<b>Nome:</b> {patientInfo?.name} <br />\r\n\t\t\t\t<b>Data de Nascimento:</b> {patientInfo?.birthday} <br />\r\n\t\t\t\t<b>Telefone:</b> {patientInfo?.phone} <br />\r\n\t\t\t\t<b>CPF:</b> {patientInfo?.cpf} <br />\r\n\t\t\t\t<b>RG:</b> {patientInfo?.rg} <br />\r\n\r\n\t\t\t\t\t<Modal isOpen={nestedModal} toggle={toggleNested} onClosed={closeAll ? toggle : undefined}>\r\n\t\t\t\t\t\t<ModalHeader>Atendimentos do Paciente</ModalHeader>\r\n\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.patient.appointments ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Table responsive striped>\r\n\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Data: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Hora: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Resumo: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t{props.patient.appointments?.map(appointment => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.date}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.time}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.abstract}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t<Loader \r\n\t\t\t\t\t\t\t\t\tclassName=\"loader\" \r\n\t\t\t\t\t\t\t\t\ttype=\"TailSpin\" \r\n\t\t\t\t\t\t\t\t\tcolor=\"#17A2B8\" \r\n\t\t\t\t\t\t\t\t\theight={100} \r\n\t\t\t\t\t\t\t\t\twidth={100} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleNested}>Fechar</Button>\r\n\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t</Modal>\r\n\r\n\t\t\t\t\t<Modal isOpen={nestedFilesModal} toggle={toggleFilesNested} onClosed={closeAll ? toggle : undefined}>\r\n\t\t\t\t\t\t<ModalHeader>Arquivos do Paciente</ModalHeader>\r\n\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.files ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Table responsive striped>\r\n\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Arquivo: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Data de Upload: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Visualizar: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t{props.files?.files?.map(file => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{file.name}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{file.created_at.split('.')[0].replace(\"T\", \" \")}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={file.path} target=\"_blank\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"color-button shadow-none\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faEye} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t<Loader \r\n\t\t\t\t\t\t\t\t\tclassName=\"loader\" \r\n\t\t\t\t\t\t\t\t\ttype=\"TailSpin\" \r\n\t\t\t\t\t\t\t\t\tcolor=\"#17A2B8\" \r\n\t\t\t\t\t\t\t\t\theight={100} \r\n\t\t\t\t\t\t\t\t\twidth={100} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleFilesNested}>Fechar</Button>\r\n\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t</Modal>\r\n\r\n\t\t\t\t</ModalBody>\r\n\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleFilesNested}>Material de Apoio</Button>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleNested}>Atendimentos</Button>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggle}>Fechar</Button>\r\n\t\t\t\t</ModalFooter>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tpatient: store.patientsReducer,\r\n\t\tfiles: store.filesReducer\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tfetchPatientAppointments: patientId => dispatch(actions.fetchPatientAppointments(patientId)),\r\n\tfetchPatientFiles: patientId => dispatch(actions.fetchFilesByPatient(patientId))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalExample)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash, faUserMd } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col, Table, Pagination, PaginationItem, PaginationLink, Button } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport { Link } from 'react-router-dom'\r\nimport PatientRecordModal from \"./patientRecordModal\"\r\n\r\nconst Patients = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar pacientes\")\r\n        props.fetchPatients(1)\r\n    },[])\r\n\r\n    const handleInput = e => {\r\n        props.filterPatients(e.target.value)\r\n    }\r\n\r\n    const handlePaginationClick = async page => {\r\n        await props.fetchPatients(page)\r\n    }\r\n\r\n    const newAppointment = id => {\r\n        props.history.push({ \r\n            pathname: 'cadastrar-atendimento', \r\n            patient: id\r\n        })\r\n    }\r\n\r\n    const deletePatient = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este paciente?',\r\n            text: 'Todos os registros vinculados ao paciente serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n        .then(res => {\r\n            if(res.value)\r\n                props.deletePatient(id)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"box\">\r\n            <Row>\r\n                <Col md={12}>\r\n                    <label htmlFor=\"search\">Pesquisar:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control input\" \r\n                        placeholder=\"Digite aqui o nome do paciente...\" \r\n                        onChange={handleInput} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <>\r\n                {\r\n                    props.patients.patients ? (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>RG:</th>\r\n                                    <th>Celular:</th>\r\n                                    <th>Ficha:</th>\r\n                                    <th style={{textAlign: 'center'}}>Novo Atendimento:</th>\r\n                                    <th>Editar:</th>\r\n                                    <th>Deletar:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.patients.patients.map((patient, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{patient.name}</td>\r\n                                    <td>{patient.rg}</td>\r\n                                    <td>{patient.phone}</td>\r\n                                    <td><PatientRecordModal patientInfo={patient} /></td>\r\n                                    <td style={{textAlign: 'center'}}>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => newAppointment(patient.id) } \r\n                                            className=\"btn edit-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faUserMd} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Link to=\"/cadastrar-pacientes\">\r\n                                            <button className=\"btn edit-button\">\r\n                                                <FontAwesomeIcon icon={faEdit} />\r\n                                            </button>\r\n                                        </Link>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => deletePatient(patient.id) } \r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                            <Pagination aria-label=\"Page navigation example\">\r\n\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        first \r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.from)} \r\n                                    />\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        previous\r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.current_page - 1)} \r\n                                        disabled={props.patients.paginationData?.current_page == props.patients.paginationData?.from}\r\n                                    />\r\n                                </PaginationItem>\r\n                                \r\n                                {Array(props.patients.paginationData?.last_page).fill(1).map((el, i) =>\r\n                                    <PaginationItem key={i}>\r\n                                        <PaginationLink onClick={() => handlePaginationClick(i + 1)}>\r\n                                        {i + 1}\r\n                                        </PaginationLink>\r\n                                    </PaginationItem>\r\n                                )}\r\n                                \r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        next \r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.current_page + 1)}\r\n                                        disabled={props.patients.paginationData?.current_page == props.patients.paginationData?.last_page}\r\n                                    />\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        last\r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.last_page)} \r\n                                    />\r\n                                </PaginationItem>\r\n\r\n                            </Pagination>\r\n                        </Table>\r\n                    ) : (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                    )\r\n                }\r\n            </>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    filterPatients: patient => dispatch(actions.filterPatients(patient)),\r\n    fetchPatients: page => dispatch(actions.fetchPatients(page)),\r\n    deletePatient: id => dispatch(actions.deletePatient(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patients)","import React, { useMemo, useEffect } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n}\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n}\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n}\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n}\r\n\r\nconst StyledDropzone = props => {\r\n\r\n    const {\r\n        acceptedFiles,\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone()\r\n\r\n    useEffect(() => {\r\n        props.setSelectedFiles(acceptedFiles)\r\n    }, [acceptedFiles])\r\n\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept\r\n    ])\r\n\r\n    const files = acceptedFiles.map(file => (\r\n        <li key={file.path}>\r\n          {file.path} - {file.size} bytes\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <div {...getRootProps({ style })}>\r\n                <input {...getInputProps()} />\r\n                <p>Arraste e solte aqui os arquivos que deseja salvar.</p>\r\n                <FontAwesomeIcon icon={faUpload} />\r\n            </div>\r\n            <h5>Arquivos:</h5>\r\n            <ul>{files}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        files: store.filesReducer,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSelectedFiles: files => dispatch(actions.setSelectedFiles(files)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StyledDropzone)\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Row, Col, Button } from \"reactstrap\"\r\nimport * as actions from \"../../store/actions\"\r\nimport StyledDropzone from \"../Dropzone\"\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Appointments = props => {\r\n\r\n    const [requestBody, setRequestBody] = useState({})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\r\n            props.location.state ?\r\n            \"ATUALIZAR ATENDIMENTO\" :\r\n            \"NOVO ATENDIMENTO \"\r\n        )\r\n        props.fetchPatients()\r\n        checkSuccess()\r\n        if (props.location.state)\r\n            setRequestBody(props.location.state)\r\n        else if (props.location.patient)\r\n            setRequestBody({patient_id: props.location.patient})\r\n    },[props.appointments]) \r\n\r\n    const handleRequestBody = e => {\r\n        setRequestBody({\r\n            ...requestBody,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const checkSuccess = () => {\r\n        if (props.appointments.success) {\r\n            Swal.fire({\r\n                title: \"Sucesso!\",\r\n                text: \"Atendimento cadastrado com sucesso.\",\r\n                icon: \"success\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n            props.appointments.success = false\r\n        }\r\n        if (props.appointments.error) {\r\n            Swal.fire({\r\n                title: \"Ooops!\",\r\n                text: \"Ocorreu um erro, tente novamente mais tarde.\",\r\n                icon: \"warning\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n            props.appointments.error = false\r\n        }\r\n    }\r\n\r\n    const uploadFiles = async () => {\r\n        let files = new FormData()\r\n        await props.files.selectedFiles.forEach(file => {\r\n            files.append('files[]', file)\r\n        })\r\n        if (props.files.selectedFiles.length > 0){\r\n            await props.uploadFiles(files, requestBody.patient_id)\r\n        }\r\n    }\r\n\r\n    const handleStoreAppointment = async e => {\r\n        e.preventDefault()\r\n\r\n        if (props.location.state) {\r\n            await props.updateAppointment(requestBody)\r\n        }\r\n        else {\r\n            await props.storeAppointment(requestBody)\r\n        }\r\n            \r\n        await uploadFiles()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleStoreAppointment} style={{marginBottom: '100px'}}>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"patient_id\">Paciente: </label>\r\n                                <select \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"patient_id\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Buscar...\" \r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                    value={requestBody.patient_id}\r\n                                >\r\n                                    <option>Selecione...</option>\r\n                                    {\r\n                                        props.patients.patients ? \r\n                                        props.patients.patients.map(patient => (\r\n                                            <option key={patient.id} value={patient.id}>\r\n                                                {patient.name}\r\n                                            </option>\r\n                                        )) : (\"\")\r\n                                    }\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"link\">Link: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"link\" \r\n                                    type=\"text\" \r\n                                    className=\"form-control input\" \r\n                                    placeholder=\"http://exemplo.com.br/link\" \r\n                                    required\r\n                                    value={requestBody.link}\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"date\">Data: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"date\" \r\n                                    type=\"date\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                    value={requestBody.date}\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"time\">Hora: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"time\" \r\n                                    type=\"time\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                    value={requestBody.time}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"notes\">Notas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"notes\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.notes}\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cronogram\">Cronograma: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"cronogram\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.cronogram}\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"abstract\">Resumo: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"abstract\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.abstract}\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"todo_list\">Tarefas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"todo_list\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.todo_list}\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={12} className=\"dropzone\">\r\n                                <StyledDropzone />\r\n                            </Col>\r\n                            <Col md={12} style={{textAlign: 'center', marginTop: '32px'}}>\r\n                                <Button\r\n                                    className=\"storeAppointmentButton shadow-none\"\r\n                                    disabled={props.appointments?.isLoading}\r\n                                >\r\n                                    {\r\n                                        props.location.state ?\r\n                                        \"ATUALIZAR ATENDIMENTO\" :\r\n                                        \"CADASTRAR ATENDIMENTO \"\r\n                                    }\r\n                                    {\r\n                                        props.appointments.isLoading ?\r\n                                            <Loader \r\n                                                type=\"TailSpin\" \r\n                                                color=\"#ffffff\"\r\n                                                height={40} \r\n                                                width={40} \r\n                                            />\r\n                                        : \"\"\r\n                                    }\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer,\r\n        appointments: store.appointmentsReducer,\r\n        files: store.filesReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    storeAppointment: data => dispatch(actions.storeAppointments(data)),\r\n    updateAppointment: data => dispatch(actions.updateAppointments(data)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchPatients: () => dispatch(actions.fetchAllPatients()),\r\n    uploadFiles: (files, patient_id) => dispatch(actions.uploadFiles(files, patient_id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Appointments)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faCalendar, faClock, faEdit, faTrash, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst ListAppointments = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar atendimentos\")\r\n        props.fetchAppointments()\r\n    }, [])\r\n\r\n    const deleteAppointment = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este atendimento?',\r\n            text: 'Todos os registros vinculados ao atendimento serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n            .then(res => {\r\n                if (res.value)\r\n                    props.deleteAppointment(id)\r\n            })\r\n    }\r\n\r\n    const handleEdit = id => {\r\n        let currentAppointment = props.appointments.appointments\r\n        .filter(appointment => appointment.id == id)[0]\r\n        props.history.push({ \r\n            pathname: 'cadastrar-atendimento', \r\n            state: currentAppointment\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.appointments.appointments?.length == 0 ?\r\n                <p style={{color: '#666'}}>Nenhum atendimento cadastrado.</p> : \r\n                props.appointments.appointments ? (\r\n                    props.appointments.appointments.map((appointment, index) => (\r\n                        <div \r\n                            key={index} \r\n                            className=\"appointment\" \r\n                            onClick={() => handleEdit(appointment.id)}\r\n                        >\r\n                            <div className=\"appointment-item\">\r\n                                <FontAwesomeIcon className=\"light-icon\" icon={faCalendar} />\r\n                                {appointment.date} \r\n                            </div>\r\n                            <div className=\"appointment-item\">\r\n                                <FontAwesomeIcon className=\"light-icon\" icon={faClock} />\r\n                                {appointment.time} \r\n                            </div>\r\n                            <div className=\"appointment-item\">\r\n                                <FontAwesomeIcon className=\"light-icon\" icon={faUser} />\r\n                                {appointment.patient.name} \r\n                            </div>\r\n                            <div className=\"appointment-item\">\r\n                            </div>\r\n                            <div className=\"appointment-item\">\r\n                                <a\r\n                                    id={appointment.id}\r\n                                    onClick={() => deleteAppointment(appointment.id)}\r\n                                    className=\"delete-button\"\r\n                                >\r\n                                    <FontAwesomeIcon icon={faTrash} />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAppointments: () => dispatch(actions.fetchAllAppointments()),\r\n    deleteAppointment: id => dispatch(actions.deleteAppointment(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        appointments: store.appointmentsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListAppointments)","import React, { useEffect } from \"react\"\r\nimport \"./style.scss\"\r\nimport { Col, Row, Table } from \"reactstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport * as actions from \"../../store/actions\"\r\nimport Loader from 'react-loader-spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Files = props => {\r\n\r\n    useEffect(() => {\r\n        props.fetchFiles(1)\r\n        props.setPageTitle(\"Material de Apoio\")\r\n        props.fetchAllPatients()\r\n    },[])\r\n\r\n    const handlePatientChange = e => {\r\n        if (e.target.value != \"Selecione um paciente\")\r\n            props.fetchFilesByPatient(e.target.value)\r\n    }\r\n\r\n    return(\r\n            <Row>\r\n                <Col md={4}>\r\n                    <div className=\"box\">\r\n                        <label htmlFor=\"selected-patient\">Paciente: </label>\r\n                        <select className=\"selected-patient\" onChange={handlePatientChange}>\r\n                            <option>Selecione um paciente</option>\r\n                            {\r\n                                props.patients?.map(patient => (\r\n                                    <option value={patient.id}>{patient.name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </Col>\r\n                <Col md={8}>\r\n                    <div className=\"box\">\r\n                    {\r\n                        props.loader ?\r\n                        (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                        ) :\r\n                        (\r\n                        props.files?.length == 0 ? \r\n                        <p style={{color: '#666'}}>Nenhum material de apoio cadastrado.</p> :\r\n                        <Table responsive striped>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Arquivo: </th>\r\n                                    <th>Upload: </th>\r\n                                    <th>Visualizar: </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    props.files?.map(file => (\r\n                                        <tr>\r\n                                            <td>{file.name}</td>\r\n                                            <td>{file.created_at.split('.')[0].replace(\"T\", \" \")}</td>\r\n                                            <td style={{textAlign: 'center'}}>\r\n                                                <a target=\"_blank\" href={file.path}>\r\n                                                    <button className=\"btn edit-button\">\r\n                                                        <FontAwesomeIcon icon={faEye} />\r\n                                                    </button>\r\n                                                </a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </Table>  \r\n                        )\r\n                    }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        files: store.filesReducer.files,\r\n        loader: store.filesReducer.loader,\r\n        patients: store.patientsReducer.patients\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchFiles: page => dispatch(actions.fetchFiles(page)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAllPatients: () => dispatch(actions.fetchAllPatients()),\r\n    fetchFilesByPatient: patient => dispatch(actions.fetchFilesByPatient(patient))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Files)","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Container } from 'reactstrap'\r\nimport NavBar from './Navbar'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ProtectedRoute } from '../../protected.route'\r\n\r\nimport Home from '../Home'\r\nimport StorePatients from '../Patients/storePatient'\r\nimport Patients from '../Patients/patients'\r\nimport Appointments from '../Appointments/index'\r\nimport ListAppointments from '../Appointments/listAppointments'\r\nimport Files from '../Files/index'\r\n\r\nexport default props => (\r\n    <Container fluid className={classNames('content', {'is-open': props.isOpen})}>\r\n\t\t<NavBar toggle={props.toggle}/>\r\n\t\t<Switch>\r\n\t\t\t<ProtectedRoute exact path=\"/\" component={Home} />\r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-pacientes\" component={StorePatients} />\r\n\t\t\t<ProtectedRoute exact path=\"/pacientes\" component={Patients} />          \r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-atendimento\" component={Appointments} />          \r\n\t\t\t<ProtectedRoute exact path=\"/atendimentos\" component={ListAppointments} />\r\n\t\t\t<ProtectedRoute exact path=\"/material-apoio\" component={Files} />\r\n\t\t</Switch>\r\n    </Container>\r\n)","import React, { useState } from 'react'\r\nimport auth from '../../auth'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHospitalAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from 'react-loader-spinner'\r\nimport './style.scss'\r\n\r\nconst Login = props => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [incorrectMessage, setIncorrectMessage] = useState(false)\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const handleLogin = e => {\r\n        setLoader(true)\r\n        e.preventDefault()\r\n        \r\n        let data = {email: email, password: password}\r\n\r\n        auth.login(data, \r\n            () => props.history.push(\"/\"), \r\n            () => {\r\n                setIncorrectMessage(true)\r\n                setLoader(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n                <Col className=\"form-background\" md={{size: 6, offset: 3}}>\r\n                    <form onSubmit={handleLogin}>\r\n                        <h2><FontAwesomeIcon icon={faHospitalAlt} /> Acessar</h2>\r\n                        <input onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" name=\"user\" required />\r\n                        <input onChange={e => setPassword(e.target.value)} type=\"password\" className=\"form-control\" name=\"password\" required />\r\n                        { loader ? <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} /> : \"\" }\r\n                        { incorrectMessage ? <p>Usuário ou senha incorretos</p> : \"\" }\r\n                        <Button className=\"login-button\">Acessar</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SideBar from './components/SideBar'\r\nimport Content from './components/Content'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './App.scss'\r\nimport Login from './components/Login'\r\n\r\nexport default () => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n\t\t<Switch>\r\n\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t<div className=\"App wrapper\">\r\n\t\t\t<SideBar toggle={toggle} isOpen={isOpen} />\r\n\t\t\t<Content toggle={toggle} isOpen={isOpen} />\r\n\t\t</div>\r\n\t\t</Switch>\r\n    </Router>\r\n  )\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const initState = {\r\n    pageTitle: \"Gerenciador de consultas\"\r\n}\r\n\r\nconst pageReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case \"SET_PAGE_TITLE\":\r\n            return {\r\n              pageTitle: action.payload  \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pageReducer","const initState = {}\r\n\r\nconst patientsReducer = (state = {}, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case \"FILTER_PATIENTS\":\r\n            let filteredPatients = initState.patients.filter(patient => {\r\n                let name = patient.name.toLocaleLowerCase()\r\n                return name.includes(action.payload.toLocaleLowerCase())\r\n            })\r\n            return {\r\n                ...state,\r\n                patients: filteredPatients\r\n            }\r\n\r\n        case \"SET_PATIENTS\":\r\n            initState.patients = action.payload\r\n            return {\r\n                ...state,\r\n                patients: action.payload\r\n            }\r\n\r\n        case \"SET_PATIENT\":\r\n            return {\r\n                ...state,\r\n                patient: action.payload\r\n            }\r\n\r\n        case \"SET_PATIENT_APPOINTMENTS\":\r\n            return {\r\n                ...state,\r\n                appointments: action.payload\r\n            }\r\n\r\n        case \"SET_PAGINATION_DATA\":\r\n            return {\r\n                ...state,\r\n                paginationData: action.payload\r\n            }\r\n\r\n        case \"DELETE_PATIENT\":\r\n            let remainingPatients = state.patients.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.patients = remainingPatients\r\n            return {\r\n                ...state,\r\n                patients: remainingPatients,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport default patientsReducer","const initState = {\r\n    isLoading: false,\r\n    success: false,\r\n    error: false,\r\n    errorMessage: '',\r\n    madeAppointments: [],\r\n    todaysAppointments: []\r\n}\r\n\r\nconst appointmentsReducer = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"TOGGLE_APPOINTMENTS_LOADER\":\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                success: true,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_FAILURE\":\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                errorMessage: action.payload,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS\":\r\n            initState.appointments = action.payload\r\n            return {\r\n                ...state,\r\n                appointments: action.payload\r\n            }\r\n\r\n        case \"SET_TODAYS_APPOINTMENTS\":\r\n            initState.todaysAppointments = action.payload\r\n            return {\r\n                ...state,\r\n                todaysAppointments: action.payload\r\n            }\r\n\r\n        case \"SET_MADE_APPOINTMENTS\":\r\n            initState.madeAppointments = action.payload\r\n            return {\r\n                ...state,\r\n                madeAppointments: action.payload\r\n            }\r\n\r\n        case \"DELETE_APPOINTMENT\":\r\n            let remainingAppointments = state.appointments.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.appointments = remainingAppointments\r\n            return {\r\n                ...state,\r\n                appointments: remainingAppointments,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default appointmentsReducer","const initFiles = {\r\n    loader: true\r\n}\r\n\r\nconst filesReducer = (state = initFiles, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"SET_SELECTED_FILES\":\r\n            return {\r\n                ...state,\r\n                selectedFiles: action.payload\r\n            }\r\n\r\n        case \"SET_LOADER\": \r\n            return {\r\n                ...state,\r\n                loader: true\r\n            }\r\n\r\n        case \"SET_FILES\":\r\n            return {\r\n                ...state,\r\n                files: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default filesReducer","import { combineReducers } from 'redux'\r\nimport pageReducer from './pageReducer'\r\nimport patientsReducer from './patientsReducer'\r\nimport appointmentsReducer from './appointmentsReducer'\r\nimport filesReducer from './filesReducer'\r\n\r\nexport default combineReducers ({\r\n    filesReducer,\r\n    pageReducer,\r\n    patientsReducer,\r\n    appointmentsReducer\r\n})","import { put, call } from 'redux-saga/effects'\r\nimport patientsService from '../../services/patientsService'\r\n\r\nexport function* fetchPatients(action){\r\n    let jsonResponse = yield call(patientsService.fetch, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PAGINATION_DATA\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(patientsService.fetchAll)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchAppointments(action){\r\n    let jsonResponse = yield call(patientsService.fetchAppointments, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENT_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* find(action){\r\n    let jsonResponse = yield call(patientsService.find, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENT\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* deletePatient(action){\r\n    let jsonResponse = yield call(patientsService.deletePatient, action.payload)\r\n    \r\n    yield put({\r\n        type: \"DELETE_PATIENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/appointments')\r\nconst store = body => api.post('/appointments', body)\r\nconst deleteAppointment = id => api.delete(`/appointments/${id}`)\r\nconst update = body => api.put(`/appointments/${body.id}`, body)\r\nconst fetchMade = () => api.get(`/made-appointments`)\r\nconst fetchTodays = () => api.get(`/todays-appointments`)\r\n\r\nexport default {\r\n    fetchAll,\r\n    deleteAppointment,\r\n    store,\r\n    update,\r\n    fetchMade,\r\n    fetchTodays\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport appointmentsService from '../../services/appointmentsService'\r\n\r\nexport function* storeAppointment(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    try {\r\n        let jsonResponse = yield call(appointmentsService.store, action.payload)\r\n\r\n        if (jsonResponse.status === 200) {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_SUCCESS\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n        else {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_FAILURE\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\",\r\n            payload: err\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport function* updateAppointment(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    try {\r\n        let jsonResponse = yield call(appointmentsService.update, action.payload)\r\n\r\n        if (jsonResponse.status === 200) {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_SUCCESS\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n        else {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_FAILURE\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\",\r\n            payload: err\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport function* fetchAll() {\r\n    let jsonResponse = yield call(appointmentsService.fetchAll)\r\n    yield put({\r\n        type: \"SET_APPOINTMENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* fetchMadeAppointments() {\r\n    let jsonResponse = yield call(appointmentsService.fetchMade)\r\n    yield put({\r\n        type: \"SET_MADE_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchTodaysAppointments() {\r\n    let jsonResponse = yield call(appointmentsService.fetchTodays)\r\n    yield put({\r\n        type: \"SET_TODAYS_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* deleteAppointment(action) {\r\n    let jsonResponse = yield call(appointmentsService.deleteAppointment, action.payload)\r\n    yield put({\r\n        type: \"DELETE_APPOINTMENT\",\r\n        payload: { jsonResponse: jsonResponse, id: action.payload }\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/attachements')\r\nconst upload = files => api.post('/attachements/upload', files)\r\nconst deleteFile = id => api.delete(`/attachements/${id}`)\r\nconst fetchByPatient = patient => api.get(`/attachements/patients/${patient}`)\r\n\r\nconst attach = (patient, files) => {\r\n    files.forEach(file => {\r\n        api.post(`attachements/${file.id}/patients/${patient}`)\r\n    })\r\n}\r\n\r\nexport default {\r\n    fetchAll,\r\n    upload,\r\n    deleteFile,\r\n    attach,\r\n    fetchByPatient\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport filesService from '../../services/filesService'\r\n\r\nexport function* upload(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_FILES_LOADER\"\r\n    })\r\n\r\n    let jsonResponse = yield call(filesService.upload, action.payload.files)\r\n    yield call(filesService.attach, action.payload.patient, jsonResponse.data)\r\n\r\n\r\n    if (jsonResponse.status === 200) {\r\n        yield put({ type: \"SET_FILES_SUCCESS\" })\r\n    } \r\n    else {\r\n        yield put({ type: \"SET_FILES_FAILURE\" })\r\n    }\r\n\r\n}\r\n\r\nexport function* fetchFiles() {\r\n\r\n    let jsonResponse = yield call(filesService.fetchAll)\r\n\r\n    yield put({\r\n        type: \"SET_FILES\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n}\r\n\r\nexport function* fetchByPatient(action) {\r\n\r\n    yield put({ type: \"SET_LOADER\" })\r\n\r\n    let jsonResponse = yield call(filesService.fetchByPatient, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_FILES\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n}","import { takeEvery, all } from 'redux-saga/effects'\r\nimport * as patientsSagas from './patients'\r\nimport * as appointmentsSagas from './appointments'\r\nimport * as filesSagas from './files'\r\n\r\nexport function* watchSagas(){\r\n    yield all([\r\n        takeEvery(\"FETCH_PATIENTS_SAGA\", patientsSagas.fetchPatients),\r\n        takeEvery(\"FETCH_ALL_PATIENTS_SAGA\", patientsSagas.fetchAll),\r\n        takeEvery(\"FETCH_PATIENT_INFO\", patientsSagas.find),\r\n        takeEvery(\"DELETE_PATIENT_SAGA\", patientsSagas.deletePatient),\r\n        takeEvery(\"FETCH_PATIENT_APPOINTMENTS_SAGA\", patientsSagas.fetchAppointments),\r\n        takeEvery(\"FETCH_MADE_APPOINTMENTS_SAGA\", appointmentsSagas.fetchMadeAppointments),\r\n        takeEvery(\"FETCH_TODAYS_APPOINTMENTS_SAGA\", appointmentsSagas.fetchTodaysAppointments),\r\n        takeEvery(\"STORE_APPOINTMENTS_SAGA\", appointmentsSagas.storeAppointment),\r\n        takeEvery(\"UPDATE_APPOINTMENTS_SAGA\", appointmentsSagas.updateAppointment),\r\n        takeEvery(\"DELETE_APPOINTMENT_SAGA\", appointmentsSagas.deleteAppointment),\r\n        takeEvery(\"FETCH_ALL_APPOINTMENTS_SAGA\", appointmentsSagas.fetchAll),\r\n        takeEvery(\"UPLOAD_FILES\", filesSagas.upload),\r\n        takeEvery(\"FETCH_FILES\", filesSagas.fetchFiles),\r\n        takeEvery(\"FETCH_FILES_BY_PATIENT\", filesSagas.fetchByPatient)\r\n    ])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { watchSagas } from './store/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(watchSagas)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}