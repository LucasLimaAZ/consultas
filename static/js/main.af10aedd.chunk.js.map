{"version":3,"sources":["components/SideBar/SubMenu.js","services/api.js","auth.js","components/SideBar/index.js","components/Content/Navbar.js","protected.route.js","store/actions/page.js","components/Mask/index.js","services/patientsService.js","components/Patients/storePatient.js","components/Patients/patientRecordModal.js","store/actions/patients.js","components/Patients/patients.js","components/Dropzone/index.js","store/actions/files.js","components/Appointments/index.js","store/actions/appointments.js","components/Appointments/listAppointments.js","components/Files/index.js","components/Content/index.js","components/Login/index.js","App.js","serviceWorker.js","store/reducers/pageReducer.js","store/reducers/patientsReducer.js","store/reducers/appointmentsReducer.js","store/reducers/filesReducer.js","store/reducers/index.js","store/sagas/patients.js","services/appointmentsService.js","store/sagas/appointments.js","services/filesService.js","store/sagas/files.js","store/sagas/index.js","index.js"],"names":["SubMenu","props","useState","collapsed","setCollapsed","icon","title","items","NavItem","onClick","className","classNames","NavLink","Collapse","isOpen","navbar","map","item","index","key","tag","Link","to","target","api","axios","create","baseURL","interceptors","request","use","headers","localStorage","getItem","error","this","authenticated","data","callBack","elseCallBack","post","then","response","status","setItem","access_token","catch","err","console","log","submenus","SideBar","color","toggle","style","faTimesCircle","faHospitalAlt","Nav","cursor","vertical","faHome","faUsers","faUserMd","auth","logout","window","location","reload","faPowerOff","connect","store","pageTitle","pageReducer","Navbar","light","expand","Button","faBars","ProtectedRoute","Component","component","rest","render","isAuthenticated","pathname","state","from","setPageTitle","type","payload","phoneMask","value","replace","get","page","id","patient","delete","body","dispatch","actions","cpf","setCpf","cep","setCep","foreign","setForeign","emergencyContact","setEmergencyContact","setValue","phone","setPhone","mobilephone","setMobilephone","isCepValid","setIsCepValid","dateColor","setDateColor","address","user","role_id","gender_id","setBody","useEffect","handleVerifyPasswords","password","password_confirmation","handleDateChange","e","name","handleChangeBody","handleChangePhone","handleChangeUser","val","length","currencyMask","handleChangeAddress","handlePlusInformationChange","plusInformation","handleVerifyDate","date","Date","birthday","age","getFullYear","handleFormSubmit","a","preventDefault","Swal","fire","patientsService","confirmButtonColor","message","text","autoComplete","onSubmit","Row","Col","md","size","htmlFor","onChange","placeholder","required","marginTop","cpfMask","maxLength","marginBottom","onKeyDown","defaultChecked","checked","res","erro","document","querySelector","logradouro","bairro","uf","localidade","city","street","neighborhood","disabled","min","patientsReducer","fetchPatientAppointments","patientId","patientInfo","modal","setModal","nestedModal","setNestedModal","closeAll","setCloseAll","toggleNested","border","faClipboard","Modal","ModalHeader","ModalBody","rg","onClosed","undefined","appointments","Table","responsive","striped","appointment","time","abstract","height","width","ModalFooter","patients","filterPatients","fetchPatients","deletePatient","handlePaginationClick","textAlign","history","push","faEdit","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","faTrash","Pagination","aria-label","PaginationItem","PaginationLink","first","paginationData","previous","current_page","Array","last_page","fill","el","i","next","last","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","files","filesReducer","setSelectedFiles","useDropzone","acceptedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","file","path","faUpload","appointmentsReducer","storeAppointment","updateAppointment","uploadFiles","patient_id","requestBody","setRequestBody","checkSuccess","handleRequestBody","success","FormData","selectedFiles","forEach","append","handleStoreAppointment","link","notes","cronogram","todo_list","isLoading","fetchAppointments","deleteAppointment","currentAppointment","filter","handleEdit","loader","fetchFiles","fetchAllPatients","fetchFilesByPatient","created_at","split","href","faEye","Container","fluid","exact","StorePatients","Patients","Appointments","ListAppointments","Files","Login","email","setEmail","setPassword","incorrectMessage","setIncorrectMessage","setLoader","offset","login","setOpen","Content","Boolean","hostname","match","initState","action","filteredPatients","toLocaleLowerCase","includes","remainingPatients","jsonResponse","remainingAppointments","initFiles","combineReducers","fetchAll","find","call","put","appointmentsService","upload","fetchByPatient","filesService","watchSagas","all","takeEvery","patientsSagas","appointmentsSagas","filesSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qXAgCeA,EA1BC,SAAAC,GAAU,IAAD,EAEWC,oBAAS,GAFpB,mBAEhBC,EAFgB,KAELC,EAFK,KAIfC,EAAuBJ,EAAvBI,KAAMC,EAAiBL,EAAjBK,MAAOC,EAAUN,EAAVM,MAErB,OACE,6BACE,kBAACC,EAAA,EAAD,CAASC,QALQ,kBAAML,GAAcD,IAKLO,UAAWC,IAAW,CAAC,aAAcR,KACnE,kBAACS,EAAA,EAAD,CAASF,UAAU,mBACjB,kBAAC,IAAD,CAAiBL,KAAMA,EAAMK,UAAU,SAASJ,IAGpD,kBAACO,EAAA,EAAD,CAAUC,QAASX,EAAWY,QAAM,EAACL,UAAWC,IAAW,aAAa,CAAC,QAASR,KAC/EI,EAAMS,KAAI,SAACC,EAAMC,GAAP,OACP,kBAACV,EAAA,EAAD,CAASW,IAAKD,EAAOR,UAAU,QAC7B,kBAACE,EAAA,EAAD,CAASQ,IAAKC,IAAMC,GAAIL,EAAKM,QAC1BN,EAAKX,c,0CCrBhBkB,EAAMC,IAAMC,OAAO,CACrBC,QAAS,8CAIbH,EAAII,aAAaC,QAAQC,KACrB,SAAAD,GAME,OALEA,EAAQE,QAAU,CACd,eAAgB,mBAChB,mBAAoB,iBACpB,cAAiB,UAAYC,aAAaC,QAAQ,iBAEjDJ,KAET,SAAAK,GAAK,OAAIA,KAGEV,QCqBA,M,WArCX,WAAYvB,GAAO,oBACfkC,KAAKC,eAAgB,E,kDAGnBC,EAAMC,EAAUC,GAAc,IAAD,OAE/Bf,EAAIgB,KAAK,cAAeH,GACnBI,MAAK,SAAAC,GACqB,MAApBA,EAASC,QACRX,aAAaY,QAAQ,eAAgBF,EAASL,KAAKQ,cACnD,EAAKT,eAAgB,EAErBE,MAGA,EAAKF,eAAgB,EACrBG,QAGPO,OAAM,SAAAC,GACH,EAAKX,eAAgB,EACrBG,IACAS,QAAQC,IAAIF,Q,6BAKjBT,GACHH,KAAKC,eAAgB,EACrBE,M,wCAIA,OAAOH,KAAKC,kB,MCoBdc,G,OAAW,CACjB,CACC,CACA5C,MAAO,sBACPiB,OAAQ,uBAER,CACAjB,MAAO,sBACPiB,OAAQ,cAGT,CACC,CACAjB,MAAO,OACPiB,OAAQ,yBAER,CACAjB,MAAO,eACPiB,OAAQ,gBAER,CACAjB,MAAO,oBACPiB,OAAQ,qBAMM4B,EA3EC,SAAAlD,GAAK,OACpB,yBAAKS,UAAWC,IAAW,UAAW,CAAC,UAAWV,EAAMa,UACvD,yBAAKJ,UAAU,kBACd,0BACC0C,MAAM,OACN3C,QAASR,EAAMoD,OACfC,MAAO,CAACF,MAAO,SAEf,kBAAC,IAAD,CAAiB/C,KAAMkD,OAExB,wBAAI7C,UAAU,iBACb,kBAAC,IAAD,CAAiBL,KAAMmD,MADxB,cAKD,yBAAK9C,UAAU,aACd,kBAAC+C,EAAA,EAAD,CACCH,MAAO,CAACI,OAAQ,WAChBC,UAAQ,EACRjD,UAAU,sBAEV,mDACA,kBAACF,EAAA,EAAD,KACC,kBAACI,EAAA,EAAD,CAASU,GAAG,KACX,kBAAC,IAAD,CAAiBjB,KAAMuD,IAAQlD,UAAU,SAD1C,SAID,kBAAC,EAAD,CACCJ,MAAM,YACND,KAAMwD,IACNtD,MAAO2C,EAAS,KAEjB,kBAAC,EAAD,CACC5C,MAAM,eACND,KAAMyD,IACNvD,MAAO2C,EAAS,KAEjB,kBAAC1C,EAAA,EAAD,KACC,kBAACI,EAAA,EAAD,CAASH,QAAS,kBAAMsD,EAAKC,QAAO,kBAAMC,OAAOC,SAASC,QAAO,QAChE,kBAAC,IAAD,CAAiB9D,KAAM+D,IAAY1D,UAAU,SAD9C,a,4CCRU2D,eANS,SAAAC,GACtB,MAAM,CACJC,UAAWD,EAAME,YAAYD,aAIlBF,EAhCA,SAAApE,GACb,OACE,kBAACwE,EAAA,EAAD,CACErB,MAAM,QACNsB,OAAK,EACLhE,UAAU,6CACViE,OAAO,MAEP,kBAACC,EAAA,EAAD,CAAQxB,MAAM,OAAO3C,QAASR,EAAMoD,QAClC,kBAAC,IAAD,CAAiBhD,KAAMwE,OAGzB,kBAACpB,EAAA,EAAD,CAAK/C,UAAU,SAASK,QAAM,GAC5B,kBAACP,EAAA,EAAD,KACE,yBAAKE,UAAU,cACb,wBAAIA,UAAU,SACXT,EAAMsE,kB,gBCnBRO,EAAiB,SAAC,GAAqC,IAAzBC,EAAwB,EAAnCC,UAAyBC,EAAU,6BAC/D,OACI,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OACb,SAACjF,GACG,OAAG8D,EAAKoB,kBACG,kBAACJ,EAAc9E,GAEf,kBAAC,IAAD,CAAUqB,GACb,CACI8D,SAAU,SACVC,MAAO,CACHC,KAAMrF,EAAMiE,kB,kECf/BqB,EAAe,SAAAjF,GAAK,MAAK,CAClCkF,KAAM,iBACNC,QAASnF,ICOAoF,EAAY,SAAAC,GACrB,OAAOA,EACFC,QAAQ,MAAO,IACfA,QAAQ,cAAe,SACvBA,QAAQ,cAAe,WCJjB,EAPE,kBAAMpE,EAAIqE,IAAI,sBAOhB,EAND,SAAAC,GAAI,OAAItE,EAAIqE,IAAJ,yBAA0BC,KAMjC,EALF,SAAAC,GAAE,OAAIvE,EAAIqE,IAAJ,oBAAqBE,KAKzB,EAFW,SAAAC,GAAO,OAAIxE,EAAIqE,IAAJ,gCAAiCG,KAEvD,EAHO,SAAAD,GAAE,OAAIvE,EAAIyE,OAAJ,oBAAwBF,KAGrC,EAJD,SAAAG,GAAI,OAAI1E,EAAIgB,KAAK,YAAa0D,I,iBC+pB7B7B,cAAQ,MAJI,SAAA8B,GAAQ,MAAK,CACpCZ,aAAc,SAAAjF,GAAK,OAAI6F,EAASC,EAAqB9F,QAG1C+D,EA1pBO,SAAApE,GAAU,IAAD,EAELC,mBAAS,IAFJ,mBAEpBmG,EAFoB,KAEfC,EAFe,OAGLpG,mBAAS,IAHJ,mBAGpBqG,EAHoB,KAGfC,EAHe,OAIGtG,oBAAS,GAJZ,mBAIpBuG,EAJoB,KAIXC,EAJW,OAKqBxG,mBAAS,IAL9B,mBAKpByG,EALoB,KAKFC,EALE,OAMD1G,mBAAS,WANR,mBAMpByF,EANoB,KAMbkB,EANa,OAOD3G,mBAAS,IAPR,mBAOpB4G,EAPoB,KAObC,EAPa,OAQW7G,mBAAS,IARpB,mBAQpB8G,EARoB,KAQPC,EARO,OASS/G,oBAAS,GATlB,mBASpBgH,EAToB,KASRC,EATQ,OAUOjH,mBAAS,iCAVhB,mBAUpBkH,EAVoB,KAUTC,EAVS,OAWHnH,mBAAS,CAACoH,QAAS,CAACjC,MAAO,MAAOkC,KAAM,CAACC,QAAS,EAAGC,UAAW,KAX7D,mBAWpBvB,EAXoB,KAWdwB,GAXc,KAa3BC,qBAAU,WACN1H,EAAMsF,aAAa,yBAGvB,IAYMqC,GAAwB,WAC1B,OAAO1B,EAAKqB,KAAKM,WAAa3B,EAAKqB,KAAKO,uBA2CtCC,GAAmB,SAAAC,GACrB,IAAIrC,EAAQqC,EAAEzG,OAAOoE,MACjBsC,EAAOD,EAAEzG,OAAO0G,KAEpBP,GAAQ,2BACDxB,GADA,kBAEF+B,EAAOtC,KAGZ0B,EAAa,uBAGXa,GAAmB,SAAAF,GACrB,IAAIrC,EAAQqC,EAAEzG,OAAOoE,MACjBsC,EAAOD,EAAEzG,OAAO0G,KAEpBP,GAAQ,2BACDxB,GADA,kBAEF+B,EAAOtC,MAIVwC,GAAoB,SAAAH,GACtB,IAAIC,EAAOD,EAAEzG,OAAO0G,KAChBtC,EAAQqC,EAAEzG,OAAOoE,MAEhBc,EAQW,aAARwB,EACAlB,EAASpB,GAETsB,EAAetB,IAVnBA,EAAQA,EAAMC,QAAQ,UAAW,IAErB,aAARqC,EACAlB,EAASrB,EAAUC,IAEnBsB,EAAevB,EAAUC,KAQjC+B,GAAQ,2BACDxB,GADA,kBAEF+B,EAAOtC,MAIVyC,GAAmB,SAAAJ,GACrB,IAAIrC,EAAQqC,EAAEzG,OAAOoE,MACjBsC,EAAOD,EAAEzG,OAAO0G,KAER,SAARA,IACApB,EFtHgB,SAAAwB,GACxB,IAAI1C,EAAQ0C,EACPzC,QAAQ,MAAO,IACfA,QAAQ,OAAQ,IAErB,OAAoB,IAAjBD,EAAM2C,OACE3C,EACFC,QAAQ,cAAe,WACvBA,QAAQ,eAAgB,SAER,IAAjBD,EAAM2C,OACH3C,EACFC,QAAQ,cAAe,WACvBA,QAAQ,eAAgB,QAGtBD,EACFC,QAAQ,cAAe,WACvBA,QAAQ,eAAgB,OEoGhB2C,CAAa5C,IACtBA,EAAQA,EAAMC,QAAQ,UAAW,KAGrC8B,GAAQ,2BACDxB,GADA,IAEHqB,KAAK,2BACErB,EAAKqB,MADR,gBAEAU,KAAM/B,EAAK+B,MACVA,EAAOtC,QAKd6C,GAAsB,SAAAR,GACxB,IAAIrC,EAAQqC,EAAEzG,OAAOoE,MACjBsC,EAAOD,EAAEzG,OAAO0G,KAEpBP,GAAQ,2BACDxB,GADA,IAEHoB,QAAQ,2BACDpB,EAAKoB,SADL,kBAEFW,EAAOtC,QAKd8C,GAA8B,SAAAT,GAChC,IAAIrC,EAAQqC,EAAEzG,OAAOoE,MACjBsC,EAAOD,EAAEzG,OAAO0G,KAEfxB,GAAmB,qBAARwB,GACZrB,EAAoBlB,EAAUC,IAC9Bc,GAAmB,qBAARwB,GACXrB,EAAoBjB,GAExB+B,GAAQ,2BACDxB,GADA,IAEHwC,gBAAgB,2BACTxC,EAAKwC,iBADG,kBAEVT,EAAOtC,QAKdgD,GAAmB,WACrB,IAAIC,EAAO,IAAIC,KACXC,EAAW,IAAID,KAAK3C,EAAK4C,UACzBC,EAAMH,EAAKI,cAAgBF,EAASE,cACxC,QAASD,EAAM,KAAOA,EAAM,IAG1BE,GAAgB,uCAAG,WAAMjB,GAAN,SAAAkB,EAAA,yDACrBlB,EAAEmB,iBACW,YAAVxD,EAFkB,yCAGVyD,IAAKC,KAAK,2CAHA,WAIjBzB,OAA2Be,KAJV,iCAKXjB,GAAQ,2BACPxB,GADM,IAETO,QAASA,KAPI,uBASX6C,EAAsBpD,GACvBzD,MAAK,WACF2G,IAAKC,KAAK,CACN/I,MAAO,mCACPD,KAAM,UACNkJ,mBAAoB,eAG3BzG,OAAM,SAAAkF,GACH,GAAgB,uCAAbA,EAAEwB,QACD,OAAOJ,IAAKC,KAAK,CACb/I,MAAO,0BACPmJ,KAAM,yDACNpJ,KAAM,UACNkJ,mBAAoB,YAG5BH,IAAKC,KAAK,CACN/I,MAAO,mBACPmJ,KAAM,wCACNpJ,KAAM,UACNkJ,mBAAoB,eA9Bf,kCAkCZ3B,KAlCY,0CAmCNwB,IAAKC,KAAK,wBAnCJ,WAoCZV,KApCY,0CAqCNS,IAAKC,KAAK,wDArCJ,4CAAH,sDAoDtB,OACI,0BAAMK,aAAa,eAAeC,SAAUV,IACxC,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IACb,yBAAKrJ,UAAU,OACX,wBAAIA,UAAU,YAAd,qBAGA,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,QAAf,UACA,2BACIC,SAAU/B,GACV1C,KAAK,OACLyC,KAAK,OACLiC,YAAY,gBACZxJ,UAAU,qBACVyJ,UAAQ,KAGhB,kBAACN,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,aAAf,mBACA,2BACIC,SAAU9B,GACV3C,KAAK,OACLyC,KAAK,YACLvH,UAAU,qBACVwJ,YAAazD,EAAU,wBAA0B,kBACjDd,MAAOmB,MAInB,kBAAC8C,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,SACrB,kBAACP,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,SAAf,aACA,2BACIC,SAAU9B,GACV3C,KAAK,OACLyC,KAAK,QACLvH,UAAU,qBACVwJ,YAAazD,EAAU,wBAA0B,kBACjDd,MAAOqB,KAGf,kBAAC6C,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,OAAf,SACA,2BACIxE,KAAK,OACLyC,KAAK,MACLvH,UAAU,qBACVuJ,SArQd,SAAAjC,GACd1B,EF5Be,SAAAX,GACnB,OAAOA,EACFC,QAAQ,MAAO,IACfA,QAAQ,cAAe,SACvBA,QAAQ,cAAe,SACvBA,QAAQ,mBAAoB,SAC5BA,QAAQ,gBAAiB,MEsBnByE,CAAQrC,EAAEzG,OAAOoE,QAExB,IAAIA,EAAQqC,EAAEzG,OAAOoE,MACjBsC,EAAOD,EAAEzG,OAAO0G,KAEpBP,GAAQ,2BACDxB,GADA,kBAEF+B,EAAOtC,MA8PgB2E,UAAU,KACVJ,YAAY,iBACZvE,MAAOU,EACP8D,UAAQ,KAGhB,kBAACN,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,MAAf,QACA,2BACIC,SAAU/B,GACV1C,KAAK,OACLyC,KAAK,KACLvH,UAAU,yBAItB,kBAACkJ,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,YAAf,wBACA,2BACIxE,KAAK,OACLyC,KAAK,WACLvH,UAAW0G,EACX8C,YAAY,qBACZD,SAAUlC,GACVyC,UAAWzC,MAGnB,kBAAC8B,EAAA,EAAD,CAAKC,GAAI,GAAT,YAEA,yBAAKpJ,UAAU,WACP,+BACI,2BACI8E,KAAK,QACL9E,UAAU,qBACVuH,KAAK,UACLwC,gBAAc,IALtB,aASA,6BACA,+BACI,2BAAOjF,KAAK,QACR9E,UAAU,qBACVuH,KAAK,YAHb,eAUZ,kBAAC2B,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACL,2BACIpJ,UAAU,kBACVuH,KAAK,UACLzC,KAAK,WACLkF,QAASjE,EACTwD,SAxHJ,WACxBlD,EAAS,IACTE,EAAe,IACfL,EAAoB,IAKhBF,GAHCD,MAqHmB,0BAAM/F,UAAU,gBAAhB,oBAOhB,kBAACmJ,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IACb,yBAAKrJ,UAAU,OACX,wBAAIA,UAAU,YAAd,eAGA,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,OAAf,SACA,2BACIM,UAAU,IACVL,SAnUR,SAAAjC,GACpB,IAAIzB,EAAMyB,EAAEzG,OAAOoE,MAAMC,QAAQ,UAAW,IAC5CY,EAAOD,GAEY,IAAfA,EAAI+B,OACJ7G,IAAMoE,IAAN,mCAAsCU,EAAtC,UACK9D,MAAK,SAAAkI,GACGA,EAAItI,KAAKuI,KAmBVzD,GAAc,IAlBdA,GAAc,GACd0D,SAASC,cAAc,WAAWnF,MAAQgF,EAAItI,KAAK0I,WACnDF,SAASC,cAAc,iBAAiBnF,MAAQgF,EAAItI,KAAK2I,OACzDH,SAASC,cAAc,UAAUnF,MAAQgF,EAAItI,KAAK4I,GAClDJ,SAASC,cAAc,SAASnF,MAAQgF,EAAItI,KAAK6I,WACjDxD,GAAQ,2BACDxB,GADA,IAEHoB,QAAQ,2BACDpB,EAAKoB,SADL,IAEH6D,KAAMR,EAAItI,KAAK6I,WACf3E,IAAKA,EACL6E,OAAQT,EAAItI,KAAK0I,WACjB1F,MAAOsF,EAAItI,KAAK4I,GAChBI,aAAcV,EAAItI,KAAK2I,gBAQtClI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,oCAAqCF,MAEnE2E,GAAQ,2BACDxB,GADA,IAEHoB,QAAQ,2BACDpB,EAAKoB,SADL,IAEHf,IAAKA,QAiSWf,KAAK,OACLyC,KAAK,MACLvH,UAAU,qBACViF,MAAOY,KAGf,kBAACsD,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,UAAf,gBACA,2BACIC,SAAUzB,GACVzC,GAAG,SACHP,KAAK,OACLyC,KAAK,SACLvH,UAAU,qBACVwJ,YAAY,kBACZoB,SAAUpE,MAItB,kBAAC0C,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,cAAf,iBACA,2BACIjE,GAAG,aACHP,KAAK,OACLyC,KAAK,aACLvH,UAAU,qBACVuJ,SAAUzB,MAGlB,kBAACqB,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,gBAAf,YACA,2BACIjE,GAAG,eACHP,KAAK,OACLyC,KAAK,eACLvH,UAAU,qBACV4K,SAAUpE,EACV+C,SAAUzB,OAItB,kBAACoB,EAAA,EAAD,CAAKtG,MAAO,CAAEiH,aAAc,SACxB,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,UAAf,eACA,2BACIC,SAAUzB,GACVzC,GAAG,SACHP,KAAK,SACL+F,IAAI,IACJtD,KAAK,SACLvH,UAAU,wBAGlB,kBAACmJ,EAAA,EAAD,CAAKC,GAAI,GAEDrD,EACI,oCACI,2BAAOuD,QAAQ,SAAf,YACA,2BACIxE,KAAK,OACLyC,KAAK,QACLlC,GAAG,QACHrF,UAAU,qBACV4K,SAAUpE,EACV+C,SAAUzB,MAKd,oCACI,2BAAOwB,QAAQ,SAAf,QACA,4BACI/B,KAAK,QACLlC,GAAG,QACHrF,UAAU,qBACV4K,SAAUpE,EACV+C,SAAUzB,IAEV,4BAAQ7C,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,SAMxB,kBAACkE,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,QAAf,eACA,2BACIxE,KAAK,OACLyE,SAAUzB,GACVP,KAAK,OACLlC,GAAG,OACHrF,UAAU,qBACV4K,SAAUpE,SAOlC,kBAAC0C,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKpJ,UAAU,OACX,wBAAIA,UAAU,YAAd,gCAGA,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,qBAAf,8BACA,2BACIxE,KAAK,OACLyC,KAAK,oBACLvH,UAAU,qBACVwJ,YAAazD,EAAU,wBAA0B,kBACjDwD,SAAUxB,GACV9C,MAAOgB,KAGf,kBAACkD,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,kBAAf,UACA,2BACIxE,KAAK,OACLyC,KAAK,iBACLvH,UAAU,qBACVwJ,YAAY,gBACZD,SAAUxB,OAItB,kBAACmB,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACL,2BAAOE,QAAQ,eAAf,sBACA,8BACItJ,UAAU,qBACVuH,KAAK,cACLgC,SAAUxB,UAQlC,kBAACmB,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKpJ,UAAU,OACX,wBAAIA,UAAU,YAAd,sBAGA,kBAACkJ,EAAA,EAAD,CAAKtG,MAAO,CAAEiH,aAAc,SACxB,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,SAAf,WACA,2BACIxE,KAAK,OACLyE,SAAU7B,GACV1H,UAAU,qBACVuH,KAAK,QACLtC,MAAOA,EACPwE,UAAQ,KAGhB,kBAACN,EAAA,EAAD,CAAKC,GAAI,GAAT,iBAEA,yBAAKpJ,UAAU,WACP,+BACI,2BACI8E,KAAK,QACL9E,UAAU,qBACVuH,KAAK,UACLwC,gBAAc,IALtB,OASA,6BACA,+BACI,2BACIjF,KAAK,QACL9E,UAAU,qBACVuH,KAAK,YAJb,gBAcxB,kBAAC2B,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKpJ,UAAU,OACX,wBAAIA,UAAU,YAAd,8BAGA,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,SAAf,WACA,2BACIC,SAAU7B,GACV5C,KAAK,QACL9E,UAAU,qBACVuH,KAAK,QACLyB,aAAa,eACbS,UAAQ,KAGhB,kBAACN,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,YAAf,WACA,2BACIC,SAAU7B,GACV5C,KAAK,WACL9E,UAAU,qBACVuH,KAAK,WACLyB,aAAa,eACbS,UAAQ,KAGhB,kBAACN,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,yBAAf,mBACA,2BACIC,SAAU7B,GACV5C,KAAK,WACL9E,UAAU,qBACVuH,KAAK,wBACLkC,UAAQ,MAIpB,kBAACP,EAAA,EAAD,CAAKtG,MAAO,CAAE8G,UAAW,OAAQG,aAAc,SAC3C,kBAACV,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,WAAf,gBACA,4BACItJ,UAAU,qBACVuH,KAAK,QAEL,4BAAQtC,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,cAGR,kBAACkE,EAAA,EAAD,CAAKC,GAAI,GAAT,kBAEA,yBAAKpJ,UAAU,UACP,+BACI,2BACI8E,KAAK,QACL9E,UAAU,qBACVuH,KAAK,SACLwC,gBAAc,IALtB,OASA,6BACA,+BACI,2BACIjF,KAAK,QACL9E,UAAU,qBACVuH,KAAK,WAJb,gBAcxB,kBAAC2B,EAAA,EAAD,CAAKtG,MAAO,CAAEiH,aAAc,UACxB,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKpJ,UAAU,OACX,wBAAIA,UAAU,YAAd,gBACA,kBAACkE,EAAA,EAAD,CAAQY,KAAK,UAAb,iB,mGCvjBTnB,gBAVS,SAAAC,GACvB,MAAO,CACN0B,QAAS1B,EAAMkH,oBAIU,SAAArF,GAAQ,MAAK,CACvCsF,yBAA0B,SAAAC,GAAS,OAAIvF,EC3EO,CAC3CX,KAAM,kCACNC,QDyE8EiG,QAGnErH,EAzFM,SAACpE,GAAW,IAAD,EACvB0L,EAA2B1L,EAA3B0L,YAAajL,EAAcT,EAAdS,UADU,EAGLR,oBAAS,GAHJ,mBAGxB0L,EAHwB,KAGjBC,EAHiB,OAIO3L,oBAAS,GAJhB,mBAIxB4L,EAJwB,KAIXC,EAJW,OAKC7L,oBAAS,GALV,mBAKxB8L,EALwB,KAKdC,EALc,KAOzB5I,EAAS,kBAAMwI,GAAUD,IAEzBM,EAAe,WACpBjM,EAAMwL,yBAAyBE,EAAY5F,IAC3CgG,GAAgBD,GAChBG,GAAY,IAGb,OACC,6BACC,kBAACrH,EAAA,EAAD,CAAQlE,UAAU,cAAc4C,MAAO,CAAC6I,OAAQ,WAAY1L,QAAS4C,GACpE,kBAAC,IAAD,CAAiBhD,KAAM+L,OACxB,kBAACC,GAAA,EAAD,CAAOvL,OAAQ8K,EAAOvI,OAAQA,EAAQ3C,UAAWA,GAChD,kBAAC4L,GAAA,EAAD,CAAajJ,OAAQA,GACpB,wBAAI3C,UAAU,wBAAd,qBACmB,kBAAC,IAAD,CAAiBL,KAAM+L,QAG3C,kBAACG,GAAA,EAAD,KACA,oCADA,WACcZ,QADd,IACcA,OADd,EACcA,EAAa1D,KAD3B,IACiC,6BACjC,kDAFA,WAE4B0D,QAF5B,IAE4BA,OAF5B,EAE4BA,EAAa7C,SAFzC,IAEmD,6BACnD,wCAHA,WAGkB6C,QAHlB,IAGkBA,OAHlB,EAGkBA,EAAa7E,MAH/B,IAGsC,6BACtC,mCAJA,WAIa6E,QAJb,IAIaA,OAJb,EAIaA,EAAatF,IAJ1B,IAI+B,6BAC/B,kCALA,WAKYsF,QALZ,IAKYA,OALZ,EAKYA,EAAaa,GALzB,IAK6B,6BAC7B,kBAACH,GAAA,EAAD,CAAOvL,OAAQgL,EAAazI,OAAQ6I,EAAcO,SAAUT,EAAW3I,OAASqJ,GAC/E,kBAACJ,GAAA,EAAD,iCACA,kBAACC,GAAA,EAAD,KAEEtM,EAAM+F,QAAQ2G,aAEb,kBAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,GACxB,+BACC,4BACC,sCACA,sCACA,0CAGF,yCACE7M,EAAM+F,QAAQ2G,oBADhB,aACE,EAA4B3L,KAAI,SAAA+L,GAAW,OAC3C,4BACC,4BAAKA,EAAYnE,MACjB,4BAAKmE,EAAYC,MACjB,4BAAKD,EAAYE,gBAMtB,kBAAC,KAAD,CACCvM,UAAU,SACV8E,KAAK,WACLpC,MAAM,UACN8J,OAAQ,IACRC,MAAO,OAIV,kBAACC,GAAA,EAAD,KACA,kBAACxI,EAAA,EAAD,CAAQlE,UAAU,2BAA2BD,QAASyL,GAAtD,aAID,kBAACkB,GAAA,EAAD,KACC,kBAACxI,EAAA,EAAD,CAAQlE,UAAU,2BAA2BD,QAASyL,GAAtD,gBACA,kBAACtH,EAAA,EAAD,CAAQlE,UAAU,2BAA2BD,QAAS4C,GAAtD,gBEsGUgB,gBANS,SAAAC,GACpB,MAAM,CACF+I,SAAU/I,EAAMkH,oBATG,SAAArF,GAAQ,MAAK,CACpCZ,aAAc,SAAAjF,GAAK,OAAI6F,EAASC,EAAqB9F,KACrDgN,eAAgB,SAAAtH,GAAO,OAAIG,ED3KD,SAAAH,GAAO,MAAK,CACtCR,KAAM,kBACNC,QAASO,GCyK2BI,CAAuBJ,KAC3DuH,cAAe,SAAAzH,GAAI,OAAIK,EDvKE,SAAAL,GAAI,MAAK,CAClCN,KAAM,sBACNC,QAASK,GCqKuBM,CAAsBN,KACtD0H,cAAe,SAAAzH,GAAE,OAAII,EDrJI,SAAAJ,GAAE,MAAK,CAChCP,KAAM,sBACNC,QAASM,GCmJqBK,CAAsBL,QASzC1B,EA1KE,SAAApE,GAAU,IAAD,UAEtB0H,qBAAU,WACN1H,EAAMsF,aAAa,uBACnBtF,EAAMsN,cAAc,KACtB,IAEF,IAIME,EAAqB,uCAAG,WAAM3H,GAAN,SAAAoD,EAAA,sEACpBjJ,EAAMsN,cAAczH,GADA,2CAAH,sDA2B3B,OACI,yBAAKpF,UAAU,OACX,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,2BAAOE,QAAQ,UAAf,cACA,2BACIxE,KAAK,OACL9E,UAAU,qBACVwJ,YAAY,oCACZD,SAxCA,SAAAjC,GAChB/H,EAAMqN,eAAetF,EAAEzG,OAAOoE,YA2C1B,oCAEQ1F,EAAMoN,SAASA,SACX,kBAACT,EAAA,EAAD,CAAOE,SAAO,EAACD,YAAU,GACrB,+BACI,4BACI,qCACA,mCACA,wCACA,sCACA,wBAAIvJ,MAAO,CAACoK,UAAW,WAAvB,qBACA,uCACA,0CAGR,+BACCzN,EAAMoN,SAASA,SAASrM,KAAI,SAACgF,EAAS9E,GAAV,OACzB,wBAAIC,IAAKD,GACL,4BAAK8E,EAAQiC,MACb,4BAAKjC,EAAQwG,IACb,4BAAKxG,EAAQc,OACb,4BAAI,kBAAC,GAAD,CAAoB6E,YAAa3F,KACrC,wBAAI1C,MAAO,CAACoK,UAAW,WACnB,4BACI3H,GAAIC,EAAQD,GACZtF,QAAU,kBA7D3BsF,EA6DgDC,EAAQD,QA5D3E9F,EAAM0N,QAAQC,KAAK,CACfxI,SAAU,wBACVY,QAASD,IAHM,IAAAA,GA8DiBrF,UAAU,mBAEV,kBAAC,IAAD,CAAiBL,KAAMyD,QAG/B,4BACI,kBAAC,IAAD,CAAMxC,GAAG,wBACL,4BAAQZ,UAAU,mBACd,kBAAC,IAAD,CAAiBL,KAAMwN,SAInC,4BACI,4BACI9H,GAAIC,EAAQD,GACZtF,QAAU,kBAtE5BsF,EAsEgDC,EAAQD,QArE1EqD,IAAKC,KAAK,CACN/I,MAAO,gDACPmJ,KAAM,iFACNpJ,KAAM,UACNyN,kBAAkB,EAClBC,kBAAmB,UACnBxE,mBAAoB,MACpByE,iBAAkB,WAClBC,kBAAmB,YAEtBxL,MAAK,SAAAkI,GACCA,EAAIhF,OACH1F,EAAMuN,cAAczH,MAbV,IAAAA,GAuEkBrF,UAAU,qBAEV,kBAAC,IAAD,CAAiBL,KAAM6N,aAMvC,kBAACC,GAAA,EAAD,CAAYC,aAAW,2BAEnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,OAAK,EACL9N,QAAS,wBAAMgN,EAAqB,UAACxN,EAAMoN,SAASmB,sBAAhB,aAAC,EAA+BlJ,UAG5E,kBAAC+I,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIG,UAAQ,EACRhO,QAAS,wBAAMgN,GAAsB,UAAAxN,EAAMoN,SAASmB,sBAAf,eAA+BE,cAAe,IACnFpD,UAAU,UAAArL,EAAMoN,SAASmB,sBAAf,eAA+BE,gBAA/B,UAA+CzO,EAAMoN,SAASmB,sBAA9D,aAA+C,EAA+BlJ,SAI/FqJ,MAAK,UAAC1O,EAAMoN,SAASmB,sBAAhB,aAAC,EAA+BI,WAAWC,KAAK,GAAG7N,KAAI,SAAC8N,EAAIC,GAAL,OACzD,kBAACV,GAAA,EAAD,CAAgBlN,IAAK4N,GACjB,kBAACT,GAAA,EAAD,CAAgB7N,QAAS,kBAAMgN,EAAsBsB,EAAI,KACxDA,EAAI,OAKb,kBAACV,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIU,MAAI,EACJvO,QAAS,wBAAMgN,GAAsB,UAAAxN,EAAMoN,SAASmB,sBAAf,eAA+BE,cAAe,IACnFpD,UAAU,UAAArL,EAAMoN,SAASmB,sBAAf,eAA+BE,gBAA/B,UAA+CzO,EAAMoN,SAASmB,sBAA9D,aAA+C,EAA+BI,cAGhG,kBAACP,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIW,MAAI,EACJxO,QAAS,wBAAMgN,EAAqB,UAACxN,EAAMoN,SAASmB,sBAAhB,aAAC,EAA+BI,iBAOpF,kBAAC,KAAD,CACIlO,UAAU,SACV8E,KAAK,WACLpC,MAAM,UACN8J,OAAQ,IACRC,MAAO,W,SCxJ7B+B,GAAY,CACdC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBxM,MAAO,UACPyM,QAAS,OACTC,WAAY,2BAGVC,GAAc,CAChBL,YAAa,WAGXM,GAAc,CAChBN,YAAa,WAGXO,GAAc,CAChBP,YAAa,WA2DFrL,gBAVS,SAAAC,GACpB,MAAM,CACF4L,MAAO5L,EAAM6L,iBAIM,SAAAhK,GAAQ,MAAK,CACpCiK,iBAAkB,SAAAF,GAAK,OAAI/J,ECxFmB,CAC9CX,KAAM,qBACNC,QDsF6DyK,QAGlD7L,EAxDQ,SAAApE,GAAU,IAAD,EASxBoQ,eANAC,EAHwB,EAGxBA,cACAC,EAJwB,EAIxBA,aACAC,EALwB,EAKxBA,cACAC,EANwB,EAMxBA,aACAC,EAPwB,EAOxBA,aACAC,EARwB,EAQxBA,aAGJhJ,qBAAU,WACN1H,EAAMmQ,iBAAiBE,KACxB,CAACA,IAGJ,IAAMhN,EAAQsN,mBAAQ,8BAAC,uCAChB1B,IACCuB,EAAeV,GAAc,IAC7BW,EAAeV,GAAc,IAC7BW,EAAeV,GAAc,MACjC,CACAQ,EACAE,EACAD,IAGER,EAAQI,EAActP,KAAI,SAAA6P,GAAI,OAChC,wBAAI1P,IAAK0P,EAAKC,MACXD,EAAKC,KADR,MACiBD,EAAK9G,KADtB,aAKJ,OACI,6BACI,wBAASwG,EAAa,CAAEjN,UACpB,0BAAWkN,KACX,kFACA,kBAAC,IAAD,CAAiBnQ,KAAM0Q,OAE3B,yCACA,4BAAKb,OE4JF7L,I,MAAAA,aAhBS,SAAAC,GACpB,MAAM,CACF+I,SAAU/I,EAAMkH,gBAChBmB,aAAcrI,EAAM0M,oBACpBd,MAAO5L,EAAM6L,iBAIM,SAAAhK,GAAQ,MAAK,CACpC8K,iBAAkB,SAAA5O,GAAI,OAAI8D,ECjOG,SAAA9D,GAAI,MAAK,CACtCmD,KAAM,0BACNC,QAASpD,GD+N0B+D,CAA0B/D,KAC7D6O,kBAAmB,SAAA7O,GAAI,OAAI8D,EC7NG,SAAA9D,GAAI,MAAK,CACvCmD,KAAM,2BACNC,QAASpD,GD2N2B+D,CAA2B/D,KAC/DkD,aAAc,SAAAjF,GAAK,OAAI6F,EAASC,EAAqB9F,KACrDiN,cAAe,kBAAMpH,EJ1Nc,CACnCX,KAAM,6BI0NN2L,YAAa,SAACjB,EAAOkB,GAAR,OAAuBjL,EDhOb,SAAC+J,EAAOlK,GAAR,MAAqB,CAC5CR,KAAM,eACNC,QAAS,CACLyK,MAAOA,EACPlK,QAASA,IC4NgCI,CAAoB8J,EAAOkB,QAG7D/M,EA/NM,SAAApE,GAAU,IAAD,IAEYC,mBAAS,IAFrB,mBAEnBmR,EAFmB,KAENC,EAFM,KAI1B3J,qBAAU,WACN1H,EAAMsF,aACFtF,EAAMiE,SAASmB,MACf,wBACA,qBAEJpF,EAAMsN,gBACNgE,IACItR,EAAMiE,SAASmB,MACfiM,EAAerR,EAAMiE,SAASmB,OACzBpF,EAAMiE,SAAS8B,SACpBsL,EAAe,CAACF,WAAYnR,EAAMiE,SAAS8B,YACjD,CAAC/F,EAAM0M,eAET,IAAM6E,EAAoB,SAAAxJ,GACtBsJ,EAAe,2BACRD,GADO,kBAETrJ,EAAEzG,OAAO0G,KAAOD,EAAEzG,OAAOoE,UAI5B4L,EAAe,WACbtR,EAAM0M,aAAa8E,UACnBrI,IAAKC,KAAK,CACN/I,MAAO,WACPmJ,KAAM,mCACNpJ,KAAM,UACNkJ,mBAAoB,YAExBtJ,EAAM0M,aAAa8E,SAAU,GAE7BxR,EAAM0M,aAAazK,QACnBkH,IAAKC,KAAK,CACN/I,MAAO,SACPmJ,KAAM,+CACNpJ,KAAM,UACNkJ,mBAAoB,YAExBtJ,EAAM0M,aAAazK,OAAQ,IAI7BiP,EAAW,uCAAG,4BAAAjI,EAAA,6DACZgH,EAAQ,IAAIwB,SADA,SAEVzR,EAAMiQ,MAAMyB,cAAcC,SAAQ,SAAAf,GACpCX,EAAM2B,OAAO,UAAWhB,MAHZ,YAKZ5Q,EAAMiQ,MAAMyB,cAAcrJ,OAAS,GALvB,gCAMNrI,EAAMkR,YAAYjB,EAAOmB,EAAYD,YAN/B,2CAAH,qDAUXU,EAAsB,uCAAG,WAAM9J,GAAN,SAAAkB,EAAA,yDAC3BlB,EAAEmB,kBAEElJ,EAAMiE,SAASmB,MAHQ,gCAIjBpF,EAAMiR,kBAAkBG,GAJP,6CAOjBpR,EAAMgR,iBAAiBI,GAPN,wBAUrBF,IAVqB,4CAAH,sDAa5B,OACI,0BAAMxH,SAAUmI,EAAwBxO,MAAO,CAACiH,aAAc,UAC1D,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKpJ,UAAU,OACX,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,cAAf,cACA,4BACIC,SAAUuH,EACVvJ,KAAK,aACLzC,KAAK,OACL0E,YAAY,YACZxJ,UAAU,qBACVyJ,UAAQ,EACRxE,MAAO0L,EAAYD,YAEnB,gDAEInR,EAAMoN,SAASA,SACfpN,EAAMoN,SAASA,SAASrM,KAAI,SAAAgF,GAAO,OAC/B,4BAAQ7E,IAAK6E,EAAQD,GAAIJ,MAAOK,EAAQD,IACnCC,EAAQiC,SAEX,KAIlB,kBAAC4B,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,QAAf,UACA,2BACIC,SAAUuH,EACVvJ,KAAK,OACLzC,KAAK,OACL9E,UAAU,qBACVwJ,YAAY,6BACZC,UAAQ,EACRxE,MAAO0L,EAAYU,QAG3B,kBAAClI,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,QAAf,UACA,2BACIC,SAAUuH,EACVvJ,KAAK,OACLzC,KAAK,OACL9E,UAAU,qBACVyJ,UAAQ,EACRxE,MAAO0L,EAAYzI,QAG3B,kBAACiB,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,QAAf,UACA,2BACIC,SAAUuH,EACVvJ,KAAK,OACLzC,KAAK,OACL9E,UAAU,qBACVyJ,UAAQ,EACRxE,MAAO0L,EAAYrE,SAI/B,kBAACpD,EAAA,EAAD,CAAKtG,MAAO,CAAC8G,UAAW,SACpB,kBAACP,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,SAAf,WACA,8BACIC,SAAUuH,EACVvJ,KAAK,QACLvH,UAAU,eACViF,MAAO0L,EAAYW,SAG3B,kBAACnI,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,aAAf,gBACA,8BACIC,SAAUuH,EACVvJ,KAAK,YACLvH,UAAU,eACViF,MAAO0L,EAAYY,cAI/B,kBAACrI,EAAA,EAAD,CAAKtG,MAAO,CAAC8G,UAAW,SACpB,kBAACP,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,YAAf,YACA,8BACIC,SAAUuH,EACVvJ,KAAK,WACLvH,UAAU,eACViF,MAAO0L,EAAYpE,YAG3B,kBAACpD,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOE,QAAQ,aAAf,aACA,8BACIC,SAAUuH,EACVvJ,KAAK,YACLvH,UAAU,eACViF,MAAO0L,EAAYa,cAI/B,kBAACtI,EAAA,EAAD,CAAKtG,MAAO,CAAC8G,UAAW,SACpB,kBAACP,EAAA,EAAD,CAAKC,GAAI,GAAIpJ,UAAU,YACnB,kBAAC,GAAD,OAEJ,kBAACmJ,EAAA,EAAD,CAAKC,GAAI,GAAIxG,MAAO,CAACoK,UAAW,SAAUtD,UAAW,SACjD,kBAACxF,EAAA,EAAD,CACIlE,UAAU,qCACV4K,SAAQ,UAAErL,EAAM0M,oBAAR,aAAE,EAAoBwF,WAG1BlS,EAAMiE,SAASmB,MACf,wBACA,yBAGApF,EAAM0M,aAAawF,UACf,kBAAC,KAAD,CACI3M,KAAK,WACLpC,MAAM,UACN8J,OAAQ,GACRC,MAAO,KAEb,cE1F3B9I,gBANS,SAAAC,GACpB,MAAO,CACHqI,aAAcrI,EAAM0M,wBARD,SAAA7K,GAAQ,MAAK,CACpCZ,aAAc,SAAAjF,GAAK,OAAI6F,EAASC,EAAqB9F,KACrD8R,kBAAmB,kBAAMjM,ED7Fc,CACvCX,KAAM,iCC6FN6M,kBAAmB,SAAAtM,GAAE,OAAII,ED1FI,SAAAJ,GAAE,MAAK,CACpCP,KAAM,0BACNC,QAASM,GCwFyBK,CAA0BL,QASjD1B,EAvGU,SAAApE,GAAU,IAAD,EAE9B0H,qBAAU,WACN1H,EAAMsF,aAAa,0BACnBtF,EAAMmS,sBACP,IA4BH,OACI,yBAAK1R,UAAU,OAEoC,IAA3C,UAAAT,EAAM0M,aAAaA,oBAAnB,eAAiCrE,QACjC,uBAAGhF,MAAO,CAACF,MAAO,SAAlB,kCACAnD,EAAM0M,aAAaA,aACf,kBAACC,EAAA,EAAD,CAAOE,SAAO,EAACD,YAAU,GACrB,+BACI,4BACI,qCACA,qCACA,yCACA,uCACA,0CAGR,+BACK5M,EAAM0M,aAAaA,aAAa3L,KAAI,SAAC+L,EAAa7L,GAAd,OACjC,wBAAIC,IAAKD,GACL,4BAAK6L,EAAYnE,MACjB,4BAAKmE,EAAYC,MACjB,4BAAKD,EAAYqE,YACjB,4BACI,4BACI1Q,UAAU,kBACVD,QAAS,kBAlC9B,SAAAsF,GACf,IAAIuM,EAAqBrS,EAAM0M,aAAaA,aAC3C4F,QAAO,SAAAxF,GAAW,OAAIA,EAAYhH,IAAMA,KAAI,GAC7C9F,EAAM0N,QAAQC,KAAK,CACfxI,SAAU,wBACVC,MAAOiN,IA6BwCE,CAAWzF,EAAYhH,MAEtC,kBAAC,IAAD,CAAiB1F,KAAMwN,QAG/B,4BACI,4BACI9H,GAAIgH,EAAYhH,GAChBtF,QAAS,kBA3DvBsF,EA2D+CgH,EAAYhH,QA1DjFqD,IAAKC,KAAK,CACN/I,MAAO,mDACPmJ,KAAM,oFACNpJ,KAAM,UACNyN,kBAAkB,EAClBC,kBAAmB,UACnBxE,mBAAoB,MACpByE,iBAAkB,WAClBC,kBAAmB,YAElBxL,MAAK,SAAAkI,GACEA,EAAIhF,OACJ1F,EAAMoS,kBAAkBtM,MAbd,IAAAA,GA4DcrF,UAAU,qBAEV,kBAAC,IAAD,CAAiBL,KAAM6N,cAQ3C,kBAAC,KAAD,CACIxN,UAAU,SACV8E,KAAK,WACLpC,MAAM,UACN8J,OAAQ,IACRC,MAAO,UCUpB9I,I,OAAAA,aAfS,SAAAC,GACpB,MAAO,CACH4L,MAAO5L,EAAM6L,aAAaD,MAC1BuC,OAAQnO,EAAM6L,aAAasC,OAC3BpF,SAAU/I,EAAMkH,gBAAgB6B,aAIb,SAAAlH,GAAQ,MAAK,CACpCuM,WAAY,SAAA5M,GAAI,OAAIK,EJnFE,SAAAL,GAAI,MAAK,CAC/BN,KAAM,cACNC,QAASK,GIiFoBM,CAAmBN,KAChDP,aAAc,SAAAjF,GAAK,OAAI6F,EAASC,EAAqB9F,KACrDqS,iBAAkB,kBAAMxM,EPxFW,CACnCX,KAAM,6BOwFNoN,oBAAqB,SAAA5M,GAAO,OAAIG,EJjFD,SAAAH,GAAO,MAAK,CAC3CR,KAAM,yBACNC,QAASO,GI+EgCI,CAA4BJ,QAG1D3B,EA7FD,SAAApE,GAAU,IAAD,MAEnB0H,qBAAU,WACN1H,EAAMyS,WAAW,GACjBzS,EAAMsF,aAAa,qBACnBtF,EAAM0S,qBACR,IAOF,OACQ,kBAAC/I,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKpJ,UAAU,OACX,2BAAOsJ,QAAQ,oBAAf,cACA,4BAAQtJ,UAAU,mBAAmBuJ,SAV7B,SAAAjC,GACF,yBAAlBA,EAAEzG,OAAOoE,OACT1F,EAAM2S,oBAAoB5K,EAAEzG,OAAOoE,SASnB,yDADJ,UAGQ1F,EAAMoN,gBAHd,aAGQ,EAAgBrM,KAAI,SAAAgF,GAAO,OACvB,4BAAQL,MAAOK,EAAQD,IAAKC,EAAQiC,YAMxD,kBAAC4B,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKpJ,UAAU,OAEXT,EAAMwS,OAEN,kBAAC,KAAD,CACI/R,UAAU,SACV8E,KAAK,WACLpC,MAAM,UACN8J,OAAQ,IACRC,MAAO,MAIY,IAAvB,UAAAlN,EAAMiQ,aAAN,eAAa5H,QACb,uBAAGhF,MAAO,CAACF,MAAO,SAAlB,wCACA,kBAACwJ,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,GACrB,+BACI,4BACI,yCACA,wCACA,8CAGR,yCAEQ7M,EAAMiQ,aAFd,aAEQ,EAAalP,KAAI,SAAA6P,GAAI,OACjB,4BACI,4BAAKA,EAAK5I,MACV,4BAAK4I,EAAKgC,WAAWC,MAAM,KAAK,GAAGlN,QAAQ,IAAK,MAChD,wBAAItC,MAAO,CAACoK,UAAW,WACnB,uBAAGnM,OAAO,SAASwR,KAAMlC,EAAKC,MAC1B,4BAAQpQ,UAAU,mBACd,kBAAC,IAAD,CAAiBL,KAAM2S,sBCzDhE,YAAA/S,GAAK,OAChB,kBAACgT,EAAA,EAAD,CAAWC,OAAK,EAACxS,UAAWC,IAAW,UAAW,CAAC,UAAWV,EAAMa,UACtE,kBAAC,EAAD,CAAQuC,OAAQpD,EAAMoD,SACtB,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAgB8P,OAAK,EAACrC,KAAK,IAAI9L,UAAW,iBAAM,4BAChD,kBAAC,EAAD,CAAgBmO,OAAK,EAACrC,KAAK,uBAAuB9L,UAAWoO,IAC7D,kBAAC,EAAD,CAAgBD,OAAK,EAACrC,KAAK,aAAa9L,UAAWqO,KACnD,kBAAC,EAAD,CAAgBF,OAAK,EAACrC,KAAK,yBAAyB9L,UAAWsO,KAC/D,kBAAC,EAAD,CAAgBH,OAAK,EAACrC,KAAK,gBAAgB9L,UAAWuO,KACtD,kBAAC,EAAD,CAAgBJ,OAAK,EAACrC,KAAK,kBAAkB9L,UAAWwO,QC0B5CC,I,cAxCD,SAAAxT,GAAU,IAAD,EAEOC,mBAAS,IAFhB,mBAEZwT,EAFY,KAELC,EAFK,OAGazT,mBAAS,IAHtB,mBAGZ2H,EAHY,KAGF+L,EAHE,OAI6B1T,oBAAS,GAJtC,mBAIZ2T,EAJY,KAIMC,EAJN,OAKS5T,oBAAS,GALlB,mBAKZuS,EALY,KAKJsB,EALI,KAsBnB,OACI,kBAACd,EAAA,EAAD,KACI,kBAACrJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKnJ,UAAU,kBAAkBoJ,GAAI,CAACC,KAAM,EAAGiK,OAAQ,IACnD,0BAAMrK,SAnBF,SAAA3B,GAChB+L,GAAU,GACV/L,EAAEmB,iBAEF,IAAI9G,EAAO,CAACqR,MAAOA,EAAO7L,SAAUA,GAEpC9D,EAAKkQ,MAAM5R,GACP,kBAAMpC,EAAM0N,QAAQC,KAAK,QACzB,WACIkG,GAAoB,GACpBC,GAAU,QAUF,4BAAI,kBAAC,IAAD,CAAiB1T,KAAMmD,MAA3B,YACA,2BAAOyG,SAAU,SAAAjC,GAAC,OAAI2L,EAAS3L,EAAEzG,OAAOoE,QAAQH,KAAK,QAAQ9E,UAAU,eAAeuH,KAAK,OAAOkC,UAAQ,IAC1G,2BAAOF,SAAU,SAAAjC,GAAC,OAAI4L,EAAY5L,EAAEzG,OAAOoE,QAAQH,KAAK,WAAW9E,UAAU,eAAeuH,KAAK,WAAWkC,UAAQ,IAClHsI,EAAS,kBAAC,KAAD,CAAQjN,KAAK,WAAWpC,MAAM,UAAU8J,OAAQ,GAAIC,MAAO,KAAS,GAC7E0G,EAAmB,6DAAqC,GAC1D,kBAACjP,EAAA,EAAD,CAAQlE,UAAU,gBAAlB,iBChCT,cAAO,IAAD,EAEOR,oBAAS,GAFhB,mBAEZY,EAFY,KAEJoT,EAFI,KAGb7Q,EAAS,kBAAM6Q,GAASpT,IAE9B,OACE,kBAAC,IAAD,KACF,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOqS,OAAK,EAACrC,KAAK,SAAS9L,UAAWyO,KACtC,yBAAK/S,UAAU,eACd,kBAAC,EAAD,CAAS2C,OAAQA,EAAQvC,OAAQA,IACjC,kBAACqT,GAAD,CAAS9Q,OAAQA,EAAQvC,OAAQA,QCPhBsT,QACa,cAA7BnQ,OAAOC,SAASmQ,UAEe,UAA7BpQ,OAAOC,SAASmQ,UAEhBpQ,OAAOC,SAASmQ,SAASC,MACvB,2D,aClBFC,GAAY,CACdhQ,UAAW,4BAeAC,GAZK,WAAgC,IAA/Ba,EAA8B,uDAAtBkP,GAAWC,EAAW,uCAC/C,OAAQA,EAAOhP,MACX,IAAK,iBACD,MAAO,CACLjB,UAAWiQ,EAAO/O,SAGxB,QACI,OAAOJ,ICZbkP,GAAY,GAyDH/I,GAvDS,WAAyB,IAAxBnG,EAAuB,uDAAf,GAAImP,EAAW,uCAE5C,OAAOA,EAAOhP,MAEV,IAAK,kBACD,IAAIiP,EAAmBF,GAAUlH,SAASkF,QAAO,SAAAvM,GAE7C,OADWA,EAAQiC,KAAKyM,oBACZC,SAASH,EAAO/O,QAAQiP,wBAExC,OAAO,2BACArP,GADP,IAEIgI,SAAUoH,IAGlB,IAAK,eAED,OADAF,GAAUlH,SAAWmH,EAAO/O,QACrB,2BACAJ,GADP,IAEIgI,SAAUmH,EAAO/O,UAGzB,IAAK,cACD,OAAO,2BACAJ,GADP,IAEIW,QAASwO,EAAO/O,UAGxB,IAAK,2BACD,OAAO,2BACAJ,GADP,IAEIsH,aAAc6H,EAAO/O,UAG7B,IAAK,sBACD,OAAO,2BACAJ,GADP,IAEImJ,eAAgBgG,EAAO/O,UAG/B,IAAK,iBACD,IAAImP,EAAoBvP,EAAMgI,SAASkF,QAAO,SAAAvM,GAC1C,OAAOA,EAAQD,IAAMyO,EAAO/O,QAAQM,MAGxC,OADAwO,GAAUlH,SAAWuH,EACd,2BACAvP,GADP,IAEIgI,SAAUuH,EACVjS,OAAQ6R,EAAO/O,QAAQoP,aAAalS,SAG5C,QAAS,OAAO0C,ICpDlBkP,GAAY,CACdpC,WAAW,EACXV,SAAS,EACTvP,OAAO,GAmDI8O,GAhDa,WAAgC,IAA/B3L,EAA8B,uDAAtBkP,GAAWC,EAAW,uCAEvD,OAAQA,EAAOhP,MAEX,IAAK,6BACD,OAAO,2BACAH,GADP,IAEI8M,WAAW,IAGnB,IAAK,2BACD,OAAO,2BACA9M,GADP,IAEIoM,SAAS,EACTU,WAAW,IAGnB,IAAK,2BACD,OAAO,2BACA9M,GADP,IAEInD,OAAO,EACPiQ,WAAW,IAGnB,IAAK,mBAED,OADAoC,GAAU5H,aAAe6H,EAAO/O,QACzB,2BACAJ,GADP,IAEIsH,aAAc6H,EAAO/O,UAG7B,IAAK,qBACD,IAAIqP,EAAwBzP,EAAMsH,aAAa4F,QAAO,SAAAvM,GAClD,OAAOA,EAAQD,IAAMyO,EAAO/O,QAAQM,MAGxC,OADAwO,GAAU5H,aAAemI,EAClB,2BACAzP,GADP,IAEIsH,aAAcmI,EACdnS,OAAQ6R,EAAO/O,QAAQoP,aAAalS,SAG5C,QACI,OAAO0C,ICjDb0P,GAAY,CACdtC,QAAQ,GAgCGtC,GA7BM,WAAgC,IAA/B9K,EAA8B,uDAAtB0P,GAAWP,EAAW,uCAEhD,OAAQA,EAAOhP,MAEX,IAAK,qBACD,OAAO,2BACAH,GADP,IAEIsM,cAAe6C,EAAO/O,UAG9B,IAAK,aACD,OAAO,2BACAJ,GADP,IAEIoN,QAAQ,IAGhB,IAAK,YACD,OAAO,2BACApN,GADP,IAEI6K,MAAOsE,EAAO/O,QACdgN,QAAQ,IAGhB,QACI,OAAOpN,ICtBJ2P,gBAAiB,CAC5B7E,gBACA3L,eACAgH,mBACAwF,yB,6BCPazD,I,YAcA0H,I,YASA7C,I,YASA8C,I,YASA1H,IAzCV,SAAUD,GAAciH,GAAxB,uEACgB,OADhB,SACsBW,aAAK7L,EAAuBkL,EAAO/O,SADzD,OAGH,OAFIoP,EADD,gBAGGO,aAAI,CACN5P,KAAM,sBACNC,QAASoP,EAAaxS,OALvB,OAQH,OARG,SAQG+S,aAAI,CACN5P,KAAM,eACNC,QAASoP,EAAaxS,KAAKA,OAV5B,wCAcA,SAAU4S,KAAV,uEACgB,OADhB,SACsBE,aAAK7L,GAD3B,OAGH,OAFIuL,EADD,gBAGGO,aAAI,CACN5P,KAAM,eACNC,QAASoP,EAAaxS,OALvB,wCASA,SAAU+P,GAAkBoC,GAA5B,uEACgB,OADhB,SACsBW,aAAK7L,EAAmCkL,EAAO/O,SADrE,OAGH,OAFIoP,EADD,gBAGGO,aAAI,CACN5P,KAAM,2BACNC,QAASoP,EAAaxS,OALvB,wCASA,SAAU6S,GAAKV,GAAf,uEACgB,OADhB,SACsBW,aAAK7L,EAAsBkL,EAAO/O,SADxD,OAGH,OAFIoP,EADD,gBAGGO,aAAI,CACN5P,KAAM,cACNC,QAASoP,EAAaxS,OALvB,wCASA,SAAUmL,GAAcgH,GAAxB,uEACgB,OADhB,SACsBW,aAAK7L,EAA+BkL,EAAO/O,SADjE,OAGH,OAFIoP,EADD,gBAGGO,aAAI,CACN5P,KAAM,iBACNC,QAAS,CAACoP,aAAcA,EAAc9O,GAAIyO,EAAO/O,WALlD,wCC1CP,IAKe,GALE,kBAAMjE,EAAIqE,IAAI,kBAKhB,GAHW,SAAAE,GAAE,OAAIvE,EAAIyE,OAAJ,wBAA4BF,KAG7C,GAJD,SAAAG,GAAI,OAAI1E,EAAIgB,KAAK,gBAAiB0D,IAIjC,GAFA,SAAAA,GAAI,OAAI1E,EAAI4T,IAAJ,wBAAyBlP,EAAKH,IAAMG,I,YCF1C+K,I,YA+BAC,I,YA+BA+D,I,YAQA5C,IAtEV,SAAUpB,GAAiBuD,GAA3B,uEAEH,OAFG,SAEGY,aAAI,CACN5P,KAAM,+BAHP,OAOoB,OAPpB,kBAO0B2P,aAAKE,GAA2Bb,EAAO/O,SAPjE,UAS6B,OAFxBoP,EAPL,QASkBlS,OATlB,iBAUK,OAVL,SAUWyS,aAAI,CACN5P,KAAM,2BACNC,QAASoP,IAZlB,+BAgBK,OAhBL,UAgBWO,aAAI,CACN5P,KAAM,2BACNC,QAASoP,IAlBlB,gCAuBC,OAvBD,oCAuBOO,aAAI,CACN5P,KAAM,2BACNC,QAAQ,EAAD,KAzBZ,uDA+BA,SAAUyL,GAAkBsD,GAA5B,uEAEH,OAFG,SAEGY,aAAI,CACN5P,KAAM,+BAHP,OAOoB,OAPpB,kBAO0B2P,aAAKE,GAA4Bb,EAAO/O,SAPlE,UAS6B,OAFxBoP,EAPL,QASkBlS,OATlB,iBAUK,OAVL,SAUWyS,aAAI,CACN5P,KAAM,2BACNC,QAASoP,IAZlB,+BAgBK,OAhBL,UAgBWO,aAAI,CACN5P,KAAM,2BACNC,QAASoP,IAlBlB,gCAuBC,OAvBD,oCAuBOO,aAAI,CACN5P,KAAM,2BACNC,QAAQ,EAAD,KAzBZ,uDA+BA,SAAUwP,KAAV,uEACgB,OADhB,SACsBE,aAAKE,IAD3B,OAEH,OADIR,EADD,gBAEGO,aAAI,CACN5P,KAAM,mBACNC,QAASoP,EAAaxS,KAAKA,OAJ5B,wCAQA,SAAUgQ,GAAkBmC,GAA5B,uEACgB,OADhB,SACsBW,aAAKE,GAAuCb,EAAO/O,SADzE,OAEH,OADIoP,EADD,gBAEGO,aAAI,CACN5P,KAAM,qBACNC,QAAS,CAAEoP,aAAcA,EAAc9O,GAAIyO,EAAO/O,WAJnD,wCCvEP,IAWe,GAXE,kBAAMjE,EAAIqE,IAAI,kBAWhB,GAVA,SAAAqK,GAAK,OAAI1O,EAAIgB,KAAK,uBAAwB0N,IAU1C,GANA,SAAClK,EAASkK,GACrBA,EAAM0B,SAAQ,SAAAf,GACVrP,EAAIgB,KAAJ,uBAAyBqO,EAAK9K,GAA9B,qBAA6CC,QAItC,GARQ,SAAAA,GAAO,OAAIxE,EAAIqE,IAAJ,iCAAkCG,K,YCFnDsP,I,YAmBA5C,I,YAWA6C,IA9BV,SAAUD,GAAOd,GAAjB,uEAEH,OAFG,SAEGY,aAAI,CACN5P,KAAM,wBAHP,OAMgB,OANhB,SAMsB2P,aAAKK,GAAqBhB,EAAO/O,QAAQyK,OAN/D,OAOH,OADI2E,EAND,gBAOGM,aAAKK,GAAqBhB,EAAO/O,QAAQO,QAAS6O,EAAaxS,MAPlE,UAUyB,MAAxBwS,EAAalS,OAVd,iBAWC,OAXD,UAWOyS,aAAI,CAAE5P,KAAM,sBAXnB,gCAcC,OAdD,UAcO4P,aAAI,CAAE5P,KAAM,sBAdnB,yCAmBA,SAAUkN,KAAV,uEAEgB,OAFhB,SAEsByC,aAAKK,IAF3B,OAIH,OAFIX,EAFD,gBAIGO,aAAI,CACN5P,KAAM,YACNC,QAASoP,EAAaxS,OANvB,wCAWA,SAAUkT,GAAef,GAAzB,uEAEH,OAFG,SAEGY,aAAI,CAAE5P,KAAM,eAFf,OAIgB,OAJhB,SAIsB2P,aAAKK,GAA6BhB,EAAO/O,SAJ/D,OAMH,OAFIoP,EAJD,gBAMGO,aAAI,CACN5P,KAAM,YACNC,QAASoP,EAAaxS,OARvB,wC,gBC5BUoT,IAAV,SAAUA,KAAV,iEACH,OADG,SACGC,aAAI,CACNC,aAAU,sBAAuBC,IACjCD,aAAU,0BAA2BC,IACrCD,aAAU,qBAAsBC,IAChCD,aAAU,sBAAuBC,IACjCD,aAAU,kCAAmCC,IAC7CD,aAAU,0BAA2BE,IACrCF,aAAU,2BAA4BE,IACtCF,aAAU,0BAA2BE,IACrCF,aAAU,8BAA+BE,IACzCF,aAAU,eAAgBG,IAC1BH,aAAU,cAAeG,IACzBH,aAAU,yBAA0BG,MAbrC,wCCMP,IAAMC,GAAiBC,eACjB1R,GAAQ2R,aAAYC,GAAaC,aAAgBJ,KAEvDA,GAAeK,IAAIX,IAEnBY,IAASnR,OACL,kBAAC,IAAD,CAAUZ,MAAOA,IACf,kBAAC,GAAD,OAEJuG,SAASyL,eAAe,SZ+GlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhU,MAAK,SAAAiU,GACJA,EAAaC,gBAEd7T,OAAM,SAAAZ,GACLc,QAAQd,MAAMA,EAAMsH,a","file":"static/js/main.af10aedd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport  { Collapse, NavItem, NavLink } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classNames from 'classnames'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SubMenu = props => {\r\n  \r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const toggleNavbar = () => setCollapsed(!collapsed)\r\n  const { icon, title, items } = props\r\n \r\n  return (\r\n    <div>\r\n      <NavItem onClick={toggleNavbar} className={classNames({'menu-open': !collapsed})}>\r\n        <NavLink className=\"dropdown-toggle\">\r\n          <FontAwesomeIcon icon={icon} className=\"mr-2\"/>{title}\r\n        </NavLink>\r\n      </NavItem>\r\n      <Collapse isOpen={!collapsed} navbar className={classNames('items-menu',{'mb-1': !collapsed})}>\r\n        {items.map((item, index) => (\r\n            <NavItem key={index} className=\"pl-4\">\r\n              <NavLink tag={Link} to={item.target}>\r\n                {item.title}\r\n              </NavLink>\r\n            </NavItem>\r\n            ))}\r\n      </Collapse>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubMenu","import axios from 'axios'\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'https://appointments12.herokuapp.com/api/' \r\n\r\n})\r\n\r\napi.interceptors.request.use(\r\n    request => {\r\n        request.headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'Authorization': \"Bearer \" + localStorage.getItem('access_token'),\r\n        }\r\n      return request\r\n    },\r\n    error => error\r\n)\r\n\r\nexport default api\r\n","import api from './services/api'\r\n\r\nclass Auth{\r\n    constructor(props){\r\n        this.authenticated = false\r\n    }\r\n\r\n    login(data, callBack, elseCallBack){\r\n\r\n        api.post('/auth/login', data)\r\n            .then(response => {\r\n                if(response.status === 200){\r\n                    localStorage.setItem(\"access_token\", response.data.access_token)\r\n                    this.authenticated = true\r\n                    \r\n                    callBack()\r\n                }\r\n                else{\r\n                    this.authenticated = false\r\n                    elseCallBack()\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.authenticated = false\r\n                elseCallBack()\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n    logout(callBack){\r\n        this.authenticated = false\r\n        callBack()\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated\r\n    }\r\n}\r\n\r\nexport default new Auth()","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faPowerOff, faHospitalAlt, faUserMd, faUsers, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport SubMenu from './SubMenu'\r\nimport { NavItem, NavLink, Nav } from 'reactstrap'\r\nimport classNames from 'classnames'\r\nimport auth from '../../auth'\r\nimport \"./style.scss\"\r\n\r\nconst SideBar = props => (\r\n\t<div className={classNames('sidebar', {'is-open': props.isOpen})}>\r\n\t\t<div className=\"sidebar-header\">\r\n\t\t\t<span \r\n\t\t\t\tcolor=\"info\" \r\n\t\t\t\tonClick={props.toggle} \r\n\t\t\t\tstyle={{color: '#fff'}}\r\n\t\t\t>\r\n\t\t\t\t<FontAwesomeIcon icon={faTimesCircle} />\r\n\t\t\t</span>\r\n\t\t\t<h3 className=\"sidebar-title\">\r\n\t\t\t\t<FontAwesomeIcon icon={faHospitalAlt} /> \r\n\t\t\t\tConsultas\r\n\t\t\t</h3>\r\n\t\t</div>\r\n\t\t<div className=\"side-menu\">\r\n\t\t\t<Nav \r\n\t\t\t\tstyle={{cursor: 'pointer'}} \r\n\t\t\t\tvertical \r\n\t\t\t\tclassName=\"list-unstyled pb-3\"\r\n\t\t\t>\r\n\t\t\t\t<p>Bem vindo Usuário</p>\r\n\t\t\t\t<NavItem>\r\n\t\t\t\t\t<NavLink to=\"/\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faHome} className=\"mr-2\"/>Home\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</NavItem>\r\n\t\t\t\t<SubMenu \r\n\t\t\t\t\ttitle=\"Pacientes\" \r\n\t\t\t\t\ticon={faUsers}\r\n\t\t\t\t\titems={submenus[0]}\r\n\t\t\t\t/>\r\n\t\t\t\t<SubMenu \r\n\t\t\t\t\ttitle=\"Atendimentos\" \r\n\t\t\t\t\ticon={faUserMd} \r\n\t\t\t\t\titems={submenus[1]}\r\n\t\t\t\t/>\r\n\t\t\t\t<NavItem>\r\n\t\t\t\t\t<NavLink onClick={() => auth.logout(() => window.location.reload(false))}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faPowerOff} className=\"mr-2\"/>Sair\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</NavItem>\r\n\t\t\t</Nav>\t\t\t\t\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nconst submenus = [\r\n[\r\n\t{\r\n\ttitle: \"Cadastrar pacientes\",\r\n\ttarget: \"cadastrar-pacientes\"\r\n\t},\r\n\t{\r\n\ttitle: \"Gerenciar pacientes\",\r\n\ttarget: \"pacientes\",\t\t\t\t\r\n\t}\r\n],\r\n[\r\n\t{\r\n\ttitle: \"Novo\",\r\n\ttarget: \"cadastrar-atendimento\",\t\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Atendimentos\",\r\n\ttarget: \"atendimentos\",\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Material de Apoio\",\r\n\ttarget: \"material-apoio\",\t\t\t\t\r\n\t}\r\n]\r\n]\r\n\t\r\n\r\nexport default SideBar","import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { Navbar, Button, NavbarToggler, Collapse, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport './style.scss'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NavBar = props => {\r\n  return (\r\n    <Navbar \r\n      color=\"light\" \r\n      light \r\n      className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\" \r\n      expand=\"md\"\r\n    >\r\n      <Button color=\"info\" onClick={props.toggle}>\r\n        <FontAwesomeIcon icon={faBars}/>\r\n      </Button>\r\n\r\n      <Nav className=\"m-auto\" navbar>\r\n        <NavItem>\r\n          <div className=\"page-title\">\r\n            <h1 className=\"title\">\r\n              {props.pageTitle}\r\n            </h1>\r\n          </div>\r\n        </NavItem>\r\n      </Nav>\r\n\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return{\r\n    pageTitle: store.pageReducer.pageTitle\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavBar)","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return(\r\n        <Route {...rest} render={\r\n            (props) => {\r\n                if(auth.isAuthenticated()){\r\n                    return <Component {...props} />\r\n                }else{\r\n                    return <Redirect to={\r\n                        {\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                from: props.location\r\n                            }\r\n                        }\r\n                    } />\r\n                }\r\n            }\r\n        }/>\r\n    )\r\n}","export const setPageTitle = title => ({\r\n    type: 'SET_PAGE_TITLE',\r\n    payload: title\r\n})","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') \r\n}\r\n\r\nexport const phoneMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '')\r\n        .replace(/(\\d{0})(\\d)/, '$1($2') \r\n        .replace(/(\\d{2})(\\d)/, '$1) $2')\r\n}\r\n\r\nexport const currencyMask = val => {\r\n    let value = val\r\n        .replace(/\\D/g, '')\r\n        .replace(/^0+/g, '')\r\n\r\n    if(value.length === 1){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{1})$/g, \"0,0$1\")\r\n    }\r\n    else if(value.length === 2){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \"0,$1\")\r\n    }\r\n    else{\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \",$1\")\r\n    }\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/patients?page=-1')\r\nconst fetch = page => api.get(`/patients?page=${page}`)\r\nconst find = id => api.get(`/patients/${id}`)\r\nconst store = body => api.post('/patients', body)\r\nconst deletePatient = id => api.delete(`/patients/${id}`)\r\nconst fetchAppointments = patient => api.get(`/appointments/patient/${patient}`)\r\n\r\nexport default { \r\n    fetchAll,\r\n    fetch,\r\n    find,\r\n    fetchAppointments,\r\n    deletePatient,\r\n    store\r\n}","import React, { useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport { cpfMask, phoneMask, currencyMask } from '../Mask/index'\r\nimport patientsService from \"../../services/patientsService\"\r\nimport Swal from \"sweetalert2\"\r\nimport axios from \"axios\"\r\n\r\nconst StorePatients = props => {\r\n\r\n    const [cpf, setCpf] = useState(\"\")\r\n    const [cep, setCep] = useState(\"\")\r\n    const [foreign, setForeign] = useState(false)\r\n    const [emergencyContact, setEmergencyContact] = useState(\"\")\r\n    const [value, setValue] = useState(\"R$ 0,00\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [mobilephone, setMobilephone] = useState(\"\")\r\n    const [isCepValid, setIsCepValid] = useState(false)\r\n    const [dateColor, setDateColor] = useState(\"form-control input nascimento\")\r\n    const [body, setBody] = useState({address: {state: \"AC\"}, user: {role_id: 1, gender_id: 1}})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Cadastrar Paciente\")\r\n    })\r\n\r\n    const handleCpf = e => {\r\n        setCpf(cpfMask(e.target.value))\r\n\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleVerifyPasswords = () => {\r\n        return body.user.password === body.user.password_confirmation\r\n    }\r\n\r\n    const handleChangeCep = e => {\r\n        let cep = e.target.value.replace(/[^0-9]/g, '')\r\n        setCep(cep)\r\n\r\n        if (cep.length === 8)\r\n            axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n                .then(res => {\r\n                    if (!res.data.erro) {\r\n                        setIsCepValid(true)\r\n                        document.querySelector(\"#street\").value = res.data.logradouro\r\n                        document.querySelector(\"#neighborhood\").value = res.data.bairro\r\n                        document.querySelector(\"#state\").value = res.data.uf\r\n                        document.querySelector(\"#city\").value = res.data.localidade\r\n                        setBody({\r\n                            ...body,\r\n                            address: {\r\n                                ...body.address,\r\n                                city: res.data.localidade,\r\n                                cep: cep,\r\n                                street: res.data.logradouro,\r\n                                state: res.data.uf,\r\n                                neighborhood: res.data.bairro\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        setIsCepValid(false)\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"Um erro ocorreu ao buscar o CEP: \", err))\r\n        else\r\n            setBody({\r\n                ...body,\r\n                address: {\r\n                    ...body.address,\r\n                    cep: cep\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleDateChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n\r\n        setDateColor(\"form-control input\")\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangePhone = e => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n\r\n        if (!foreign) {\r\n            value = value.replace(/[^0-9]/g, '')\r\n\r\n            if (name == \"telephone\")\r\n                setPhone(phoneMask(value))\r\n            else\r\n                setMobilephone(phoneMask(value))\r\n        } else {\r\n            if (name == \"telephone\")\r\n                setPhone(value)\r\n            else\r\n                setMobilephone(value)\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeUser = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (name == \"value\") {\r\n            setValue(currencyMask(value))\r\n            value = value.replace(/[^0-9]/g, '')\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            user: {\r\n                ...body.user,\r\n                name: body.name,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeAddress = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            address: {\r\n                ...body.address,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePlusInformationChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (!foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(phoneMask(value))\r\n        if (foreign && name == \"emergency_contact\")\r\n            setEmergencyContact(value)\r\n\r\n        setBody({\r\n            ...body,\r\n            plusInformation: {\r\n                ...body.plusInformation,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleVerifyDate = () => {\r\n        let date = new Date()\r\n        let birthday = new Date(body.birthday)\r\n        let age = date.getFullYear() - birthday.getFullYear()\r\n        return !(age > 130 || age < 0)\r\n    }\r\n\r\n    const handleFormSubmit = async e => {\r\n        e.preventDefault()\r\n        if(value === \"R$ 0,00\")\r\n            return Swal.fire(\"Por favor informe o valor da consulta.\")\r\n        if (handleVerifyPasswords() && handleVerifyDate()) {\r\n            await setBody({\r\n                ...body,\r\n                foreign: foreign\r\n            })\r\n            await patientsService.store(body)\r\n                .then(() => {\r\n                    Swal.fire({\r\n                        title: \"Paciente cadastrado com sucesso!\",\r\n                        icon: \"success\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    if(e.message == \"Request failed with status code 422\"){\r\n                        return Swal.fire({\r\n                            title: \"Email já cadastrado.\",\r\n                            text: \"Por favor tente com um endereço de email diferente.\",\r\n                            icon: \"warning\",\r\n                            confirmButtonColor: \"#1492A5\"\r\n                        })\r\n                    }\r\n                    Swal.fire({\r\n                        title: \"Ocorreu um erro.\",\r\n                        text: \"Por favor tente novamente mais tarde.\",\r\n                        icon: \"warning\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n        } else {\r\n            if (!handleVerifyPasswords())\r\n                return Swal.fire(\"As senhas divergem.\")\r\n            if (!handleVerifyDate())\r\n                return Swal.fire(\"Por favor informe uma data de nascimento válida.\")\r\n        }\r\n    }\r\n\r\n    const handleForeignChange = () => {\r\n        setPhone(\"\")\r\n        setMobilephone(\"\")\r\n        setEmergencyContact(\"\")\r\n\r\n        if (!foreign)\r\n            setForeign(true)\r\n        else\r\n            setForeign(false)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"new-password\" onSubmit={handleFormSubmit}>\r\n            <Row>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados do paciente\r\n                        </h1>\r\n                        <Row>\r\n                            <Col md={8}>\r\n                                <label htmlFor=\"name\">Nome: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"telephone\">Telefone Fixo: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"telephone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={phone}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"phone\">Celular: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"phone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={mobilephone}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"cpf\">CPF: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cpf\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleCpf}\r\n                                    maxLength=\"14\"\r\n                                    placeholder=\"___.___.___-__\"\r\n                                    value={cpf}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"rg\">RG: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"rg\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"birthday\">Data de Nascimento: </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    name=\"birthday\"\r\n                                    className={dateColor}\r\n                                    placeholder=\"Data de Nascimento\"\r\n                                    onChange={handleDateChange}\r\n                                    onKeyDown={handleDateChange}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Gênero\r\n                            <div className=\"genders\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Masculino\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                        />\r\n                                    Feminino\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <input\r\n                                    className=\"foreignCheckbox\"\r\n                                    name=\"foreign\"\r\n                                    type=\"checkbox\"\r\n                                    checked={foreign}\r\n                                    onChange={handleForeignChange}\r\n                                />\r\n                                <span className=\"foreignLabel\">\r\n                                    Estrangeiro?\r\n                                </span>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Endereço\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cep\">CEP: </label>\r\n                                <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeCep}\r\n                                    type=\"text\"\r\n                                    name=\"cep\"\r\n                                    className=\"form-control input\"\r\n                                    value={cep}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"street\">Logradouro: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"street\"\r\n                                    type=\"text\"\r\n                                    name=\"street\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Rua, AV, etc...\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"complement\">Complemento: </label>\r\n                                <input\r\n                                    id=\"complement\"\r\n                                    type=\"text\"\r\n                                    name=\"complement\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleChangeAddress}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"neighborhood\">Bairro: </label>\r\n                                <input\r\n                                    id=\"neighborhood\"\r\n                                    type=\"text\"\r\n                                    name=\"neighborhood\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                    onChange={handleChangeAddress}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={3}>\r\n                                <label htmlFor=\"numero\">Número: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"number\"\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    name=\"number\"\r\n                                    className=\"form-control input\"\r\n                                />\r\n                            </Col>\r\n                            <Col md={3}>\r\n                                {\r\n                                    foreign ? (\r\n                                        <>\r\n                                            <label htmlFor=\"state\">Estado: </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"state\"\r\n                                                id=\"state\"\r\n                                                className=\"form-control input\"\r\n                                                disabled={isCepValid}\r\n                                                onChange={handleChangeAddress}\r\n                                            />\r\n                                        </>\r\n                                    )\r\n                                        : (\r\n                                            <>\r\n                                                <label htmlFor=\"state\">UF: </label>\r\n                                                <select\r\n                                                    name=\"state\"\r\n                                                    id=\"state\"\r\n                                                    className=\"form-control input\"\r\n                                                    disabled={isCepValid}\r\n                                                    onChange={handleChangeAddress}\r\n                                                >\r\n                                                    <option value=\"AC\">AC</option>\r\n                                                    <option value=\"AL\">AL</option>\r\n                                                    <option value=\"AP\">AP</option>\r\n                                                    <option value=\"AM\">AM</option>\r\n                                                    <option value=\"BA\">BA</option>\r\n                                                    <option value=\"CE\">CE</option>\r\n                                                    <option value=\"DF\">DF</option>\r\n                                                    <option value=\"ES\">ES</option>\r\n                                                    <option value=\"GO\">GO</option>\r\n                                                    <option value=\"MA\">MA</option>\r\n                                                    <option value=\"MT\">MT</option>\r\n                                                    <option value=\"MS\">MS</option>\r\n                                                    <option value=\"MG\">MG</option>\r\n                                                    <option value=\"PA\">PA</option>\r\n                                                    <option value=\"PB\">PB</option>\r\n                                                    <option value=\"PR\">PR</option>\r\n                                                    <option value=\"PE\">PE</option>\r\n                                                    <option value=\"PI\">PI</option>\r\n                                                    <option value=\"RJ\">RJ</option>\r\n                                                    <option value=\"RN\">RN</option>\r\n                                                    <option value=\"RS\">RS</option>\r\n                                                    <option value=\"RO\">RO</option>\r\n                                                    <option value=\"RR\">RR</option>\r\n                                                    <option value=\"SC\">SC</option>\r\n                                                    <option value=\"SP\">SP</option>\r\n                                                    <option value=\"SE\">SE</option>\r\n                                                    <option value=\"TO\">TO</option>\r\n                                                </select>\r\n                                            </>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"city\">Municipio: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeAddress}\r\n                                    name=\"city\"\r\n                                    id=\"city\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Informações adicionais\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_contact\">Contato de Emergência: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_contact\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={emergencyContact}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_name\">Nome: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_name\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"observation\">Observação: </label>\r\n                                <textarea\r\n                                    className=\"form-control input\"\r\n                                    name=\"observation\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                >\r\n                                </textarea>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Valor da Sessão\r\n                    </h1>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"value\">Valor: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeUser}\r\n                                    className=\"form-control input\"\r\n                                    name=\"value\"\r\n                                    value={value}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Deseja recibo?\r\n                            <div className=\"receipt\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados de Acesso ao Sistema\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"email\">Email: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"email\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password\">Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password_confirmation\">Repetir Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password_confirmation\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"role_id\">Hierarquia: </label>\r\n                                <select \r\n                                    className=\"form-control input\" \r\n                                    name=\"role\"\r\n                                >\r\n                                    <option value=\"1\">Admin</option>\r\n                                    <option value=\"1\">Médico</option>\r\n                                    <option value=\"2\">Paciente</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                Cadastro ativo?\r\n                            <div className=\"active\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: '100px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">Salvar dados</h1>\r\n                        <Button type=\"submit\">Salvar</Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(StorePatients)","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useState } from 'react'\r\nimport * as actions from '../../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst ModalExample = (props) => {\r\n\tconst { patientInfo, className } = props\r\n\r\n\tconst [modal, setModal] = useState(false)\r\n\tconst [nestedModal, setNestedModal] = useState(false)\r\n\tconst [closeAll, setCloseAll] = useState(false)\r\n\r\n\tconst toggle = () => setModal(!modal)\r\n\r\n\tconst toggleNested = () => {\r\n\t\tprops.fetchPatientAppointments(patientInfo.id)\r\n\t\tsetNestedModal(!nestedModal)\r\n\t\tsetCloseAll(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button className=\"edit-button\" style={{border: '#17a2b8'}} onClick={toggle}>\r\n\t\t\t\t<FontAwesomeIcon icon={faClipboard} /></Button>\r\n\t\t\t<Modal isOpen={modal} toggle={toggle} className={className}>\r\n\t\t\t\t<ModalHeader toggle={toggle}>\r\n\t\t\t\t\t<h4 className=\"patient-record-title\">\r\n\t\t\t\t\t\tFICHA DO PACIENTE <FontAwesomeIcon icon={faClipboard} />\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</ModalHeader>\r\n\t\t\t\t<ModalBody>\r\n\t\t\t\t<b>Nome:</b> {patientInfo?.name} <br />\r\n\t\t\t\t<b>Data de Nascimento:</b> {patientInfo?.birthday} <br />\r\n\t\t\t\t<b>Telefone:</b> {patientInfo?.phone} <br />\r\n\t\t\t\t<b>CPF:</b> {patientInfo?.cpf} <br />\r\n\t\t\t\t<b>RG:</b> {patientInfo?.rg} <br />\r\n\t\t\t\t<Modal isOpen={nestedModal} toggle={toggleNested} onClosed={closeAll ? toggle : undefined}>\r\n\t\t\t\t\t<ModalHeader>Atendimentos do Paciente</ModalHeader>\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tprops.patient.appointments ?\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t<Table responsive striped>\r\n\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Data: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Hora: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Resumo: </th>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t{props.patient.appointments?.map(appointment => (\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.date}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.time}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.abstract}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t<Loader \r\n\t\t\t\t\t\t\t\tclassName=\"loader\" \r\n\t\t\t\t\t\t\t\ttype=\"TailSpin\" \r\n\t\t\t\t\t\t\t\tcolor=\"#17A2B8\" \r\n\t\t\t\t\t\t\t\theight={100} \r\n\t\t\t\t\t\t\t\twidth={100} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleNested}>Fechar</Button>\r\n\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t</Modal>\r\n\t\t\t\t</ModalBody>\r\n\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleNested}>Atendimentos</Button>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggle}>Fechar</Button>\r\n\t\t\t\t</ModalFooter>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tpatient: store.patientsReducer\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tfetchPatientAppointments: patientId => dispatch(actions.fetchPatientAppointments(patientId))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalExample)","export const filterPatients = patient => ({\r\n    type: \"FILTER_PATIENTS\",\r\n    payload: patient\r\n})\r\n\r\nexport const fetchPatients = page => ({\r\n    type: \"FETCH_PATIENTS_SAGA\",\r\n    payload: page\r\n})\r\n\r\nexport const fetchAllPatients = () => ({\r\n    type: \"FETCH_ALL_PATIENTS_SAGA\"\r\n})\r\n\r\nexport const fetchPatientInfo = id => ({\r\n    type: \"FETCH_PATIENT_INFO_SAGA\",\r\n    payload: id\r\n})\r\n\r\nexport const fetchPatientAppointments = id => ({\r\n    type: \"FETCH_PATIENT_APPOINTMENTS_SAGA\",\r\n    payload: id\r\n})\r\n\r\nexport const deletePatient = id => ({\r\n    type: \"DELETE_PATIENT_SAGA\",\r\n    payload: id\r\n})","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash, faUserMd } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col, Table, Pagination, PaginationItem, PaginationLink, Button } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport { Link } from 'react-router-dom'\r\nimport PatientRecordModal from \"./patientRecordModal\"\r\n\r\nconst Patients = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar pacientes\")\r\n        props.fetchPatients(1)\r\n    },[])\r\n\r\n    const handleInput = e => {\r\n        props.filterPatients(e.target.value)\r\n    }\r\n\r\n    const handlePaginationClick = async page => {\r\n        await props.fetchPatients(page)\r\n    }\r\n\r\n    const newAppointment = id => {\r\n        props.history.push({ \r\n            pathname: 'cadastrar-atendimento', \r\n            patient: id\r\n        })\r\n    }\r\n\r\n    const deletePatient = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este paciente?',\r\n            text: 'Todos os registros vinculados ao paciente serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n        .then(res => {\r\n            if(res.value)\r\n                props.deletePatient(id)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"box\">\r\n            <Row>\r\n                <Col md={12}>\r\n                    <label htmlFor=\"search\">Pesquisar:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control input\" \r\n                        placeholder=\"Digite aqui o nome do paciente...\" \r\n                        onChange={handleInput} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <>\r\n                {\r\n                    props.patients.patients ? (\r\n                        <Table striped responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>RG:</th>\r\n                                    <th>Celular:</th>\r\n                                    <th>Ficha:</th>\r\n                                    <th style={{textAlign: 'center'}}>Novo Atendimento:</th>\r\n                                    <th>Editar:</th>\r\n                                    <th>Deletar:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.patients.patients.map((patient, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{patient.name}</td>\r\n                                    <td>{patient.rg}</td>\r\n                                    <td>{patient.phone}</td>\r\n                                    <td><PatientRecordModal patientInfo={patient} /></td>\r\n                                    <td style={{textAlign: 'center'}}>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => newAppointment(patient.id) } \r\n                                            className=\"btn edit-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faUserMd} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Link to=\"/cadastrar-pacientes\">\r\n                                            <button className=\"btn edit-button\">\r\n                                                <FontAwesomeIcon icon={faEdit} />\r\n                                            </button>\r\n                                        </Link>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => deletePatient(patient.id) } \r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                            <Pagination aria-label=\"Page navigation example\">\r\n\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        first \r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.from)} \r\n                                    />\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        previous\r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.current_page - 1)} \r\n                                        disabled={props.patients.paginationData?.current_page == props.patients.paginationData?.from}\r\n                                    />\r\n                                </PaginationItem>\r\n                                \r\n                                {Array(props.patients.paginationData?.last_page).fill(1).map((el, i) =>\r\n                                    <PaginationItem key={i}>\r\n                                        <PaginationLink onClick={() => handlePaginationClick(i + 1)}>\r\n                                        {i + 1}\r\n                                        </PaginationLink>\r\n                                    </PaginationItem>\r\n                                )}\r\n                                \r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        next \r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.current_page + 1)}\r\n                                        disabled={props.patients.paginationData?.current_page == props.patients.paginationData?.last_page}\r\n                                    />\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        last\r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.last_page)} \r\n                                    />\r\n                                </PaginationItem>\r\n\r\n                            </Pagination>\r\n                        </Table>\r\n                    ) : (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                    )\r\n                }\r\n            </>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    filterPatients: patient => dispatch(actions.filterPatients(patient)),\r\n    fetchPatients: page => dispatch(actions.fetchPatients(page)),\r\n    deletePatient: id => dispatch(actions.deletePatient(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patients)","import React, { useMemo, useEffect } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n}\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n}\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n}\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n}\r\n\r\nconst StyledDropzone = props => {\r\n\r\n    const {\r\n        acceptedFiles,\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone()\r\n\r\n    useEffect(() => {\r\n        props.setSelectedFiles(acceptedFiles)\r\n    }, [acceptedFiles])\r\n\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept\r\n    ])\r\n\r\n    const files = acceptedFiles.map(file => (\r\n        <li key={file.path}>\r\n          {file.path} - {file.size} bytes\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <div {...getRootProps({ style })}>\r\n                <input {...getInputProps()} />\r\n                <p>Arraste e solte aqui os arquivos que deseja salvar.</p>\r\n                <FontAwesomeIcon icon={faUpload} />\r\n            </div>\r\n            <h5>Arquivos:</h5>\r\n            <ul>{files}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        files: store.filesReducer,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSelectedFiles: files => dispatch(actions.setSelectedFiles(files)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StyledDropzone)\r\n","export const setSelectedFiles = selectedFiles => ({\r\n    type: \"SET_SELECTED_FILES\",\r\n    payload: selectedFiles\r\n})\r\n\r\nexport const uploadFiles = (files, patient) => ({\r\n    type: \"UPLOAD_FILES\",\r\n    payload: {\r\n        files: files,\r\n        patient: patient\r\n    }\r\n})\r\n\r\nexport const fetchFiles = page => ({\r\n    type: \"FETCH_FILES\",\r\n    payload: page\r\n})\r\n\r\nexport const fetchFilesByPatient = patient => ({\r\n    type: \"FETCH_FILES_BY_PATIENT\",\r\n    payload: patient\r\n})","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Row, Col, Button } from \"reactstrap\"\r\nimport * as actions from \"../../store/actions\"\r\nimport StyledDropzone from \"../Dropzone\"\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Appointments = props => {\r\n\r\n    const [requestBody, setRequestBody] = useState({})\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\r\n            props.location.state ?\r\n            \"ATUALIZAR ATENDIMENTO\" :\r\n            \"NOVO ATENDIMENTO \"\r\n        )\r\n        props.fetchPatients()\r\n        checkSuccess()\r\n        if (props.location.state)\r\n            setRequestBody(props.location.state)\r\n        else if (props.location.patient)\r\n            setRequestBody({patient_id: props.location.patient})\r\n    },[props.appointments]) \r\n\r\n    const handleRequestBody = e => {\r\n        setRequestBody({\r\n            ...requestBody,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const checkSuccess = () => {\r\n        if (props.appointments.success) {\r\n            Swal.fire({\r\n                title: \"Sucesso!\",\r\n                text: \"Paciente cadastrado com sucesso.\",\r\n                icon: \"success\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n            props.appointments.success = false\r\n        }\r\n        if (props.appointments.error) {\r\n            Swal.fire({\r\n                title: \"Ooops!\",\r\n                text: \"Ocorreu um erro, tente novamente mais tarde.\",\r\n                icon: \"warning\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n            props.appointments.error = false\r\n        }\r\n    }\r\n\r\n    const uploadFiles = async () => {\r\n        let files = new FormData()\r\n        await props.files.selectedFiles.forEach(file => {\r\n            files.append('files[]', file)\r\n        })\r\n        if (props.files.selectedFiles.length > 0){\r\n            await props.uploadFiles(files, requestBody.patient_id)\r\n        }\r\n    }\r\n\r\n    const handleStoreAppointment = async e => {\r\n        e.preventDefault()\r\n\r\n        if (props.location.state) {\r\n            await props.updateAppointment(requestBody)\r\n        }\r\n        else {\r\n            await props.storeAppointment(requestBody)\r\n        }\r\n            \r\n        await uploadFiles()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleStoreAppointment} style={{marginBottom: '100px'}}>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"patient_id\">Paciente: </label>\r\n                                <select \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"patient_id\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Buscar...\" \r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                    value={requestBody.patient_id}\r\n                                >\r\n                                    <option>Selecione...</option>\r\n                                    {\r\n                                        props.patients.patients ? \r\n                                        props.patients.patients.map(patient => (\r\n                                            <option key={patient.id} value={patient.id}>\r\n                                                {patient.name}\r\n                                            </option>\r\n                                        )) : (\"\")\r\n                                    }\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"link\">Link: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"link\" \r\n                                    type=\"text\" \r\n                                    className=\"form-control input\" \r\n                                    placeholder=\"http://exemplo.com.br/link\" \r\n                                    required\r\n                                    value={requestBody.link}\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"date\">Data: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"date\" \r\n                                    type=\"date\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                    value={requestBody.date}\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"time\">Hora: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"time\" \r\n                                    type=\"time\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                    value={requestBody.time}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"notes\">Notas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"notes\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.notes}\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cronogram\">Cronograma: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"cronogram\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.cronogram}\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"abstract\">Resumo: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"abstract\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.abstract}\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"todo_list\">Tarefas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"todo_list\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.todo_list}\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={12} className=\"dropzone\">\r\n                                <StyledDropzone />\r\n                            </Col>\r\n                            <Col md={12} style={{textAlign: 'center', marginTop: '32px'}}>\r\n                                <Button\r\n                                    className=\"storeAppointmentButton shadow-none\"\r\n                                    disabled={props.appointments?.isLoading}\r\n                                >\r\n                                    {\r\n                                        props.location.state ?\r\n                                        \"ATUALIZAR ATENDIMENTO\" :\r\n                                        \"CADASTRAR ATENDIMENTO \"\r\n                                    }\r\n                                    {\r\n                                        props.appointments.isLoading ?\r\n                                            <Loader \r\n                                                type=\"TailSpin\" \r\n                                                color=\"#ffffff\"\r\n                                                height={40} \r\n                                                width={40} \r\n                                            />\r\n                                        : \"\"\r\n                                    }\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer,\r\n        appointments: store.appointmentsReducer,\r\n        files: store.filesReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    storeAppointment: data => dispatch(actions.storeAppointments(data)),\r\n    updateAppointment: data => dispatch(actions.updateAppointments(data)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchPatients: () => dispatch(actions.fetchAllPatients()),\r\n    uploadFiles: (files, patient_id) => dispatch(actions.uploadFiles(files, patient_id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Appointments)","export const storeAppointments = data => ({\r\n    type: \"STORE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const updateAppointments = data => ({\r\n    type: \"UPDATE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const fetchAllAppointments = () => ({\r\n    type: \"FETCH_ALL_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: \"DELETE_APPOINTMENT_SAGA\",\r\n    payload: id\r\n})","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst ListAppointments = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar atendimentos\")\r\n        props.fetchAppointments()\r\n    }, [])\r\n\r\n    const deleteAppointment = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este atendimento?',\r\n            text: 'Todos os registros vinculados ao atendimento serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n            .then(res => {\r\n                if (res.value)\r\n                    props.deleteAppointment(id)\r\n            })\r\n    }\r\n\r\n    const handleEdit = id => {\r\n        let currentAppointment = props.appointments.appointments\r\n        .filter(appointment => appointment.id == id)[0]\r\n        props.history.push({ \r\n            pathname: 'cadastrar-atendimento', \r\n            state: currentAppointment\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"box\">\r\n            {\r\n                props.appointments.appointments?.length == 0 ?\r\n                <p style={{color: '#666'}}>Nenhum atendimento cadastrado.</p> : \r\n                props.appointments.appointments ? (\r\n                    <Table striped responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Data:</th>\r\n                                <th>Hora:</th>\r\n                                <th>Paciente:</th>\r\n                                <th>Editar:</th>\r\n                                <th>Deletar:</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {props.appointments.appointments.map((appointment, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{appointment.date}</td>\r\n                                    <td>{appointment.time}</td>\r\n                                    <td>{appointment.patient_id}</td>\r\n                                    <td>\r\n                                        <button \r\n                                            className=\"btn edit-button\" \r\n                                            onClick={() => handleEdit(appointment.id)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faEdit} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button\r\n                                            id={appointment.id}\r\n                                            onClick={() => deleteAppointment(appointment.id)}\r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                ) : (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAppointments: () => dispatch(actions.fetchAllAppointments()),\r\n    deleteAppointment: id => dispatch(actions.deleteAppointment(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        appointments: store.appointmentsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListAppointments)","import React, { useEffect } from \"react\"\r\nimport \"./style.scss\"\r\nimport { Col, Row, Table } from \"reactstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport * as actions from \"../../store/actions\"\r\nimport Loader from 'react-loader-spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Files = props => {\r\n\r\n    useEffect(() => {\r\n        props.fetchFiles(1)\r\n        props.setPageTitle(\"Material de Apoio\")\r\n        props.fetchAllPatients()\r\n    },[])\r\n\r\n    const handlePatientChange = e => {\r\n        if (e.target.value != \"Selecione um paciente\")\r\n            props.fetchFilesByPatient(e.target.value)\r\n    }\r\n\r\n    return(\r\n            <Row>\r\n                <Col md={4}>\r\n                    <div className=\"box\">\r\n                        <label htmlFor=\"selected-patient\">Paciente: </label>\r\n                        <select className=\"selected-patient\" onChange={handlePatientChange}>\r\n                            <option>Selecione um paciente</option>\r\n                            {\r\n                                props.patients?.map(patient => (\r\n                                    <option value={patient.id}>{patient.name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </Col>\r\n                <Col md={8}>\r\n                    <div className=\"box\">\r\n                    {\r\n                        props.loader ?\r\n                        (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                        ) :\r\n                        (\r\n                        props.files?.length == 0 ? \r\n                        <p style={{color: '#666'}}>Nenhum material de apoio cadastrado.</p> :\r\n                        <Table responsive striped>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Arquivo: </th>\r\n                                    <th>Upload: </th>\r\n                                    <th>Visualizar: </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    props.files?.map(file => (\r\n                                        <tr>\r\n                                            <td>{file.name}</td>\r\n                                            <td>{file.created_at.split('.')[0].replace(\"T\", \" \")}</td>\r\n                                            <td style={{textAlign: 'center'}}>\r\n                                                <a target=\"_blank\" href={file.path}>\r\n                                                    <button className=\"btn edit-button\">\r\n                                                        <FontAwesomeIcon icon={faEye} />\r\n                                                    </button>\r\n                                                </a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </Table>  \r\n                        )\r\n                    }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        files: store.filesReducer.files,\r\n        loader: store.filesReducer.loader,\r\n        patients: store.patientsReducer.patients\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchFiles: page => dispatch(actions.fetchFiles(page)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAllPatients: () => dispatch(actions.fetchAllPatients()),\r\n    fetchFilesByPatient: patient => dispatch(actions.fetchFilesByPatient(patient))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Files)","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Container } from 'reactstrap'\r\nimport NavBar from './Navbar'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ProtectedRoute } from '../../protected.route'\r\n\r\nimport StorePatients from '../Patients/storePatient'\r\nimport Patients from '../Patients/patients'\r\nimport Appointments from '../Appointments/index'\r\nimport ListAppointments from '../Appointments/listAppointments'\r\nimport Files from '../Files/index'\r\n\r\nexport default props => (\r\n    <Container fluid className={classNames('content', {'is-open': props.isOpen})}>\r\n\t\t<NavBar toggle={props.toggle}/>\r\n\t\t<Switch>\r\n\t\t\t<ProtectedRoute exact path=\"/\" component={() => \"Em construção...\" } />\r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-pacientes\" component={StorePatients} />\r\n\t\t\t<ProtectedRoute exact path=\"/pacientes\" component={Patients} />          \r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-atendimento\" component={Appointments} />          \r\n\t\t\t<ProtectedRoute exact path=\"/atendimentos\" component={ListAppointments} />\r\n\t\t\t<ProtectedRoute exact path=\"/material-apoio\" component={Files} />\r\n\t\t</Switch>\r\n    </Container>\r\n)","import React, { useState } from 'react'\r\nimport auth from '../../auth'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHospitalAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from 'react-loader-spinner'\r\nimport './style.scss'\r\n\r\nconst Login = props => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [incorrectMessage, setIncorrectMessage] = useState(false)\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const handleLogin = e => {\r\n        setLoader(true)\r\n        e.preventDefault()\r\n        \r\n        let data = {email: email, password: password}\r\n\r\n        auth.login(data, \r\n            () => props.history.push(\"/\"), \r\n            () => {\r\n                setIncorrectMessage(true)\r\n                setLoader(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n                <Col className=\"form-background\" md={{size: 6, offset: 3}}>\r\n                    <form onSubmit={handleLogin}>\r\n                        <h2><FontAwesomeIcon icon={faHospitalAlt} /> Acessar</h2>\r\n                        <input onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" name=\"user\" required />\r\n                        <input onChange={e => setPassword(e.target.value)} type=\"password\" className=\"form-control\" name=\"password\" required />\r\n                        { loader ? <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} /> : \"\" }\r\n                        { incorrectMessage ? <p>Usuário ou senha incorretos</p> : \"\" }\r\n                        <Button className=\"login-button\">Acessar</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SideBar from './components/SideBar'\r\nimport Content from './components/Content'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './App.scss'\r\nimport Login from './components/Login'\r\n\r\nexport default () => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n\t\t<Switch>\r\n\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t<div className=\"App wrapper\">\r\n\t\t\t<SideBar toggle={toggle} isOpen={isOpen} />\r\n\t\t\t<Content toggle={toggle} isOpen={isOpen} />\r\n\t\t</div>\r\n\t\t</Switch>\r\n    </Router>\r\n  )\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const initState = {\r\n    pageTitle: \"Gerenciador de consultas\"\r\n}\r\n\r\nconst pageReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case \"SET_PAGE_TITLE\":\r\n            return {\r\n              pageTitle: action.payload  \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pageReducer","const initState = {}\r\n\r\nconst patientsReducer = (state = {}, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case \"FILTER_PATIENTS\":\r\n            let filteredPatients = initState.patients.filter(patient => {\r\n                let name = patient.name.toLocaleLowerCase()\r\n                return name.includes(action.payload.toLocaleLowerCase())\r\n            })\r\n            return {\r\n                ...state,\r\n                patients: filteredPatients\r\n            }\r\n\r\n        case \"SET_PATIENTS\":\r\n            initState.patients = action.payload\r\n            return {\r\n                ...state,\r\n                patients: action.payload\r\n            }\r\n\r\n        case \"SET_PATIENT\":\r\n            return {\r\n                ...state,\r\n                patient: action.payload\r\n            }\r\n\r\n        case \"SET_PATIENT_APPOINTMENTS\":\r\n            return {\r\n                ...state,\r\n                appointments: action.payload\r\n            }\r\n\r\n        case \"SET_PAGINATION_DATA\":\r\n            return {\r\n                ...state,\r\n                paginationData: action.payload\r\n            }\r\n\r\n        case \"DELETE_PATIENT\":\r\n            let remainingPatients = state.patients.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.patients = remainingPatients\r\n            return {\r\n                ...state,\r\n                patients: remainingPatients,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport default patientsReducer","const initState = {\r\n    isLoading: false,\r\n    success: false,\r\n    error: false\r\n}\r\n\r\nconst appointmentsReducer = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"TOGGLE_APPOINTMENTS_LOADER\":\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                success: true,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_FAILURE\":\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS\":\r\n            initState.appointments = action.payload\r\n            return {\r\n                ...state,\r\n                appointments: action.payload\r\n            }\r\n\r\n        case \"DELETE_APPOINTMENT\":\r\n            let remainingAppointments = state.appointments.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.appointments = remainingAppointments\r\n            return {\r\n                ...state,\r\n                appointments: remainingAppointments,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default appointmentsReducer","const initFiles = {\r\n    loader: true\r\n}\r\n\r\nconst filesReducer = (state = initFiles, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"SET_SELECTED_FILES\":\r\n            return {\r\n                ...state,\r\n                selectedFiles: action.payload\r\n            }\r\n\r\n        case \"SET_LOADER\": \r\n            return {\r\n                ...state,\r\n                loader: true\r\n            }\r\n\r\n        case \"SET_FILES\":\r\n            return {\r\n                ...state,\r\n                files: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default filesReducer","import { combineReducers } from 'redux'\r\nimport pageReducer from './pageReducer'\r\nimport patientsReducer from './patientsReducer'\r\nimport appointmentsReducer from './appointmentsReducer'\r\nimport filesReducer from './filesReducer'\r\n\r\nexport default combineReducers ({\r\n    filesReducer,\r\n    pageReducer,\r\n    patientsReducer,\r\n    appointmentsReducer\r\n})","import { put, call } from 'redux-saga/effects'\r\nimport patientsService from '../../services/patientsService'\r\n\r\nexport function* fetchPatients(action){\r\n    let jsonResponse = yield call(patientsService.fetch, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PAGINATION_DATA\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(patientsService.fetchAll)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchAppointments(action){\r\n    let jsonResponse = yield call(patientsService.fetchAppointments, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENT_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* find(action){\r\n    let jsonResponse = yield call(patientsService.find, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENT\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* deletePatient(action){\r\n    let jsonResponse = yield call(patientsService.deletePatient, action.payload)\r\n    \r\n    yield put({\r\n        type: \"DELETE_PATIENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/appointments')\r\nconst store = body => api.post('/appointments', body)\r\nconst deleteAppointment = id => api.delete(`/appointments/${id}`)\r\nconst update = body => api.put(`/appointments/${body.id}`, body)\r\n\r\nexport default {\r\n    fetchAll,\r\n    deleteAppointment,\r\n    store,\r\n    update\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport appointmentsService from '../../services/appointmentsService'\r\n\r\nexport function* storeAppointment(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    try {\r\n        let jsonResponse = yield call(appointmentsService.store, action.payload)\r\n\r\n        if (jsonResponse.status === 200) {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_SUCCESS\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n        else {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_FAILURE\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\",\r\n            payload: err\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport function* updateAppointment(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    try {\r\n        let jsonResponse = yield call(appointmentsService.update, action.payload)\r\n\r\n        if (jsonResponse.status === 200) {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_SUCCESS\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n        else {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_FAILURE\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\",\r\n            payload: err\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport function* fetchAll() {\r\n    let jsonResponse = yield call(appointmentsService.fetchAll)\r\n    yield put({\r\n        type: \"SET_APPOINTMENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* deleteAppointment(action) {\r\n    let jsonResponse = yield call(appointmentsService.deleteAppointment, action.payload)\r\n    yield put({\r\n        type: \"DELETE_APPOINTMENT\",\r\n        payload: { jsonResponse: jsonResponse, id: action.payload }\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/attachements')\r\nconst upload = files => api.post('/attachements/upload', files)\r\nconst deleteFile = id => api.delete(`/attachements/${id}`)\r\nconst fetchByPatient = patient => api.get(`/attachements/patients/${patient}`)\r\n\r\nconst attach = (patient, files) => {\r\n    files.forEach(file => {\r\n        api.post(`attachements/${file.id}/patients/${patient}`)\r\n    })\r\n}\r\n\r\nexport default {\r\n    fetchAll,\r\n    upload,\r\n    deleteFile,\r\n    attach,\r\n    fetchByPatient\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport filesService from '../../services/filesService'\r\n\r\nexport function* upload(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_FILES_LOADER\"\r\n    })\r\n\r\n    let jsonResponse = yield call(filesService.upload, action.payload.files)\r\n    yield call(filesService.attach, action.payload.patient, jsonResponse.data)\r\n\r\n\r\n    if (jsonResponse.status === 200) {\r\n        yield put({ type: \"SET_FILES_SUCCESS\" })\r\n    } \r\n    else {\r\n        yield put({ type: \"SET_FILES_FAILURE\" })\r\n    }\r\n\r\n}\r\n\r\nexport function* fetchFiles() {\r\n\r\n    let jsonResponse = yield call(filesService.fetchAll)\r\n\r\n    yield put({\r\n        type: \"SET_FILES\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n}\r\n\r\nexport function* fetchByPatient(action) {\r\n\r\n    yield put({ type: \"SET_LOADER\" })\r\n\r\n    let jsonResponse = yield call(filesService.fetchByPatient, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_FILES\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n}","import { takeEvery, all } from 'redux-saga/effects'\r\nimport * as patientsSagas from './patients'\r\nimport * as appointmentsSagas from './appointments'\r\nimport * as filesSagas from './files'\r\n\r\nexport function* watchSagas(){\r\n    yield all([\r\n        takeEvery(\"FETCH_PATIENTS_SAGA\", patientsSagas.fetchPatients),\r\n        takeEvery(\"FETCH_ALL_PATIENTS_SAGA\", patientsSagas.fetchAll),\r\n        takeEvery(\"FETCH_PATIENT_INFO\", patientsSagas.find),\r\n        takeEvery(\"DELETE_PATIENT_SAGA\", patientsSagas.deletePatient),\r\n        takeEvery(\"FETCH_PATIENT_APPOINTMENTS_SAGA\", patientsSagas.fetchAppointments),\r\n        takeEvery(\"STORE_APPOINTMENTS_SAGA\", appointmentsSagas.storeAppointment),\r\n        takeEvery(\"UPDATE_APPOINTMENTS_SAGA\", appointmentsSagas.updateAppointment),\r\n        takeEvery(\"DELETE_APPOINTMENT_SAGA\", appointmentsSagas.deleteAppointment),\r\n        takeEvery(\"FETCH_ALL_APPOINTMENTS_SAGA\", appointmentsSagas.fetchAll),\r\n        takeEvery(\"UPLOAD_FILES\", filesSagas.upload),\r\n        takeEvery(\"FETCH_FILES\", filesSagas.fetchFiles),\r\n        takeEvery(\"FETCH_FILES_BY_PATIENT\", filesSagas.fetchByPatient)\r\n    ])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { watchSagas } from './store/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(watchSagas)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}