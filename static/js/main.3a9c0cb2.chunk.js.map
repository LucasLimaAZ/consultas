{"version":3,"sources":["components/SideBar/SubMenu.js","services/api.js","auth.js","components/SideBar/index.js","components/Content/Navbar.js","protected.route.js","store/actions/page.js","store/actions/patients.js","store/actions/files.js","components/Home/index.js","store/actions/appointments.js","components/Mask/index.js","services/patientsService.js","components/Patients/storePatient.js","components/Patients/patientRecordModal.js","components/Patients/patients.js","components/Dropzone/index.js","components/Appointments/index.js","components/Appointments/listAppointments.js","components/Files/index.js","components/Content/index.js","components/Login/index.js","App.js","serviceWorker.js","store/reducers/pageReducer.js","store/reducers/patientsReducer.js","store/reducers/appointmentsReducer.js","store/reducers/filesReducer.js","store/reducers/index.js","store/sagas/patients.js","services/appointmentsService.js","store/sagas/appointments.js","services/filesService.js","store/sagas/files.js","store/sagas/index.js","index.js"],"names":["SubMenu","props","useState","collapsed","setCollapsed","icon","title","items","NavItem","onClick","className","classNames","NavLink","Collapse","isOpen","navbar","map","item","index","key","tag","Link","to","target","api","axios","create","baseURL","interceptors","request","use","headers","localStorage","getItem","error","this","authenticated","data","callBack","elseCallBack","post","then","response","status","setItem","access_token","catch","err","console","submenus","withRouter","color","toggle","style","faTimesCircle","faHospitalAlt","Nav","cursor","vertical","history","push","faHome","faUsers","faUserMd","auth","logout","window","location","reload","faPowerOff","connect","store","pageTitle","pageReducer","Navbar","light","expand","Button","faBars","ProtectedRoute","Component","component","rest","render","isAuthenticated","pathname","state","from","setPageTitle","type","payload","fetchPatients","page","fetchFiles","fetchFilesByPatient","patient","patients","patientsReducer","appointments","appointmentsReducer","todaysAppointments","madeAppointments","files","filesReducer","dispatch","actions","fetchTodaysAppointments","fetchMadeAppointments","useEffect","Row","Col","md","paginationData","total","faUser","faClipboardList","length","faBook","marginTop","size","offset","Table","responsive","appointment","name","time","abstract","height","width","phoneMask","value","replace","currencyMask","val","get","id","delete","body","search","currentPatient","fetchPatientInfo","cpf","setCpf","cep","setCep","foreign","setForeign","setValue","phone","setPhone","mobilephone","setMobilephone","isCepValid","setIsCepValid","dateColor","setDateColor","address","user","role_id","gender_id","setBody","new","plusInformation","plus_informations","telephone","String","handleVerifyPasswords","password","password_confirmation","handleDateChange","e","handleChangeBody","handleChangePhone","handleChangeUser","handleChangeAddress","handlePlusInformationChange","handleVerifyDate","date","Date","birthday","age","getFullYear","handleFormSubmit","a","preventDefault","Swal","fire","patientsService","confirmButtonColor","message","text","autoComplete","onSubmit","htmlFor","onChange","placeholder","required","cpfMask","maxLength","rg","marginBottom","onKeyDown","defaultChecked","checked","res","erro","city","localidade","street","logradouro","uf","neighborhood","bairro","disabled","complement","min","number","emergency_contact","observation","email","role","fetchPatientAppointments","patientId","fetchPatientFiles","patientInfo","modal","setModal","nestedModal","setNestedModal","nestedFilesModal","setNestedFilesModal","closeAll","setCloseAll","toggleNested","toggleFilesNested","border","faClipboard","Modal","ModalHeader","ModalBody","onClosed","undefined","striped","ModalFooter","file","created_at","split","href","path","faEye","filterPatients","deletePatient","handlePaginationClick","loader","textAlign","handleEdit","faEdit","showCancelButton","confirmButtonText","cancelButtonText","cancelButtonColor","faTrash","Pagination","aria-label","PaginationItem","PaginationLink","first","previous","current_page","Array","last_page","fill","el","i","next","last","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","setSelectedFiles","useDropzone","acceptedFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","faUpload","storeAppointment","updateAppointment","uploadFiles","patient_id","requestBody","setRequestBody","checkSuccess","handleRequestBody","success","FormData","selectedFiles","forEach","append","handleStoreAppointment","link","notes","cronogram","todo_list","isLoading","fetchAppointments","deleteAppointment","currentAppointment","filter","faCalendar","faClock","fetchAllPatients","Container","fluid","exact","Home","StorePatients","Patients","Appointments","ListAppointments","Files","Login","setEmail","setPassword","incorrectMessage","setIncorrectMessage","setLoader","login","setOpen","Content","Boolean","hostname","match","initState","action","teste","remainingPatients","jsonResponse","errorMessage","remainingAppointments","initFiles","combineReducers","fetchAll","put","call","appointmentsService","upload","fetchByPatient","filesService","watchSagas","all","takeEvery","patientsSagas","appointmentsSagas","filesSagas","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4YAgCeA,EA1BC,SAAAC,GAAU,IAAD,EAEWC,oBAAS,GAFpB,mBAEhBC,EAFgB,KAELC,EAFK,KAIfC,EAAuBJ,EAAvBI,KAAMC,EAAiBL,EAAjBK,MAAOC,EAAUN,EAAVM,MAErB,OACE,6BACE,kBAACC,EAAA,EAAD,CAASC,QALQ,kBAAML,GAAcD,IAKLO,UAAWC,IAAW,CAAC,aAAcR,KACnE,kBAACS,EAAA,EAAD,CAASF,UAAU,mBACjB,kBAAC,IAAD,CAAiBL,KAAMA,EAAMK,UAAU,SAASJ,IAGpD,kBAACO,EAAA,EAAD,CAAUC,QAASX,EAAWY,QAAM,EAACL,UAAWC,IAAW,aAAa,CAAC,QAASR,KAC/EI,EAAMS,KAAI,SAACC,EAAMC,GAAP,OACP,kBAACV,EAAA,EAAD,CAASW,IAAKD,EAAOR,UAAU,QAC7B,kBAACE,EAAA,EAAD,CAASQ,IAAKC,IAAMC,GAAIL,EAAKM,QAC1BN,EAAKX,c,0CCrBhBkB,EAAMC,IAAMC,OAAO,CACrBC,QAAS,8CAIbH,EAAII,aAAaC,QAAQC,KACrB,SAAAD,GAME,OALEA,EAAQE,QAAU,CACd,eAAgB,mBAChB,mBAAoB,iBACpB,cAAiB,UAAYC,aAAaC,QAAQ,iBAEjDJ,KAET,SAAAK,GAAK,OAAIA,KAGEV,QCqBA,M,WArCX,WAAYvB,GAAO,oBACfkC,KAAKC,eAAgB,E,kDAGnBC,EAAMC,EAAUC,GAAc,IAAD,OAE/Bf,EAAIgB,KAAK,cAAeH,GACnBI,MAAK,SAAAC,GACqB,MAApBA,EAASC,QACRX,aAAaY,QAAQ,eAAgBF,EAASL,KAAKQ,cACnD,EAAKT,eAAgB,EAErBE,MAGA,EAAKF,eAAgB,EACrBG,QAGPO,OAAM,SAAAC,GACH,EAAKX,eAAgB,EACrBG,IACAS,QAAQd,MAAMa,Q,6BAKnBT,GACHH,KAAKC,eAAgB,EACrBE,M,wCAIA,OAAOH,KAAKC,kB,uBC8Bda,EAAW,CACjB,CACC,CACA3C,MAAO,sBACPiB,OAAQ,uBAER,CACAjB,MAAO,sBACPiB,OAAQ,cAGT,CACC,CACAjB,MAAO,OACPiB,OAAQ,yBAER,CACAjB,MAAO,eACPiB,OAAQ,gBAER,CACAjB,MAAO,oBACPiB,OAAQ,oBAMM2B,eA7EC,SAAAjD,GACf,OACC,yBAAKS,UAAWC,IAAW,UAAW,CAAC,UAAWV,EAAMa,UACvD,yBAAKJ,UAAU,kBACd,0BACCyC,MAAM,OACN1C,QAASR,EAAMmD,OACfC,MAAO,CAACF,MAAO,SAEf,kBAAC,IAAD,CAAiB9C,KAAMiD,OAExB,wBAAI5C,UAAU,iBACb,kBAAC,IAAD,CAAiBL,KAAMkD,MADxB,cAKD,yBAAK7C,UAAU,aACd,kBAAC8C,EAAA,EAAD,CACCH,MAAO,CAACI,OAAQ,WAChBC,UAAQ,EACRhD,UAAU,sBAEV,mDACA,kBAACF,EAAA,EAAD,KACC,kBAACI,EAAA,EAAD,CAASH,QAAS,kBAAMR,EAAM0D,QAAQC,KAAK,OAC1C,kBAAC,IAAD,CAAiBvD,KAAMwD,IAAQnD,UAAU,SAD1C,SAID,kBAAC,EAAD,CACCJ,MAAM,YACND,KAAMyD,IACNvD,MAAO0C,EAAS,KAEjB,kBAAC,EAAD,CACC3C,MAAM,eACND,KAAM0D,IACNxD,MAAO0C,EAAS,KAEjB,kBAACzC,EAAA,EAAD,KACC,kBAACI,EAAA,EAAD,CAASH,QAAS,kBAAMuD,EAAKC,QAAO,kBAAMC,OAAOC,SAASC,QAAO,QAChE,kBAAC,IAAD,CAAiB/D,KAAMgE,IAAY3D,UAAU,SAD9C,e,4CCjBS4D,eANS,SAAAC,GACtB,MAAM,CACJC,UAAWD,EAAME,YAAYD,aAIlBF,EAhCA,SAAArE,GACb,OACE,kBAACyE,EAAA,EAAD,CACEvB,MAAM,QACNwB,OAAK,EACLjE,UAAU,6CACVkE,OAAO,MAEP,kBAACC,EAAA,EAAD,CAAQ1B,MAAM,OAAO1C,QAASR,EAAMmD,QAClC,kBAAC,IAAD,CAAiB/C,KAAMyE,OAGzB,kBAACtB,EAAA,EAAD,CAAK9C,UAAU,SAASK,QAAM,GAC5B,kBAACP,EAAA,EAAD,KACE,yBAAKE,UAAU,cACb,wBAAIA,UAAU,SACXT,EAAMuE,kB,QCnBRO,EAAiB,SAAC,GAAqC,IAAzBC,EAAwB,EAAnCC,UAAyBC,EAAU,6BAC/D,OACI,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OACb,SAAClF,GACG,OAAG+D,EAAKoB,kBACG,kBAACJ,EAAc/E,GAEf,kBAAC,IAAD,CAAUqB,GACb,CACI+D,SAAU,SACVC,MAAO,CACHC,KAAMtF,EAAMkE,kB,2BCf/BqB,EAAe,SAAAlF,GAAK,MAAK,CAClCmF,KAAM,iBACNC,QAASpF,ICGAqF,EAAgB,SAAAC,GAAI,MAAK,CAClCH,KAAM,sBACNC,QAASE,ICMAC,EAAa,SAAAD,GAAI,MAAK,CAC/BH,KAAM,cACNC,QAASE,IAGAE,EAAsB,SAAAC,GAAO,MAAK,CAC3CN,KAAM,yBACNC,QAASK,I,0BCgGEzB,eAhBS,SAAAC,GACpB,MAAM,CACFyB,SAAUzB,EAAM0B,gBAChBC,aAAc3B,EAAM4B,oBAAoBC,mBACxCC,iBAAkB9B,EAAM4B,oBAAoBE,iBAC5CC,MAAO/B,EAAMgC,aAAaD,UAIP,SAAAE,GAAQ,MAAK,CACpCb,cAAe,kBAAMa,EAASC,EAAsB,KACpDC,wBAAyB,kBAAMF,ECrGW,CAC1Cf,KAAM,oCDqGNI,WAAY,kBAAMW,EAASC,EAAmB,KAC9CE,sBAAuB,kBAAMH,ECnGW,CACxCf,KAAM,qCDqGKnB,EA3GF,SAAArE,GAAU,IAAD,YASlB,OAPA2G,qBAAU,WACN3G,EAAM0F,gBACN1F,EAAM0G,wBACN1G,EAAM4F,aACN5F,EAAMyG,4BACR,IAGE,oCACI,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKrG,UAAU,eACX,yBAAKA,UAAU,QACX,wBAAIA,WAAW,UAAAT,EAAM+F,gBAAN,mBAAgBgB,sBAAhB,eAAgCC,OAAQ,kBAAoB,WAA3E,UACKhH,EAAM+F,gBADX,iBACK,EAAgBgB,sBADrB,aACK,EAAgCC,OAErC,wBAAIvG,UAAU,YAAW,kBAAC,IAAD,CAAiBL,KAAM6G,QAEpD,wBAAIxG,UAAU,YAAd,2BAIR,kBAACoG,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKrG,UAAU,eACX,yBAAKA,UAAU,QACX,wBAAIA,UAAWT,EAAMoG,iBAAmB,EAAI,kBAAoB,WAC3DpG,EAAMoG,kBAEX,wBAAI3F,UAAU,YAAW,kBAAC,IAAD,CAAiBL,KAAM8G,QAEpD,wBAAIzG,UAAU,YAAd,6BAIR,kBAACoG,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKrG,UAAU,eACX,yBAAKA,UAAU,QACX,wBAAIA,UAAWT,EAAMqG,MAAQ,kBAAoB,YAC5C,UAAArG,EAAMqG,aAAN,eAAac,QAAS,EAAInH,EAAMqG,MAAMc,OAAS,KAEpD,wBAAI1G,UAAU,YAAW,kBAAC,IAAD,CAAiBL,KAAMgH,QAEpD,wBAAI3G,UAAU,YAAd,yBAKZ,kBAACmG,EAAA,EAAD,CAAKxD,MAAO,CAACiE,UAAU,SACnB,kBAACR,EAAA,EAAD,CAAKS,KAAM,CAACR,GAAI,IAAKS,OAAQ,MACzB,yBAAK9G,UAAU,OACX,wBAAIA,UAAU,YAAd,uBACA,kBAAC+G,EAAA,EAAD,CAAOC,YAAU,GACb,+BACI,4BACI,yCACA,2CACA,yCAGR,yCAEQzH,EAAMiG,oBAFd,aAEQ,EAAoBlF,KAAI,SAAA2G,GAAW,aAC/B,4BACI,sCAAKA,EAAY5B,eAAjB,aAAK,EAAqB6B,MAC1B,4BAAKD,EAAYE,MACjB,4BAAKF,EAAYG,eAKxB7H,EAAMiG,cACH,kBAAC,IAAD,CACIxF,UAAU,SACV+E,KAAK,WACLtC,MAAM,UACN4E,OAAQ,IACRC,MAAO,e,uCE9EtCC,G,MAAY,SAAAC,GACrB,OAAOA,EACFC,QAAQ,MAAO,IACfA,QAAQ,cAAe,SACvBA,QAAQ,cAAe,YAGnBC,EAAe,SAAAC,GACxB,IAAIH,EAAQG,EACPF,QAAQ,MAAO,IACfA,QAAQ,OAAQ,IAErB,OAAoB,IAAjBD,EAAMd,OACEc,EACFC,QAAQ,cAAe,WACvBA,QAAQ,eAAgB,SAER,IAAjBD,EAAMd,OACHc,EACFC,QAAQ,cAAe,WACvBA,QAAQ,eAAgB,QAGtBD,EACFC,QAAQ,cAAe,WACvBA,QAAQ,eAAgB,QCxBtB,EARE,kBAAM3G,EAAI8G,IAAI,sBAQhB,EAPD,SAAA1C,GAAI,OAAIpE,EAAI8G,IAAJ,yBAA0B1C,KAOjC,GANF,SAAA2C,GAAE,OAAI/G,EAAI8G,IAAJ,oBAAqBC,KAMzB,GAHW,SAAAxC,GAAO,OAAIvE,EAAI8G,IAAJ,gCAAiCvC,KAGvD,GAJO,SAAAwC,GAAE,OAAI/G,EAAIgH,OAAJ,oBAAwBD,KAIrC,GALD,SAAAE,GAAI,OAAIjH,EAAIgB,KAAK,YAAaiG,IAK7B,GAFA,SAAAC,GAAM,OAAIlH,EAAIgB,KAAJ,mBAA6B,CAAC0F,MAAOQ,K,oBC6tB/CpE,gBANS,SAAAC,GACpB,MAAO,CACHwB,QAASxB,EAAM0B,gBAAgB0C,mBAPZ,SAAAnC,GAAQ,MAAK,CACpChB,aAAc,SAAAlF,GAAK,OAAIkG,EAASC,EAAqBnG,KACrDsI,iBAAkB,SAAAL,GAAE,OAAI/B,EN9sBI,SAAA+B,GAAE,MAAK,CACnC9C,KAAM,0BACNC,QAAS6C,GM4sBwB9B,CAAyB8B,QAS/CjE,EA3tBO,SAAArE,GAAU,IAAD,QAELC,mBAAS,IAFJ,mBAEpB2I,EAFoB,KAEfC,EAFe,OAGL5I,mBAAS,IAHJ,mBAGpB6I,EAHoB,KAGfC,EAHe,OAIG9I,oBAAS,GAJZ,mBAIpB+I,EAJoB,KAIXC,EAJW,OAKDhJ,mBAAS,WALR,mBAKpBgI,EALoB,KAKbiB,EALa,OAMDjJ,mBAAS,IANR,mBAMpBkJ,EANoB,KAMbC,EANa,OAOWnJ,mBAAS,IAPpB,mBAOpBoJ,EAPoB,KAOPC,EAPO,OAQSrJ,oBAAS,GARlB,mBAQpBsJ,EARoB,KAQRC,EARQ,OASOvJ,mBAAS,iCAThB,mBASpBwJ,EAToB,KASTC,EATS,OAUHzJ,mBAAS,CAAE0J,QAAS,CAACtE,MAAO,MAAOuE,KAAM,CAACC,QAAS,EAAGC,UAAW,KAV9D,mBAUpBtB,EAVoB,KAUduB,EAVc,KAY3BpD,qBAAU,WAAO,IAAD,EACZ3G,EAAMuF,aACFvF,EAAMkE,SAASmB,MACf,qBACA,sBAGArF,EAAMkE,SAAS8F,MACfhK,EAAMkE,SAAS8F,KAAM,EACrBhK,EAAM2I,iBAAiB3I,EAAMkE,SAASmB,MAAMiD,MAG5C,UAAAtI,EAAM8F,eAAN,eAAe6D,UAAW3J,EAAMkE,SAASmB,QACzC0E,EAAQ,2BACD/J,EAAM8F,SADN,IAEHmE,gBAAiBjK,EAAM8F,QAAQoE,qBAEnCd,EAASpJ,EAAM8F,QAAQqE,WACvBb,EAAetJ,EAAM8F,QAAQqD,OAC7BN,EAAO7I,EAAM8F,QAAQ8C,KACrBG,EAAO/I,EAAM8F,QAAQ6D,QAAQb,KAC7BI,EAASf,EAAaiC,OAAOpK,EAAM8F,QAAQ8D,KAAK3B,YAEtD,CAACjI,EAAM8F,UAET,IAYMuE,EAAwB,WAC1B,OAAO7B,EAAKoB,KAAKU,WAAa9B,EAAKoB,KAAKW,uBAuCtCC,GAAmB,SAAAC,GACrB,IAAIxC,EAAQwC,EAAEnJ,OAAO2G,MACjBN,EAAO8C,EAAEnJ,OAAOqG,KAEpBoC,EAAQ,2BACDvB,GADA,kBAEFb,EAAOM,KAGZyB,EAAa,uBAGXgB,GAAmB,SAAAD,GACrB,IAAIxC,EAAQwC,EAAEnJ,OAAO2G,MACjBN,EAAO8C,EAAEnJ,OAAOqG,KAEpBoC,EAAQ,2BACDvB,GADA,kBAEFb,EAAOM,MAIV0C,GAAoB,SAAAF,GACtB,IAAI9C,EAAO8C,EAAEnJ,OAAOqG,KAChBM,EAAQwC,EAAEnJ,OAAO2G,MAEhBe,EAQW,aAARrB,EACAyB,EAASnB,GAETqB,EAAerB,IAVnBA,EAAQA,EAAMC,QAAQ,UAAW,IAErB,aAARP,EACAyB,EAASpB,EAAUC,IAEnBqB,EAAetB,EAAUC,KAQjC8B,EAAQ,2BACDvB,GADA,kBAEFb,EAAOM,MAIV2C,GAAmB,SAAAH,GACrB,IAAIxC,EAAQwC,EAAEnJ,OAAO2G,MACjBN,EAAO8C,EAAEnJ,OAAOqG,KAER,SAARA,IACAuB,EAASf,EAAaF,IACtBA,EAAQA,EAAMC,QAAQ,UAAW,KAGrC6B,EAAQ,2BACDvB,GADA,IAEHoB,KAAK,2BACEpB,EAAKoB,MADR,gBAEAjC,KAAMa,EAAKb,MACVA,EAAOM,QAKd4C,GAAsB,SAAAJ,GACxB,IAAIxC,EAAQwC,EAAEnJ,OAAO2G,MACjBN,EAAO8C,EAAEnJ,OAAOqG,KAEpBoC,EAAQ,2BACDvB,GADA,IAEHmB,QAAQ,2BACDnB,EAAKmB,SADL,kBAEFhC,EAAOM,QAKd6C,GAA8B,SAAAL,GAChC,IAAIxC,EAAQwC,EAAEnJ,OAAO2G,MACjBN,EAAO8C,EAAEnJ,OAAOqG,KAYhBoC,EAVCf,GAAmB,qBAARrB,EAUJ,2BACDa,GADA,IAEHyB,gBAAgB,2BACTzB,EAAKyB,iBADG,kBAEVtC,EAAOM,MAbR,2BACDO,GADA,IAEHyB,gBAAgB,2BACTzB,EAAKyB,iBADG,kBAEVtC,EAAOK,EAAUC,SAe5B8C,GAAmB,WACrB,IAAIC,EAAO,IAAIC,KACXC,EAAW,IAAID,KAAKzC,EAAK0C,UACzBC,EAAMH,EAAKI,cAAgBF,EAASE,cACxC,QAASD,EAAM,KAAOA,EAAM,IAG1BE,GAAgB,uCAAG,WAAMZ,GAAN,SAAAa,EAAA,yDACrBb,EAAEc,iBACW,YAAVtD,EAFkB,yCAGVuD,KAAKC,KAAK,2CAHA,WAIjBpB,MAA2BU,KAJV,iCAKXhB,EAAQ,2BACPvB,GADM,IAETQ,QAASA,KAPI,uBASX0C,GAAsBlD,GACvBhG,MAAK,WACFgJ,KAAKC,KAAK,CACNpL,MAAO,mCACPD,KAAM,UACNuL,mBAAoB,eAG3B9I,OAAM,SAAA4H,GACH,GAAgB,uCAAbA,EAAEmB,QACD,OAAOJ,KAAKC,KAAK,CACbpL,MAAO,0BACPwL,KAAM,yDACNzL,KAAM,UACNuL,mBAAoB,YAG5BH,KAAKC,KAAK,CACNpL,MAAO,mBACPwL,KAAM,wCACNzL,KAAM,UACNuL,mBAAoB,eA9Bf,kCAkCZtB,IAlCY,0CAmCNmB,KAAKC,KAAK,wBAnCJ,WAoCZV,KApCY,0CAqCNS,KAAKC,KAAK,wDArCJ,4CAAH,sDAmDtB,OACI,0BAAMK,aAAa,eAAeC,SAAUV,IACxC,kBAACzE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEQ,KAAM,IACb,yBAAK7G,UAAU,OACX,wBAAIA,UAAU,YAAd,qBAGA,kBAACmG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,QAAf,UACA,2BACIC,SAAUvB,GACVlF,KAAK,OACLmC,KAAK,OACLuE,YAAY,gBACZzL,UAAU,qBACV0L,UAAQ,EACRlE,MAAOO,EAAKb,MAAQ,MAG5B,kBAACd,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,aAAf,mBACA,2BACIC,SAAUtB,GACVnF,KAAK,OACLmC,KAAK,YACLlH,UAAU,qBACVyL,YAAalD,EAAU,wBAA0B,kBACjDf,MAAOkB,GAAS,OAI5B,kBAACvC,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,SACrB,kBAACR,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,SAAf,aACA,2BACIC,SAAUtB,GACVnF,KAAK,OACLmC,KAAK,QACLlH,UAAU,qBACVyL,YAAalD,EAAU,wBAA0B,kBACjDf,MAAOoB,GAAe,MAG9B,kBAACxC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,OAAf,SACA,2BACIxG,KAAK,OACLmC,KAAK,MACLlH,UAAU,qBACVwL,SAvQd,SAAAxB,GACd5B,EFhDe,SAAAZ,GACnB,OAAOA,EACFC,QAAQ,MAAO,IACfA,QAAQ,cAAe,SACvBA,QAAQ,cAAe,SACvBA,QAAQ,mBAAoB,SAC5BA,QAAQ,gBAAiB,ME0CnBkE,CAAQ3B,EAAEnJ,OAAO2G,QAExB,IAAIA,EAAQwC,EAAEnJ,OAAO2G,MACjBN,EAAO8C,EAAEnJ,OAAOqG,KAEpBoC,EAAQ,2BACDvB,GADA,kBAEFb,EAAOM,MAgQgBoE,UAAU,KACVH,YAAY,iBACZjE,MAAOW,GAAO,GACduD,UAAQ,KAGhB,kBAACtF,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,MAAf,QACA,2BACIC,SAAUvB,GACVlF,KAAK,OACLmC,KAAK,KACLlH,UAAU,qBACVwH,MAAOO,EAAK8D,IAAM,OAI9B,kBAAC1F,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,YAAf,wBACA,2BACIxG,KAAK,OACLmC,KAAK,WACLlH,UAAWgJ,EACXyC,YAAY,qBACZD,SAAUzB,GACVgC,UAAWhC,GACXvC,MAAOO,EAAK0C,UAAY,MAGhC,kBAACrE,EAAA,EAAD,CAAKC,GAAI,GAAT,OAEA,yBAAKrG,UAAU,WACP,+BACI,2BACI+E,KAAK,QACL/E,UAAU,qBACVkH,KAAK,UACL8E,gBAAc,IALtB,aASA,6BACA,+BACI,2BAAOjH,KAAK,QACR/E,UAAU,qBACVkH,KAAK,YAHb,eAUZ,kBAACf,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,2BACIrG,UAAU,kBACVkH,KAAK,UACLnC,KAAK,WACLkH,QAAS1D,EACTiD,SA1HJ,WACxB7C,EAAS,IACTE,EAAe,IAKXL,GAHCD,MAwHmB,0BAAMvI,UAAU,gBAAhB,oBAOhB,kBAACoG,EAAA,EAAD,CAAKC,GAAI,CAAEQ,KAAM,IACb,yBAAK7G,UAAU,OACX,wBAAIA,UAAU,YAAd,eAGCuI,EAAU,kBAACpC,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SACtD,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,2BAAOkF,QAAQ,WAAf,YACA,2BACIrE,KAAK,UACLsE,SAAUpB,GACVpK,UAAU,qBACVoL,KAAK,OACLvD,GAAG,cAGN,GACT,kBAAC1B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,OAAf,SACChD,EACD,2BACIqD,UAAU,IACVJ,SAAUpB,GACVrF,KAAK,OACLmC,KAAK,cACLlH,UAAU,qBACVyL,YAAY,wBACZjE,MAAOO,EAAKmB,QAAQb,KAAO,KAE7B,2BACEuD,UAAU,IACVJ,SA7VR,SAAAxB,GACpB,IAAI3B,EAAM2B,EAAEnJ,OAAO2G,MAAMC,QAAQ,UAAW,IAC5Ca,EAAOD,GAEY,IAAfA,EAAI3B,OACJ3F,IAAM6G,IAAN,mCAAsCS,EAAtC,UACKtG,MAAK,SAAAmK,GACGA,EAAIvK,KAAKwK,KAeVpD,GAAc,IAddA,GAAc,GACdO,EAAQ,2BACDvB,GADA,IAEHmB,QAAQ,2BACDnB,EAAKmB,SADL,IAEHkD,KAAMF,EAAIvK,KAAK0K,WACfhE,IAAKA,EACLiE,OAAQJ,EAAIvK,KAAK4K,WACjB3H,MAAOsH,EAAIvK,KAAK6K,GAChBC,aAAcP,EAAIvK,KAAK+K,gBAQtCtK,OAAM,SAAAC,GAAG,OAAIC,QAAQd,MAAM,oCAAqCa,MAErEiH,EAAQ,2BACDvB,GADA,IAEHmB,QAAQ,2BACDnB,EAAKmB,SADL,IAEHb,IAAKA,QA+TWtD,KAAK,OACLmC,KAAK,MACLlH,UAAU,qBACVwH,MAAOa,GAAO,MAGtB,kBAACjC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,UAAf,gBACA,2BACIC,SAAUpB,GACVvC,GAAG,SACH9C,KAAK,OACLmC,KAAK,SACLlH,UAAU,qBACVyL,YAAY,kBACZkB,SAAU7D,EACVtB,MAAOO,EAAKmB,QAAQoD,QAAU,OAK1C,kBAACnG,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,cAAf,iBACA,2BACI1D,GAAG,aACH9C,KAAK,OACLmC,KAAK,aACLlH,UAAU,qBACVwL,SAAUpB,GACV5C,MAAOO,EAAKmB,QAAQ0D,YAAc,MAG1C,kBAACxG,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,gBAAf,YACA,2BACI1D,GAAG,GACH9C,KAAK,OACLmC,KAAK,eACLlH,UAAU,qBACV2M,SAAU7D,EACV0C,SAAUpB,GACV5C,MAAOO,EAAKmB,QAAQuD,cAAgB,OAIhD,kBAACtG,EAAA,EAAD,CAAKxD,MAAO,CAAEmJ,aAAc,SACxB,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,UAAf,eACA,2BACIC,SAAUpB,GACVvC,GAAG,SACH9C,KAAK,SACL8H,IAAI,IACJ3F,KAAK,SACLlH,UAAU,qBACVwH,MAAOO,EAAKmB,QAAQ4D,QAAU,MAGtC,kBAAC1G,EAAA,EAAD,CAAKC,GAAI,GAEDkC,EACI,oCACI,2BAAOgD,QAAQ,SAAf,YACA,2BACIxG,KAAK,OACLmC,KAAK,QACLW,GAAG,QACH7H,UAAU,qBACV2M,SAAU7D,EACV0C,SAAUpB,GACV5C,MAAOO,EAAKmB,QAAQtE,OAAS,MAKjC,oCACI,2BAAO2G,QAAQ,SAAf,QACA,4BACIrE,KAAK,QACLW,GAAG,QACH7H,UAAU,qBACV2M,SAAU7D,EACV0C,SAAUpB,GACV5C,MAAOO,EAAKmB,QAAQtE,OAAS,IAE7B,4BAAQ4C,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,SAMxB,kBAACpB,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,QAAf,eACA,2BACIxG,KAAK,OACLyG,SAAUpB,GACVlD,KAAK,OACLW,GAAG,OACH7H,UAAU,qBACV2M,SAAU7D,EACVtB,MAAOO,EAAKmB,QAAQkD,MAAQ,UAOpD,kBAACjG,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKrG,UAAU,OACX,wBAAIA,UAAU,YAAd,gCAGA,kBAACmG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,qBAAf,8BACA,2BACIxG,KAAK,OACLmC,KAAK,oBACLlH,UAAU,qBACVyL,YAAalD,EAAU,wBAA0B,kBACjDiD,SAAUnB,GACV7C,OAAO,UAAAO,EAAKyB,uBAAL,eAAsBuD,oBAAqB,MAG1D,kBAAC3G,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,kBAAf,UACA,2BACIxG,KAAK,OACLmC,KAAK,iBACLlH,UAAU,qBACVyL,YAAY,gBACZD,SAAUnB,GACV7C,MAAK,UAAEO,EAAKyB,uBAAP,aAAE,EAAsBtC,SAIzC,kBAACf,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,2BAAOkF,QAAQ,eAAf,sBACA,8BACIvL,UAAU,qBACVkH,KAAK,cACLsE,SAAUnB,GACV7C,OAAO,UAAAO,EAAKyB,uBAAL,eAAsBwD,cAAe,UAQpE,kBAAC7G,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKrG,UAAU,OACX,wBAAIA,UAAU,YAAd,sBAGA,kBAACmG,EAAA,EAAD,CAAKxD,MAAO,CAAEmJ,aAAc,SACxB,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,SAAf,WACA,2BACIxG,KAAK,OACLyG,SAAUrB,GACVnK,UAAU,qBACVkH,KAAK,QACLM,MAAOA,GAAS,GAChBkE,UAAQ,KAGhB,kBAACtF,EAAA,EAAD,CAAKC,GAAI,GAAT,iBAEA,yBAAKrG,UAAU,WACP,+BACI,2BACI+E,KAAK,QACL/E,UAAU,qBACVkH,KAAK,UACL8E,gBAAc,IALtB,OASA,6BACA,+BACI,2BACIjH,KAAK,QACL/E,UAAU,qBACVkH,KAAK,YAJb,gBAcxB,kBAACf,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKrG,UAAU,OACX,wBAAIA,UAAU,YAAd,8BAGA,kBAACmG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,SAAf,WACA,2BACIC,SAAUrB,GACVpF,KAAK,QACL/E,UAAU,qBACVkH,KAAK,QACLmE,aAAa,eACbK,UAAQ,EACRlE,MAAOO,EAAKoB,KAAK8D,OAAS,MAGlC,kBAAC7G,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,YAAf,WACA,2BACIC,SAAUrB,GACVpF,KAAK,WACL/E,UAAU,qBACVkH,KAAK,WACLmE,aAAa,eACbK,UAAQ,KAGhB,kBAACtF,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,yBAAf,mBACA,2BACIC,SAAUrB,GACVpF,KAAK,WACL/E,UAAU,qBACVkH,KAAK,wBACLwE,UAAQ,MAIpB,kBAACvF,EAAA,EAAD,CAAKxD,MAAO,CAAEiE,UAAW,OAAQkF,aAAc,SAC3C,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,WAAf,gBACA,4BACIvL,UAAU,qBACVkH,KAAK,OACLM,MAAOO,EAAKoB,KAAK+D,MAAQ,IAEzB,4BAAQ1F,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,cAGR,kBAACpB,EAAA,EAAD,CAAKC,GAAI,GAAT,kBAEA,yBAAKrG,UAAU,UACP,+BACI,2BACI+E,KAAK,QACL/E,UAAU,qBACVkH,KAAK,SACL8E,gBAAc,IALtB,OASA,6BACA,+BACI,2BACIjH,KAAK,QACL/E,UAAU,qBACVkH,KAAK,WAJb,gBAcxB,kBAACf,EAAA,EAAD,CAAKxD,MAAO,CAAEmJ,aAAc,UACxB,kBAAC1F,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKrG,UAAU,OACX,wBAAIA,UAAU,YAAd,gBACA,kBAACmE,EAAA,EAAD,CAAQY,KAAK,UAAb,iB,sECxjBTnB,gBAZS,SAAAC,GACvB,MAAO,CACNwB,QAASxB,EAAM0B,gBACfK,MAAO/B,EAAMgC,iBAIY,SAAAC,GAAQ,MAAK,CACvCqH,yBAA0B,SAAAC,GAAS,OAAItH,EPnIO,CAC3Cf,KAAM,kCACNC,QOiI8EoI,KACjFC,kBAAmB,SAAAD,GAAS,OAAItH,EAASC,EAA4BqH,QAGvDxJ,EAlJM,SAACrE,GAAW,IAAD,MACvB+N,EAA2B/N,EAA3B+N,YAAatN,EAAcT,EAAdS,UADU,EAGLR,oBAAS,GAHJ,mBAGxB+N,EAHwB,KAGjBC,EAHiB,OAIOhO,oBAAS,GAJhB,mBAIxBiO,EAJwB,KAIXC,EAJW,OAKiBlO,oBAAS,GAL1B,mBAKxBmO,EALwB,KAKNC,EALM,OAMCpO,oBAAS,GANV,mBAMxBqO,EANwB,KAMdC,EANc,KAQzBpL,EAAS,kBAAM8K,GAAUD,IAEzBQ,EAAe,WACpBxO,EAAM4N,yBAAyBG,EAAYzF,IAC3C6F,GAAgBD,GAChBK,GAAY,IAGPE,EAAoB,WACzBzO,EAAM8N,kBAAkBC,EAAYzF,IACpC+F,GAAqBD,GACrBG,GAAY,IAGb,OACC,6BACC,kBAAC3J,EAAA,EAAD,CAAQnE,UAAU,cAAc2C,MAAO,CAACsL,OAAQ,WAAYlO,QAAS2C,GACpE,kBAAC,IAAD,CAAiB/C,KAAMuO,OACxB,kBAACC,GAAA,EAAD,CAAO/N,OAAQmN,EAAO7K,OAAQA,EAAQ1C,UAAWA,GAChD,kBAACoO,GAAA,EAAD,CAAa1L,OAAQA,GACpB,wBAAI1C,UAAU,wBAAd,qBACmB,kBAAC,IAAD,CAAiBL,KAAMuO,QAG3C,kBAACG,GAAA,EAAD,KACA,oCADA,WACcf,QADd,IACcA,OADd,EACcA,EAAapG,KAD3B,IACiC,6BACjC,kDAFA,WAE4BoG,QAF5B,IAE4BA,OAF5B,EAE4BA,EAAa7C,SAFzC,IAEmD,6BACnD,wCAHA,WAGkB6C,QAHlB,IAGkBA,OAHlB,EAGkBA,EAAa5E,MAH/B,IAGsC,6BACtC,mCAJA,WAIa4E,QAJb,IAIaA,OAJb,EAIaA,EAAanF,IAJ1B,IAI+B,6BAC/B,kCALA,WAKYmF,QALZ,IAKYA,OALZ,EAKYA,EAAazB,GALzB,IAK6B,6BAE5B,kBAACsC,GAAA,EAAD,CAAO/N,OAAQqN,EAAa/K,OAAQqL,EAAcO,SAAUT,EAAWnL,OAAS6L,GAC/E,kBAACH,GAAA,EAAD,iCACA,kBAACC,GAAA,EAAD,KAEE9O,EAAM8F,QAAQG,aAEb,kBAACuB,EAAA,EAAD,CAAOC,YAAU,EAACwH,SAAO,GACxB,+BACC,4BACC,sCACA,sCACA,0CAGF,yCACEjP,EAAM8F,QAAQG,oBADhB,aACE,EAA4BlF,KAAI,SAAA2G,GAAW,OAC3C,4BACC,4BAAKA,EAAYsD,MACjB,4BAAKtD,EAAYE,MACjB,4BAAKF,EAAYG,gBAMtB,kBAAC,IAAD,CACCpH,UAAU,SACV+E,KAAK,WACLtC,MAAM,UACN4E,OAAQ,IACRC,MAAO,OAIV,kBAACmH,GAAA,EAAD,KACA,kBAACtK,EAAA,EAAD,CAAQnE,UAAU,2BAA2BD,QAASgO,GAAtD,YAID,kBAACI,GAAA,EAAD,CAAO/N,OAAQuN,EAAkBjL,OAAQsL,EAAmBM,SAAUT,EAAWnL,OAAS6L,GACzF,kBAACH,GAAA,EAAD,6BACA,kBAACC,GAAA,EAAD,KAEE9O,EAAMqG,MAEL,kBAACmB,EAAA,EAAD,CAAOC,YAAU,EAACwH,SAAO,GACxB,+BACC,4BACC,yCACA,gDACA,8CAGF,yCACEjP,EAAMqG,aADR,iBACE,EAAaA,aADf,aACE,EAAoBtF,KAAI,SAAAoO,GAAI,OAC5B,4BACC,4BAAKA,EAAKxH,MACV,4BAAKwH,EAAKC,WAAWC,MAAM,KAAK,GAAGnH,QAAQ,IAAK,MAChD,4BACC,uBAAGoH,KAAMH,EAAKI,KAAMjO,OAAO,UAC1B,kBAACsD,EAAA,EAAD,CAAQnE,UAAU,4BACjB,kBAAC,IAAD,CAAiBL,KAAMoP,eAS/B,kBAAC,IAAD,CACC/O,UAAU,SACV+E,KAAK,WACLtC,MAAM,UACN4E,OAAQ,IACRC,MAAO,OAIV,kBAACmH,GAAA,EAAD,KACA,kBAACtK,EAAA,EAAD,CAAQnE,UAAU,2BAA2BD,QAASiO,GAAtD,aAKF,kBAACS,GAAA,EAAD,KACC,kBAACtK,EAAA,EAAD,CAAQnE,UAAU,2BAA2BD,QAASiO,GAAtD,qBACA,kBAAC7J,EAAA,EAAD,CAAQnE,UAAU,2BAA2BD,QAASgO,GAAtD,gBACA,kBAAC5J,EAAA,EAAD,CAAQnE,UAAU,2BAA2BD,QAAS2C,GAAtD,gBCiEUkB,gBANS,SAAAC,GACpB,MAAM,CACFyB,SAAUzB,EAAM0B,oBATG,SAAAO,GAAQ,MAAK,CACpChB,aAAc,SAAAlF,GAAK,OAAIkG,EAASC,EAAqBnG,KACrDoP,eAAgB,SAAA3J,GAAO,OAAIS,ER7LD,SAAAT,GAAO,MAAK,CACtCN,KAAM,uBACNC,QAASK,GQ2L2BU,CAAuBV,KAC3DJ,cAAe,SAAAC,GAAI,OAAIY,EAASC,EAAsBb,KACtD+J,cAAe,SAAApH,GAAE,OAAI/B,ERvKI,SAAA+B,GAAE,MAAK,CAChC9C,KAAM,sBACNC,QAAS6C,GQqKqB9B,CAAsB8B,QASzCjE,EA7LE,SAAArE,GAAU,IAAD,UAEtB2G,qBAAU,WACN3G,EAAMuF,aAAa,uBACnBvF,EAAM0F,cAAc,KACtB,IAEF,IAIMiK,EAAqB,uCAAG,WAAMhK,GAAN,SAAA2F,EAAA,sEACpBtL,EAAM0F,cAAcC,GADA,2CAAH,sDAmC3B,OACI,yBAAKlF,UAAU,OACX,kBAACmG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,2BAAOkF,QAAQ,UAAf,cACA,2BACIxG,KAAK,OACL/E,UAAU,qBACVyL,YAAY,oCACZD,SAhDA,SAAAxB,GAChBzK,EAAMyP,eAAehF,EAAEnJ,OAAO2G,YAmD1B,qCAESjI,EAAM+F,SAASA,UAAY/F,EAAM+F,SAAS6J,OACvC,kBAAC,IAAD,CACInP,UAAU,SACV+E,KAAK,WACLtC,MAAM,UACN4E,OAAQ,IACRC,MAAO,MAGX,kBAACP,EAAA,EAAD,CAAOC,YAAU,GACb,+BACI,4BACI,qCACA,mCACA,wCACA,sCACA,wBAAIrE,MAAO,CAACyM,UAAW,WAAvB,qBACA,uCACA,0CAGR,+BACC7P,EAAM+F,SAASA,SAAShF,KAAI,SAAC+E,EAAS7E,GAAV,OACzB,wBAAIC,IAAKD,GACL,4BAAK6E,EAAQ6B,MACb,4BAAK7B,EAAQwG,IACb,4BAAKxG,EAAQqD,OACb,4BAAI,kBAAC,GAAD,CAAoB4E,YAAajI,KACrC,wBAAI1C,MAAO,CAACyM,UAAW,WACnB,4BACIvH,GAAIxC,EAAQwC,GACZ9H,QAAU,kBA7E3B8H,EA6EgDxC,EAAQwC,QA5E3EtI,EAAM0D,QAAQC,KAAK,CACfyB,SAAU,wBACVU,QAASwC,IAHM,IAAAA,GA8EiB7H,UAAU,mBAEV,kBAAC,IAAD,CAAiBL,KAAM0D,QAG/B,4BACI,4BACIrD,UAAU,kBACVD,QAAU,kBA/E/B,SAAAsF,GACf9F,EAAM0D,QAAQC,KAAK,CACfyB,SAAU,sBACVC,MAAOS,EACPkE,KAAK,IA2E2C8F,CAAWhK,KAE3B,kBAAC,IAAD,CAAiB1F,KAAM2P,QAG/B,4BACI,4BACIzH,GAAIxC,EAAQwC,GACZ9H,QAAU,kBA/E5B8H,EA+EgDxC,EAAQwC,QA9E1EkD,KAAKC,KAAK,CACNpL,MAAO,gDACPwL,KAAM,iFACNzL,KAAM,UACN4P,kBAAkB,EAClBC,kBAAmB,UACnBtE,mBAAoB,MACpBuE,iBAAkB,WAClBC,kBAAmB,YAEtB3N,MAAK,SAAAmK,GACCA,EAAI1E,OACHjI,EAAM0P,cAAcpH,MAbV,IAAAA,GAgFkB7H,UAAU,qBAEV,kBAAC,IAAD,CAAiBL,KAAMgQ,aAMvC,kBAACC,GAAA,EAAD,CAAYC,aAAW,2BAEnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACVgQ,OAAK,EACLjQ,QAAS,kBAAMmP,EAAsB,OAG7C,kBAACY,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACViQ,UAAQ,EACRlQ,QAAS,wBAAMmP,GAAsB,UAAA3P,EAAM+F,SAASgB,sBAAf,eAA+B4J,cAAe,IACnFvD,UAAU,UAAApN,EAAM+F,SAASgB,sBAAf,eAA+B4J,gBAA/B,UAA+C3Q,EAAM+F,SAASgB,sBAA9D,aAA+C,EAA+BzB,SAI/FsL,MAAK,UAAC5Q,EAAM+F,SAASgB,sBAAhB,aAAC,EAA+B8J,WAAWC,KAAK,GAAG/P,KAAI,SAACgQ,EAAIC,GAAL,aACzD,kBAACT,GAAA,EAAD,CACIrP,IAAK8P,EACLvQ,WACI,UAACT,EAAM+F,SAASgB,sBAAhB,aAAC,EAA+B4J,eAAkBK,EAAI,EACtD,eAAiB,QAGrB,kBAACR,GAAA,EAAD,CAAgBhQ,QAAS,kBAAMmP,EAAsBqB,EAAI,KACxDA,EAAI,OAKb,kBAACT,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACVwQ,MAAI,EACJzQ,QAAS,wBAAMmP,GAAsB,UAAA3P,EAAM+F,SAASgB,sBAAf,eAA+B4J,cAAe,IACnFvD,UAAU,UAAApN,EAAM+F,SAASgB,sBAAf,eAA+B4J,gBAA/B,UAA+C3Q,EAAM+F,SAASgB,sBAA9D,aAA+C,EAA+B8J,cAGhG,kBAACN,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACVyQ,MAAI,EACJ1Q,QAAS,wBAAMmP,EAAqB,UAAC3P,EAAM+F,SAASgB,sBAAhB,aAAC,EAA+B8J,sB,SCtKtGM,GAAY,CACdC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjB3O,MAAO,UACP4O,QAAS,OACTC,WAAY,2BAGVC,GAAc,CAChBL,YAAa,WAGXM,GAAc,CAChBN,YAAa,WAGXO,GAAc,CAChBP,YAAa,WA2DFtN,gBAVS,SAAAC,GACpB,MAAM,CACF+B,MAAO/B,EAAMgC,iBAIM,SAAAC,GAAQ,MAAK,CACpC4L,iBAAkB,SAAA9L,GAAK,OAAIE,ERxFmB,CAC9Cf,KAAM,qBACNC,QQsF6DY,QAGlDhC,EAxDQ,SAAArE,GAAU,IAAD,EASxBoS,eANAC,EAHwB,EAGxBA,cACAC,EAJwB,EAIxBA,aACAC,EALwB,EAKxBA,cACAC,EANwB,EAMxBA,aACAC,EAPwB,EAOxBA,aACAC,EARwB,EAQxBA,aAGJ/L,qBAAU,WACN3G,EAAMmS,iBAAiBE,KACxB,CAACA,IAGJ,IAAMjP,EAAQuP,mBAAQ,8BAAC,uCAChBxB,IACCqB,EAAeR,GAAc,IAC7BS,EAAeR,GAAc,IAC7BS,EAAeR,GAAc,MACjC,CACAM,EACAE,EACAD,IAGEpM,EAAQgM,EAActR,KAAI,SAAAoO,GAAI,OAChC,wBAAIjO,IAAKiO,EAAKI,MACXJ,EAAKI,KADR,MACiBJ,EAAK7H,KADtB,aAKJ,OACI,6BACI,wBAASgL,EAAa,CAAElP,UACpB,0BAAWmP,KACX,kFACA,kBAAC,IAAD,CAAiBnS,KAAMwS,OAE3B,yCACA,4BAAKvM,OCkKFhC,I,MAAAA,aAhBS,SAAAC,GACpB,MAAM,CACFyB,SAAUzB,EAAM0B,gBAChBC,aAAc3B,EAAM4B,oBACpBG,MAAO/B,EAAMgC,iBAIM,SAAAC,GAAQ,MAAK,CACpCsM,iBAAkB,SAAAzQ,GAAI,OAAImE,EPvOG,SAAAnE,GAAI,MAAK,CACtCoD,KAAM,0BACNC,QAASrD,GOqO0BoE,CAA0BpE,KAC7D0Q,kBAAmB,SAAA1Q,GAAI,OAAImE,EPnOG,SAAAnE,GAAI,MAAK,CACvCoD,KAAM,2BACNC,QAASrD,GOiO2BoE,CAA2BpE,KAC/DmD,aAAc,SAAAlF,GAAK,OAAIkG,EAASC,EAAqBnG,KACrDqF,cAAe,kBAAMa,EVhOc,CACnCf,KAAM,6BUgONuN,YAAa,SAAC1M,EAAO2M,GAAR,OAAuBzM,ETtOb,SAACF,EAAOP,GAAR,MAAqB,CAC5CN,KAAM,eACNC,QAAS,CACLY,MAAOA,EACPP,QAASA,ISkOgCU,CAAoBH,EAAO2M,QAG7D3O,EArOM,SAAArE,GAAU,IAAD,IAEYC,mBAAS,IAFrB,mBAEnBgT,EAFmB,KAENC,EAFM,KAI1BvM,qBAAU,WAEN3G,EAAMuF,aACFvF,EAAMkE,SAASmB,MACf,wBACA,qBAGJrF,EAAM0F,gBACNyN,IAEInT,EAAMkE,SAASmB,MACf6N,EAAelT,EAAMkE,SAASmB,OAEzBrF,EAAMkE,SAAS4B,SACpBoN,EAAe,CAACF,WAAYhT,EAAMkE,SAAS4B,YAGjD,CAAC9F,EAAMiG,eAET,IAAMmN,EAAoB,SAAA3I,GACtByI,EAAe,2BACRD,GADO,kBAETxI,EAAEnJ,OAAOqG,KAAO8C,EAAEnJ,OAAO2G,UAI5BkL,EAAe,WACbnT,EAAMiG,aAAaoN,UACnB7H,KAAKC,KAAK,CACNpL,MAAO,WACPwL,KAAM,sCACNzL,KAAM,UACNuL,mBAAoB,YAExB3L,EAAMiG,aAAaoN,SAAU,GAE7BrT,EAAMiG,aAAahE,QACnBuJ,KAAKC,KAAK,CACNpL,MAAO,SACPwL,KAAM,+CACNzL,KAAM,UACNuL,mBAAoB,YAExB3L,EAAMiG,aAAahE,OAAQ,IAI7B8Q,EAAW,uCAAG,4BAAAzH,EAAA,6DACZjF,EAAQ,IAAIiN,SADA,SAEVtT,EAAMqG,MAAMkN,cAAcC,SAAQ,SAAArE,GACpC9I,EAAMoN,OAAO,UAAWtE,MAHZ,YAKZnP,EAAMqG,MAAMkN,cAAcpM,OAAS,GALvB,gCAMNnH,EAAM+S,YAAY1M,EAAO4M,EAAYD,YAN/B,2CAAH,qDAUXU,EAAsB,uCAAG,WAAMjJ,GAAN,SAAAa,EAAA,yDAC3Bb,EAAEc,kBAEEvL,EAAMkE,SAASmB,MAHQ,gCAIjBrF,EAAM8S,kBAAkBG,GAJP,6CAOjBjT,EAAM6S,iBAAiBI,GAPN,wBAUrBF,IAVqB,4CAAH,sDAa5B,OACI,0BAAMhH,SAAU2H,EAAwBtQ,MAAO,CAACmJ,aAAc,UAC1D,kBAAC3F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKrG,UAAU,OACX,kBAACmG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,cAAf,cACA,4BACIC,SAAUmH,EACVzL,KAAK,aACLnC,KAAK,OACL0G,YAAY,YACZzL,UAAU,qBACV0L,UAAQ,EACRlE,MAAOgL,EAAYD,YAEnB,gDAEIhT,EAAM+F,SAASA,SACf/F,EAAM+F,SAASA,SAAShF,KAAI,SAAA+E,GAAO,OAC/B,4BAAQ5E,IAAK4E,EAAQwC,GAAIL,MAAOnC,EAAQwC,IACnCxC,EAAQ6B,SAEX,KAIlB,kBAACd,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,QAAf,UACA,2BACIC,SAAUmH,EACVzL,KAAK,OACLnC,KAAK,OACL/E,UAAU,qBACVyL,YAAY,6BACZC,UAAQ,EACRlE,MAAOgL,EAAYU,QAG3B,kBAAC9M,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,QAAf,UACA,2BACIC,SAAUmH,EACVzL,KAAK,OACLnC,KAAK,OACL/E,UAAU,qBACV0L,UAAQ,EACRlE,MAAOgL,EAAYjI,QAG3B,kBAACnE,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,QAAf,UACA,2BACIC,SAAUmH,EACVzL,KAAK,OACLnC,KAAK,OACL/E,UAAU,qBACV0L,UAAQ,EACRlE,MAAOgL,EAAYrL,SAI/B,kBAAChB,EAAA,EAAD,CAAKxD,MAAO,CAACiE,UAAW,SACpB,kBAACR,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,SAAf,WACA,8BACIC,SAAUmH,EACVzL,KAAK,QACLlH,UAAU,eACVwH,MAAOgL,EAAYW,SAG3B,kBAAC/M,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,aAAf,gBACA,8BACIC,SAAUmH,EACVzL,KAAK,YACLlH,UAAU,eACVwH,MAAOgL,EAAYY,cAI/B,kBAACjN,EAAA,EAAD,CAAKxD,MAAO,CAACiE,UAAW,SACpB,kBAACR,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,YAAf,YACA,8BACIC,SAAUmH,EACVzL,KAAK,WACLlH,UAAU,eACVwH,MAAOgL,EAAYpL,YAG3B,kBAAChB,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAOkF,QAAQ,aAAf,aACA,8BACIC,SAAUmH,EACVzL,KAAK,YACLlH,UAAU,eACVwH,MAAOgL,EAAYa,cAI/B,kBAAClN,EAAA,EAAD,CAAKxD,MAAO,CAACiE,UAAW,SACpB,kBAACR,EAAA,EAAD,CAAKC,GAAI,GAAIrG,UAAU,YACnB,kBAAC,GAAD,OAEJ,kBAACoG,EAAA,EAAD,CAAKC,GAAI,GAAI1D,MAAO,CAACyM,UAAW,SAAUxI,UAAW,SACjD,kBAACzC,EAAA,EAAD,CACInE,UAAU,qCACV2M,SAAQ,UAAEpN,EAAMiG,oBAAR,aAAE,EAAoB8N,WAG1B/T,EAAMkE,SAASmB,MACf,wBACA,yBAGArF,EAAMiG,aAAa8N,UACf,kBAAC,IAAD,CACIvO,KAAK,WACLtC,MAAM,UACN4E,OAAQ,GACRC,MAAO,KAEb,cCrC3B1D,gBANS,SAAAC,GACpB,MAAO,CACH2B,aAAc3B,EAAM4B,wBARD,SAAAK,GAAQ,MAAK,CACpChB,aAAc,SAAAlF,GAAK,OAAIkG,EAASC,EAAqBnG,KACrD2T,kBAAmB,SAAArO,GAAI,OAAIY,ERhJE,SAAAZ,GAAI,MAAK,CACtCH,KAAM,8BACNC,QAASE,GQ8I2Ba,CAA0Bb,KAC9DsO,kBAAmB,SAAA3L,GAAE,OAAI/B,ER5II,SAAA+B,GAAE,MAAK,CACpC9C,KAAM,0BACNC,QAAS6C,GQ0IyB9B,CAA0B8B,QASjDjE,EAlKU,SAAArE,GAAU,IAAD,YAE9B2G,qBAAU,WACN3G,EAAMuF,aAAa,0BACnBvF,EAAMgU,kBAAkB,KACzB,IAEH,IA4BMrE,EAAqB,uCAAG,WAAMhK,GAAN,SAAA2F,EAAA,sEACpBtL,EAAMgU,kBAAkBrO,GADJ,2CAAH,sDAI3B,OACI,6BAEmD,IAA3C,UAAA3F,EAAMiG,aAAaA,oBAAnB,eAAiCkB,QACjC,uBAAG/D,MAAO,CAACF,MAAO,SAAlB,mCACClD,EAAMiG,aAAaA,cAAgBjG,EAAMiG,aAAa8N,UAEnD,kBAAC,IAAD,CACItT,UAAU,SACV+E,KAAK,WACLtC,MAAM,UACN4E,OAAQ,IACRC,MAAO,MAIX,yBAAK3E,MAAO,CAACmJ,aAAc,SACtBvM,EAAMiG,aAAaA,aAAalF,KAAI,SAAC2G,EAAazG,GAAd,aACjC,yBACIC,IAAKD,EACLR,UAAU,cACVD,QAAS,kBAlClB,SAAA8H,GACf,IAAI4L,EAAqBlU,EAAMiG,aAAaA,aAC3CkO,QAAO,SAAAzM,GAAW,OAAIA,EAAYY,IAAMA,KAAI,GAC7CtI,EAAM0D,QAAQC,KAAK,CACfyB,SAAU,wBACVC,MAAO6O,IA6B4BpE,CAAWpI,EAAYY,MAEtC,yBAAK7H,UAAU,oBACX,kBAAC,IAAD,CAAiBA,UAAU,aAAaL,KAAMgU,MAC7C1M,EAAYsD,MAEjB,yBAAKvK,UAAU,oBACX,kBAAC,IAAD,CAAiBA,UAAU,aAAaL,KAAMiU,MAC7C3M,EAAYE,MAEjB,yBAAKnH,UAAU,iCACX,kBAAC,IAAD,CAAiBA,UAAU,aAAaL,KAAM6G,MADlD,UAEKS,EAAY5B,eAFjB,aAEK,EAAqB6B,MAE1B,yBAAKlH,UAAU,oBACX,uBACI6H,GAAIZ,EAAYY,GAChB9H,QAAS,kBAtEnB8H,EAsE2CZ,EAAYY,QArE7EkD,KAAKC,KAAK,CACNpL,MAAO,mDACPwL,KAAM,oFACNzL,KAAM,UACN4P,kBAAkB,EAClBC,kBAAmB,UACnBtE,mBAAoB,MACpBuE,iBAAkB,WAClBC,kBAAmB,YAElB3N,MAAK,SAAAmK,GACEA,EAAI1E,QACJjI,EAAMiU,kBAAkB3L,GACxBtI,EAAM0D,QAAQC,KAAK,oBAdT,IAAA2E,GAuEU7H,UAAU,iBAEV,kBAAC,IAAD,CAAiBL,KAAMgQ,YAKvC,kBAACC,GAAA,EAAD,CAAYC,aAAW,2BACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACVgQ,OAAK,EACLjQ,QAAS,kBAAMmP,EAAsB,OAG7C,kBAACY,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACViQ,UAAQ,EACRlQ,QACI,wBAAMmP,GAAsB,UAAA3P,EAAMiG,aAAac,sBAAnB,eAAmC4J,cAAe,IAElFvD,UACI,UAAApN,EAAMiG,aAAac,sBAAnB,eAAmC4J,gBAAnC,UACG3Q,EAAMiG,aAAac,sBADtB,aACG,EAAmCzB,SAKjDsL,MAAK,UAAC5Q,EAAMiG,aAAac,sBAApB,aAAC,EAAmC8J,WAAWC,KAAK,GAAG/P,KAAI,SAACgQ,EAAIC,GAAL,aAC7D,kBAACT,GAAA,EAAD,CACIrP,IAAK8P,EACLvQ,WACI,UAACT,EAAMiG,aAAac,sBAApB,aAAC,EAAmC4J,eAAkBK,EAAI,EAC1D,eAAiB,QAGrB,kBAACR,GAAA,EAAD,CAAgBhQ,QAAS,kBAAMmP,EAAsBqB,EAAI,KACxDA,EAAI,OAKb,kBAACT,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACVwQ,MAAI,EACJzQ,QACI,wBAAMmP,GAAsB,UAAA3P,EAAMiG,aAAac,sBAAnB,eAAmC4J,cAAe,IAElFvD,UACI,UAAApN,EAAMiG,aAAac,sBAAnB,eAAmC4J,gBAAnC,UACG3Q,EAAMiG,aAAac,sBADtB,aACG,EAAmC8J,cAIlD,kBAACN,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACI/P,UAAU,OACVyQ,MAAI,EACJ1Q,QAAS,wBAAMmP,EAAqB,UAAC3P,EAAMiG,aAAac,sBAApB,aAAC,EAAmC8J,qBC9C7FxM,I,OAAAA,aAfS,SAAAC,GACpB,MAAO,CACH+B,MAAO/B,EAAMgC,aAAaD,MAC1BuJ,OAAQtL,EAAMgC,aAAasJ,OAC3B7J,SAAUzB,EAAM0B,gBAAgBD,aAIb,SAAAQ,GAAQ,MAAK,CACpCX,WAAY,SAAAD,GAAI,OAAIY,EAASC,EAAmBb,KAChDJ,aAAc,SAAAlF,GAAK,OAAIkG,EAASC,EAAqBnG,KACrDiU,iBAAkB,kBAAM/N,EZxFW,CACnCf,KAAM,6BYwFNK,oBAAqB,SAAAC,GAAO,OAAIS,EAASC,EAA4BV,QAG1DzB,EA7FD,SAAArE,GAAU,IAAD,MAEnB2G,qBAAU,WACN3G,EAAM4F,WAAW,GACjB5F,EAAMuF,aAAa,qBACnBvF,EAAMsU,qBACR,IAOF,OACQ,kBAAC1N,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKrG,UAAU,OACX,2BAAOuL,QAAQ,oBAAf,cACA,4BAAQvL,UAAU,mBAAmBwL,SAV7B,SAAAxB,GACF,yBAAlBA,EAAEnJ,OAAO2G,OACTjI,EAAM6F,oBAAoB4E,EAAEnJ,OAAO2G,SASnB,yDADJ,UAGQjI,EAAM+F,gBAHd,aAGQ,EAAgBhF,KAAI,SAAC+E,EAAS7E,GAAV,OAChB,4BAAQC,IAAKD,EAAOgH,MAAOnC,EAAQwC,IAAKxC,EAAQ6B,YAMpE,kBAACd,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKrG,UAAU,OAEXT,EAAM4P,OAEN,kBAAC,IAAD,CACInP,UAAU,SACV+E,KAAK,WACLtC,MAAM,UACN4E,OAAQ,IACRC,MAAO,MAIY,IAAvB,UAAA/H,EAAMqG,aAAN,eAAac,QACb,uBAAG/D,MAAO,CAACF,MAAO,SAAlB,wCACA,kBAACsE,EAAA,EAAD,CAAOC,YAAU,EAACwH,SAAO,GACrB,+BACI,4BACI,yCACA,wCACA,8CAGR,yCAEQjP,EAAMqG,aAFd,aAEQ,EAAatF,KAAI,SAAAoO,GAAI,OACjB,4BACI,4BAAKA,EAAKxH,MACV,4BAAKwH,EAAKC,WAAWC,MAAM,KAAK,GAAGnH,QAAQ,IAAK,MAChD,wBAAI9E,MAAO,CAACyM,UAAW,WACnB,uBAAGvO,OAAO,SAASgO,KAAMH,EAAKI,MAC1B,4BAAQ9O,UAAU,mBACd,kBAAC,IAAD,CAAiBL,KAAMoP,sBCxDhE,YAAAxP,GAAK,OAChB,kBAACuU,EAAA,EAAD,CAAWC,OAAK,EAAC/T,UAAWC,IAAW,UAAW,CAAC,UAAWV,EAAMa,UACtE,kBAAC,EAAD,CAAQsC,OAAQnD,EAAMmD,SACtB,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAgBsR,OAAK,EAAClF,KAAK,IAAIvK,UAAW0P,IAC1C,kBAAC,EAAD,CAAgBD,OAAK,EAAClF,KAAK,uBAAuBvK,UAAW2P,KAC7D,kBAAC,EAAD,CAAgBF,OAAK,EAAClF,KAAK,aAAavK,UAAW4P,KACnD,kBAAC,EAAD,CAAgBH,OAAK,EAAClF,KAAK,yBAAyBvK,UAAW6P,KAC/D,kBAAC,EAAD,CAAgBJ,OAAK,EAAClF,KAAK,gBAAgBvK,UAAW8P,KACtD,kBAAC,EAAD,CAAgBL,OAAK,EAAClF,KAAK,kBAAkBvK,UAAW+P,QCyB5CC,I,cAxCD,SAAAhV,GAAU,IAAD,EAEOC,mBAAS,IAFhB,mBAEZyN,EAFY,KAELuH,EAFK,OAGahV,mBAAS,IAHtB,mBAGZqK,EAHY,KAGF4K,EAHE,OAI6BjV,oBAAS,GAJtC,mBAIZkV,EAJY,KAIMC,EAJN,OAKSnV,oBAAS,GALlB,mBAKZ2P,EALY,KAKJyF,EALI,KAsBnB,OACI,kBAACd,EAAA,EAAD,KACI,kBAAC3N,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKpG,UAAU,kBAAkBqG,GAAI,CAACQ,KAAM,EAAGC,OAAQ,IACnD,0BAAMwE,SAnBF,SAAAtB,GAChB4K,GAAU,GACV5K,EAAEc,iBAEF,IAAInJ,EAAO,CAACsL,MAAOA,EAAOpD,SAAUA,GAEpCvG,EAAKuR,MAAMlT,GACP,kBAAMpC,EAAM0D,QAAQC,KAAK,QACzB,WACIyR,GAAoB,GACpBC,GAAU,QAUF,4BAAI,kBAAC,IAAD,CAAiBjV,KAAMkD,MAA3B,YACA,2BAAO2I,SAAU,SAAAxB,GAAC,OAAIwK,EAASxK,EAAEnJ,OAAO2G,QAAQzC,KAAK,QAAQ/E,UAAU,eAAekH,KAAK,OAAOwE,UAAQ,IAC1G,2BAAOF,SAAU,SAAAxB,GAAC,OAAIyK,EAAYzK,EAAEnJ,OAAO2G,QAAQzC,KAAK,WAAW/E,UAAU,eAAekH,KAAK,WAAWwE,UAAQ,IAClHyD,EAAS,kBAAC,IAAD,CAAQpK,KAAK,WAAWtC,MAAM,UAAU4E,OAAQ,GAAIC,MAAO,KAAS,GAC7EoN,EAAmB,6DAAqC,GAC1D,kBAACvQ,EAAA,EAAD,CAAQnE,UAAU,gBAAlB,iBChCT,cAAO,IAAD,EAEOR,oBAAS,GAFhB,mBAEZY,EAFY,KAEJ0U,EAFI,KAGbpS,EAAS,kBAAMoS,GAAS1U,IAE9B,OACE,kBAAC,IAAD,KACF,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO4T,OAAK,EAAClF,KAAK,SAASvK,UAAWgQ,KACtC,yBAAKvU,UAAU,eACd,kBAAC,EAAD,CAAS0C,OAAQA,EAAQtC,OAAQA,IACjC,kBAAC2U,GAAD,CAASrS,OAAQA,EAAQtC,OAAQA,QCPhB4U,QACa,cAA7BxR,OAAOC,SAASwR,UAEe,UAA7BzR,OAAOC,SAASwR,UAEhBzR,OAAOC,SAASwR,SAASC,MACvB,2D,aClBFC,GAAY,CACdrR,UAAW,4BAeAC,GAZK,WAAgC,IAA/Ba,EAA8B,uDAAtBuQ,GAAWC,EAAW,uCAC/C,OAAQA,EAAOrQ,MACX,IAAK,iBACD,MAAO,CACLjB,UAAWsR,EAAOpQ,SAGxB,QACI,OAAOJ,ICZbuQ,GAAY,CACdlN,eAAgB,CAACoN,MAAO,SACxB/P,SAAU,GACVgB,eAAgB,GAChB6I,QAAQ,GAkEG5J,GA/DS,WAAyB,IAAxBX,EAAuB,uDAAf,GAAIwQ,EAAW,uCAE5C,OAAOA,EAAOrQ,MAEV,IAAK,aACD,OAAO,2BACAH,GADP,IAEIuK,QAAQ,IAGhB,IAAK,eAED,OADAgG,GAAU7P,SAAW8P,EAAOpQ,QACrB,2BACAJ,GADP,IAEIU,SAAU8P,EAAOpQ,QACjBmK,QAAQ,IAGhB,IAAK,cACD,OAAO,2BACAvK,GADP,IAEIS,QAAS+P,EAAOpQ,QAChBmK,QAAQ,IAGhB,IAAK,2BACD,OAAO,2BACAvK,GADP,IAEIY,aAAc4P,EAAOpQ,QACrBmK,QAAQ,IAGhB,IAAK,sBACD,OAAO,2BACAvK,GADP,IAEI0B,eAAgB8O,EAAOpQ,QACvBmK,QAAQ,IAGhB,IAAK,sBACD,OAAO,2BACAvK,GADP,IAEIqD,eAAgBmN,EAAOpQ,QACvBmK,QAAQ,IAGhB,IAAK,iBACD,IAAImG,EAAoB1Q,EAAMU,SAASoO,QAAO,SAAArO,GAC1C,OAAOA,EAAQwC,IAAMuN,EAAOpQ,QAAQ6C,MAGxC,OADAsN,GAAU7P,SAAWgQ,EACd,2BACA1Q,GADP,IAEIU,SAAUgQ,EACVrT,OAAQmT,EAAOpQ,QAAQuQ,aAAatT,OACpCkN,QAAQ,IAGhB,QAAS,OAAOvK,ICjElBuQ,GAAY,CACd7B,WAAW,EACXV,SAAS,EACTpR,OAAO,EACPgU,aAAc,GACd7P,iBAAkB,GAClBD,mBAAoB,IA0ETD,GAvEa,WAAgC,IAA/Bb,EAA8B,uDAAtBuQ,GAAWC,EAAW,uCAEvD,OAAQA,EAAOrQ,MAEX,IAAK,0BACD,OAAO,2BACAH,GADP,IAEI0O,WAAW,IAGnB,IAAK,2BACD,OAAO,2BACA1O,GADP,IAEIgO,SAAS,EACTU,WAAW,IAGnB,IAAK,mCACD,OAAO,2BACA1O,GADP,IAEI0B,eAAgB8O,EAAOpQ,QACvBmK,QAAQ,IAGhB,IAAK,2BACD,OAAO,2BACAvK,GADP,IAEIpD,OAAO,EACPgU,aAAcJ,EAAOpQ,QACrBsO,WAAW,IAGnB,IAAK,mBAED,OADA6B,GAAU3P,aAAe4P,EAAOpQ,QACzB,2BACAJ,GADP,IAEIY,aAAc4P,EAAOpQ,QACrBsO,WAAW,IAGnB,IAAK,0BAED,OADA6B,GAAUzP,mBAAqB0P,EAAOpQ,QAC/B,2BACAJ,GADP,IAEIc,mBAAoB0P,EAAOpQ,UAGnC,IAAK,wBAED,OADAmQ,GAAUxP,iBAAmByP,EAAOpQ,QAC7B,2BACAJ,GADP,IAEIe,iBAAkByP,EAAOpQ,UAGjC,IAAK,qBACD,IAAIyQ,EAAwB7Q,EAAMY,aAAakO,QAAO,SAAArO,GAClD,OAAOA,EAAQwC,IAAMuN,EAAOpQ,QAAQ6C,MAGxC,OADAsN,GAAU3P,aAAeiQ,EAClB,2BACA7Q,GADP,IAEIY,aAAciQ,EACdxT,OAAQmT,EAAOpQ,QAAQuQ,aAAatT,SAG5C,QACI,OAAO2C,IC3Eb8Q,GAAY,CACdvG,QAAQ,GAgCGtJ,GA7BM,WAAgC,IAA/BjB,EAA8B,uDAAtB8Q,GAAWN,EAAW,uCAEhD,OAAQA,EAAOrQ,MAEX,IAAK,qBACD,OAAO,2BACAH,GADP,IAEIkO,cAAesC,EAAOpQ,UAG9B,IAAK,mBACD,OAAO,2BACAJ,GADP,IAEIuK,QAAQ,IAGhB,IAAK,YACD,OAAO,2BACAvK,GADP,IAEIgB,MAAOwP,EAAOpQ,QACdmK,QAAQ,IAGhB,QACI,OAAOvK,ICtBJ+Q,gBAAiB,CAC5B9P,gBACA9B,eACAwB,mBACAE,yB,6BCPaR,I,YAgBAiD,I,YAWA0N,I,YASArC,I,YASAG,I,YAyBAzE,IAtEV,SAAUhK,GAAcmQ,GAAxB,uEACH,OADG,SACGS,aAAI,CAAE9Q,KAAM,eADf,OAGgB,OAHhB,SAGsB+Q,aAAK7K,EAAuBmK,EAAOpQ,SAHzD,OAKH,OAFIuQ,EAHD,gBAKGM,aAAI,CACN9Q,KAAM,sBACNC,QAASuQ,EAAa5T,OAPvB,OAUH,OAVG,SAUGkU,aAAI,CACN9Q,KAAM,eACNC,QAASuQ,EAAa5T,KAAKA,OAZ5B,wCAgBA,SAAUuG,GAAiBkN,GAA3B,uEACH,OADG,SACGS,aAAI,CAAE9Q,KAAM,eADf,OAGgB,OAHhB,SAGsB+Q,aAAK7K,GAAsBmK,EAAOpQ,SAHxD,OAKH,OAFIuQ,EAHD,gBAKGM,aAAI,CACN9Q,KAAM,sBACNC,QAASuQ,EAAa5T,OAPvB,wCAWA,SAAUiU,KAAV,uEACgB,OADhB,SACsBE,aAAK7K,GAD3B,OAGH,OAFIsK,EADD,gBAGGM,aAAI,CACN9Q,KAAM,eACNC,QAASuQ,EAAa5T,OALvB,wCASA,SAAU4R,GAAkB6B,GAA5B,uEACgB,OADhB,SACsBU,aAAK7K,GAAmCmK,EAAOpQ,SADrE,OAGH,OAFIuQ,EADD,gBAGGM,aAAI,CACN9Q,KAAM,2BACNC,QAASuQ,EAAa5T,OALvB,wCASA,SAAU+R,GAAO0B,GAAjB,uEACH,OADG,SACGS,aAAI,CAAE9Q,KAAM,eADf,OAGgB,OAHhB,SAGsB+Q,aAAK7K,GAAwBmK,EAAOpQ,SAH1D,OAKH,OAFIuQ,EAHD,gBAKGM,aAAI,CACN9Q,KAAM,sBACNC,QAASuQ,EAAa5T,OAPvB,OAUH,OAVG,SAUGkU,aAAI,CACN9Q,KAAM,eACNC,QAASuQ,EAAa5T,KAAKA,OAZ5B,wCAyBA,SAAUsN,GAAcmG,GAAxB,uEACgB,OADhB,SACsBU,aAAK7K,GAA+BmK,EAAOpQ,SADjE,OAGH,OAFIuQ,EADD,gBAGGM,aAAI,CACN9Q,KAAM,iBACNC,QAAS,CAACuQ,aAAcA,EAAc1N,GAAIuN,EAAOpQ,WALlD,wCCvEP,IAOe,GAPE,SAAAE,GAAI,OAAIpE,EAAI8G,IAAJ,6BAA8B1C,KAOxC,GALW,SAAA2C,GAAE,OAAI/G,EAAIgH,OAAJ,wBAA4BD,KAK7C,GAND,SAAAE,GAAI,OAAIjH,EAAIgB,KAAK,gBAAiBiG,IAMjC,GAJA,SAAAA,GAAI,OAAIjH,EAAI+U,IAAJ,wBAAyB9N,EAAKF,IAAME,IAI5C,GAHG,kBAAMjH,EAAI8G,IAAJ,uBAGT,GAFK,kBAAM9G,EAAI8G,IAAJ,yB,YCJTwK,I,YA+BAC,I,YA+BAuD,I,YAgBA3P,I,YASAD,I,YASAwN,IAhGV,SAAUpB,GAAiBgD,GAA3B,uEAEH,OAFG,SAEGS,aAAI,CACN9Q,KAAM,+BAHP,OAOoB,OAPpB,kBAO0B+Q,aAAKC,GAA2BX,EAAOpQ,SAPjE,UAS6B,OAFxBuQ,EAPL,QASkBtT,OATlB,iBAUK,OAVL,SAUW4T,aAAI,CACN9Q,KAAM,2BACNC,QAASuQ,IAZlB,+BAgBK,OAhBL,UAgBWM,aAAI,CACN9Q,KAAM,2BACNC,QAASuQ,IAlBlB,gCAuBC,OAvBD,oCAuBOM,aAAI,CACN9Q,KAAM,2BACNC,QAAQ,EAAD,KAzBZ,uDA+BA,SAAUqN,GAAkB+C,GAA5B,uEAEH,OAFG,SAEGS,aAAI,CACN9Q,KAAM,+BAHP,OAOoB,OAPpB,kBAO0B+Q,aAAKC,GAA4BX,EAAOpQ,SAPlE,UAS6B,OAFxBuQ,EAPL,QASkBtT,OATlB,iBAUK,OAVL,SAUW4T,aAAI,CACN9Q,KAAM,2BACNC,QAASuQ,IAZlB,+BAgBK,OAhBL,UAgBWM,aAAI,CACN9Q,KAAM,2BACNC,QAASuQ,IAlBlB,gCAuBC,OAvBD,oCAuBOM,aAAI,CACN9Q,KAAM,2BACNC,QAAQ,EAAD,KAzBZ,uDA+BA,SAAU4Q,GAASR,GAAnB,uEACH,OADG,SACGS,aAAI,CAAE9Q,KAAM,4BADf,OAGgB,OAHhB,SAGsB+Q,aAAKC,GAA8BX,EAAOpQ,SAHhE,OAKH,OAFIuQ,EAHD,gBAKGM,aAAI,CACN9Q,KAAM,mBACNC,QAASuQ,EAAa5T,KAAKA,OAP5B,OAUH,OAVG,SAUGkU,aAAI,CACN9Q,KAAM,mCACNC,QAASuQ,EAAa5T,OAZvB,wCAgBA,SAAUsE,KAAV,uEACgB,OADhB,SACsB6P,aAAKC,IAD3B,OAGH,OAFIR,EADD,gBAGGM,aAAI,CACN9Q,KAAM,wBACNC,QAASuQ,EAAa5T,OALvB,wCASA,SAAUqE,KAAV,uEACgB,OADhB,SACsB8P,aAAKC,IAD3B,OAGH,OAFIR,EADD,gBAGGM,aAAI,CACN9Q,KAAM,0BACNC,QAASuQ,EAAa5T,OALvB,wCASA,SAAU6R,GAAkB4B,GAA5B,uEACgB,OADhB,SACsBU,aAAKC,GAAuCX,EAAOpQ,SADzE,OAGH,OAFIuQ,EADD,gBAGGM,aAAI,CACN9Q,KAAM,qBACNC,QAAS,CAAEuQ,aAAcA,EAAc1N,GAAIuN,EAAOpQ,WALnD,wCCjGP,IAWe,GAXE,kBAAMlE,EAAI8G,IAAI,kBAWhB,GAVA,SAAAhC,GAAK,OAAI9E,EAAIgB,KAAK,uBAAwB8D,IAU1C,GANA,SAACP,EAASO,GACrBA,EAAMmN,SAAQ,SAAArE,GACV5N,EAAIgB,KAAJ,uBAAyB4M,EAAK7G,GAA9B,qBAA6CxC,QAItC,GARQ,SAAAA,GAAO,OAAIvE,EAAI8G,IAAJ,iCAAkCvC,K,YCFnD2Q,I,YAmBA7Q,I,YAWA8Q,IA9BV,SAAUD,GAAOZ,GAAjB,uEAEH,OAFG,SAEGS,aAAI,CACN9Q,KAAM,wBAHP,OAMgB,OANhB,SAMsB+Q,aAAKI,GAAqBd,EAAOpQ,QAAQY,OAN/D,OAOH,OADI2P,EAND,gBAOGO,aAAKI,GAAqBd,EAAOpQ,QAAQK,QAASkQ,EAAa5T,MAPlE,UAUyB,MAAxB4T,EAAatT,OAVd,iBAWC,OAXD,UAWO4T,aAAI,CAAE9Q,KAAM,sBAXnB,gCAcC,OAdD,UAcO8Q,aAAI,CAAE9Q,KAAM,sBAdnB,yCAmBA,SAAUI,KAAV,uEAEgB,OAFhB,SAEsB2Q,aAAKI,IAF3B,OAIH,OAFIX,EAFD,gBAIGM,aAAI,CACN9Q,KAAM,YACNC,QAASuQ,EAAa5T,OANvB,wCAWA,SAAUsU,GAAeb,GAAzB,uEAEH,OAFG,SAEGS,aAAI,CAAE9Q,KAAM,qBAFf,OAIgB,OAJhB,SAIsB+Q,aAAKI,GAA6Bd,EAAOpQ,SAJ/D,OAMH,OAFIuQ,EAJD,gBAMGM,aAAI,CACN9Q,KAAM,YACNC,QAASuQ,EAAa5T,OARvB,wC,gBC5BUwU,IAAV,SAAUA,KAAV,iEACH,OADG,SACGC,aAAI,CACNC,aAAU,sBAAuBC,IACjCD,aAAU,0BAA2BC,IACrCD,aAAU,0BAA2BC,IACrCD,aAAU,sBAAuBC,IACjCD,aAAU,uBAAwBC,IAClCD,aAAU,kCAAmCC,IAC7CD,aAAU,+BAAgCE,IAC1CF,aAAU,iCAAkCE,IAC5CF,aAAU,0BAA2BE,IACrCF,aAAU,2BAA4BE,IACtCF,aAAU,0BAA2BE,IACrCF,aAAU,8BAA+BE,IACzCF,aAAU,eAAgBG,IAC1BH,aAAU,cAAeG,IACzBH,aAAU,yBAA0BG,MAhBrC,wCCMP,IAAMC,GAAiBC,eACjB7S,GAAQ8S,aAAYC,GAAaC,aAAgBJ,KAEvDA,GAAeK,IAAIX,IAEnBY,IAAStS,OACL,kBAAC,IAAD,CAAUZ,MAAOA,IACf,kBAAC,GAAD,OAEJmT,SAASC,eAAe,SZ+GlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrV,MAAK,SAAAsV,GACJA,EAAaC,gBAEdlV,OAAM,SAAAZ,GACLc,QAAQd,MAAMA,EAAM2J,a","file":"static/js/main.3a9c0cb2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport  { Collapse, NavItem, NavLink } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classNames from 'classnames'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst SubMenu = props => {\r\n  \r\n  const [collapsed, setCollapsed] = useState(true)\r\n  const toggleNavbar = () => setCollapsed(!collapsed)\r\n  const { icon, title, items } = props\r\n \r\n  return (\r\n    <div>\r\n      <NavItem onClick={toggleNavbar} className={classNames({'menu-open': !collapsed})}>\r\n        <NavLink className=\"dropdown-toggle\">\r\n          <FontAwesomeIcon icon={icon} className=\"mr-2\"/>{title}\r\n        </NavLink>\r\n      </NavItem>\r\n      <Collapse isOpen={!collapsed} navbar className={classNames('items-menu',{'mb-1': !collapsed})}>\r\n        {items.map((item, index) => (\r\n            <NavItem key={index} className=\"pl-4\">\r\n              <NavLink tag={Link} to={item.target}>\r\n                {item.title}\r\n              </NavLink>\r\n            </NavItem>\r\n            ))}\r\n      </Collapse>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubMenu","import axios from 'axios'\r\n\r\nconst api = axios.create({ \r\n    baseURL: 'https://appointments12.herokuapp.com/api/' \r\n\r\n})\r\n\r\napi.interceptors.request.use(\r\n    request => {\r\n        request.headers = {\r\n            'Content-Type': 'application/json',\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            'Authorization': \"Bearer \" + localStorage.getItem('access_token'),\r\n        }\r\n      return request\r\n    },\r\n    error => error\r\n)\r\n\r\nexport default api\r\n","import api from './services/api'\r\n\r\nclass Auth{\r\n    constructor(props){\r\n        this.authenticated = false\r\n    }\r\n\r\n    login(data, callBack, elseCallBack){\r\n\r\n        api.post('/auth/login', data)\r\n            .then(response => {\r\n                if(response.status === 200){\r\n                    localStorage.setItem(\"access_token\", response.data.access_token)\r\n                    this.authenticated = true\r\n                    \r\n                    callBack()\r\n                }\r\n                else{\r\n                    this.authenticated = false\r\n                    elseCallBack()\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.authenticated = false\r\n                elseCallBack()\r\n                console.error(err)\r\n            })\r\n\r\n    }\r\n\r\n    logout(callBack){\r\n        this.authenticated = false\r\n        callBack()\r\n    }\r\n\r\n    isAuthenticated(){\r\n        return this.authenticated\r\n    }\r\n}\r\n\r\nexport default new Auth()","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { \r\n\tfaHome, \r\n\tfaPowerOff, \r\n\tfaHospitalAlt, \r\n\tfaUserMd, \r\n\tfaUsers, \r\n\tfaTimesCircle \r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport SubMenu from './SubMenu'\r\nimport { NavItem, NavLink, Nav } from 'reactstrap'\r\nimport classNames from 'classnames'\r\nimport auth from '../../auth'\r\nimport \"./style.scss\"\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst SideBar = props => {\r\n\treturn (\r\n\t\t<div className={classNames('sidebar', {'is-open': props.isOpen})}>\r\n\t\t\t<div className=\"sidebar-header\">\r\n\t\t\t\t<span \r\n\t\t\t\t\tcolor=\"info\" \r\n\t\t\t\t\tonClick={props.toggle} \r\n\t\t\t\t\tstyle={{color: '#fff'}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faTimesCircle} />\r\n\t\t\t\t</span>\r\n\t\t\t\t<h3 className=\"sidebar-title\">\r\n\t\t\t\t\t<FontAwesomeIcon icon={faHospitalAlt} /> \r\n\t\t\t\t\tConsultas\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"side-menu\">\r\n\t\t\t\t<Nav \r\n\t\t\t\t\tstyle={{cursor: 'pointer'}} \r\n\t\t\t\t\tvertical \r\n\t\t\t\t\tclassName=\"list-unstyled pb-3\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<p>Bem vindo Usuário</p>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink onClick={() => props.history.push(\"/\")}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faHome} className=\"mr-2\"/>Home\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t<SubMenu \r\n\t\t\t\t\t\ttitle=\"Pacientes\" \r\n\t\t\t\t\t\ticon={faUsers}\r\n\t\t\t\t\t\titems={submenus[0]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SubMenu \r\n\t\t\t\t\t\ttitle=\"Atendimentos\" \r\n\t\t\t\t\t\ticon={faUserMd} \r\n\t\t\t\t\t\titems={submenus[1]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t<NavLink onClick={() => auth.logout(() => window.location.reload(false))}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPowerOff} className=\"mr-2\"/>Sair\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</NavItem>\r\n\t\t\t\t</Nav>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst submenus = [\r\n[\r\n\t{\r\n\ttitle: \"Cadastrar pacientes\",\r\n\ttarget: \"cadastrar-pacientes\"\r\n\t},\r\n\t{\r\n\ttitle: \"Gerenciar pacientes\",\r\n\ttarget: \"pacientes\",\t\t\t\t\r\n\t}\r\n],\r\n[\r\n\t{\r\n\ttitle: \"Novo\",\r\n\ttarget: \"cadastrar-atendimento\",\t\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Atendimentos\",\r\n\ttarget: \"atendimentos\",\t\t\t\t\r\n\t},\r\n\t{\r\n\ttitle: \"Material de Apoio\",\r\n\ttarget: \"material-apoio\",\t\t\t\t\r\n\t}\r\n]\r\n]\r\n\t\r\n\r\nexport default withRouter(SideBar)","import React, { useState, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { Navbar, Button, NavbarToggler, Collapse, Nav, NavItem, NavLink } from 'reactstrap'\r\nimport './style.scss'\r\nimport { connect } from 'react-redux'\r\n\r\nconst NavBar = props => {\r\n  return (\r\n    <Navbar \r\n      color=\"light\" \r\n      light \r\n      className=\"navbar shadow-sm p-3 mb-5 bg-white rounded\" \r\n      expand=\"md\"\r\n    >\r\n      <Button color=\"info\" onClick={props.toggle}>\r\n        <FontAwesomeIcon icon={faBars}/>\r\n      </Button>\r\n\r\n      <Nav className=\"m-auto\" navbar>\r\n        <NavItem>\r\n          <div className=\"page-title\">\r\n            <h1 className=\"title\">\r\n              {props.pageTitle}\r\n            </h1>\r\n          </div>\r\n        </NavItem>\r\n      </Nav>\r\n\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return{\r\n    pageTitle: store.pageReducer.pageTitle\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavBar)","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return(\r\n        <Route {...rest} render={\r\n            (props) => {\r\n                if(auth.isAuthenticated()){\r\n                    return <Component {...props} />\r\n                }else{\r\n                    return <Redirect to={\r\n                        {\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                from: props.location\r\n                            }\r\n                        }\r\n                    } />\r\n                }\r\n            }\r\n        }/>\r\n    )\r\n}","export const setPageTitle = title => ({\r\n    type: 'SET_PAGE_TITLE',\r\n    payload: title\r\n})","export const filterPatients = patient => ({\r\n    type: \"FILTER_PATIENTS_SAGA\",\r\n    payload: patient\r\n})\r\n\r\nexport const fetchPatients = page => ({\r\n    type: \"FETCH_PATIENTS_SAGA\",\r\n    payload: page\r\n})\r\n\r\nexport const fetchAllPatients = () => ({\r\n    type: \"FETCH_ALL_PATIENTS_SAGA\"\r\n})\r\n\r\nexport const fetchPatientInfo = id => ({\r\n    type: \"FETCH_PATIENT_INFO_SAGA\",\r\n    payload: id\r\n})\r\n\r\nexport const fetchPatientAppointments = id => ({\r\n    type: \"FETCH_PATIENT_APPOINTMENTS_SAGA\",\r\n    payload: id\r\n})\r\n\r\nexport const deletePatient = id => ({\r\n    type: \"DELETE_PATIENT_SAGA\",\r\n    payload: id\r\n})","export const setSelectedFiles = selectedFiles => ({\r\n    type: \"SET_SELECTED_FILES\",\r\n    payload: selectedFiles\r\n})\r\n\r\nexport const uploadFiles = (files, patient) => ({\r\n    type: \"UPLOAD_FILES\",\r\n    payload: {\r\n        files: files,\r\n        patient: patient\r\n    }\r\n})\r\n\r\nexport const fetchFiles = page => ({\r\n    type: \"FETCH_FILES\",\r\n    payload: page\r\n})\r\n\r\nexport const fetchFilesByPatient = patient => ({\r\n    type: \"FETCH_FILES_BY_PATIENT\",\r\n    payload: patient\r\n})","import { faUser, faBook, faClipboardList } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Col, Row, Table } from \"reactstrap\";\r\nimport * as actions from \"../../store/actions\"\r\nimport { connect } from \"react-redux\"\r\nimport \"./style.scss\"\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst Home = props => {\r\n\r\n    useEffect(() => {\r\n        props.fetchPatients()\r\n        props.fetchMadeAppointments()\r\n        props.fetchFiles()\r\n        props.fetchTodaysAppointments()\r\n    },[])\r\n\r\n    return(\r\n        <>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <div className=\"box padding\">\r\n                        <div className=\"flex\">\r\n                            <h1 className={props.patients?.paginationData?.total ? \"box-num animate\" : \"box-num\"}>\r\n                                {props.patients?.paginationData?.total}\r\n                            </h1>\r\n                            <h1 className=\"box-icon\"><FontAwesomeIcon icon={faUser} /></h1>\r\n                        </div>\r\n                        <h4 className=\"box-info\">Pacientes cadastrados</h4>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <div className=\"box padding\">\r\n                        <div className=\"flex\">\r\n                            <h1 className={props.madeAppointments > 0 ? \"box-num animate\" : \"box-num\"}>\r\n                                {props.madeAppointments}\r\n                            </h1>\r\n                            <h1 className=\"box-icon\"><FontAwesomeIcon icon={faClipboardList} /></h1>\r\n                        </div>\r\n                        <h4 className=\"box-info\">Atendimentos realizados</h4>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <div className=\"box padding\">\r\n                        <div className=\"flex\">\r\n                            <h1 className={props.files ? \"box-num animate\" : \"box-num\"}>\r\n                                {props.files?.length > 0 ? props.files.length : '0'}\r\n                            </h1>\r\n                            <h1 className=\"box-icon\"><FontAwesomeIcon icon={faBook} /></h1>\r\n                        </div>\r\n                        <h4 className=\"box-info\">Materiais de apoio</h4>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row style={{marginTop:'64px'}}>\r\n                <Col size={{md: '8', offset: '2'}}>\r\n                    <div className=\"box\">\r\n                        <h3 className=\"box-info\">Atendimentos do dia</h3>\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Paciente:</th>\r\n                                    <th>Horário:</th>\r\n                                    <th>Resumo:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    props.appointments?.map(appointment => (\r\n                                        <tr>\r\n                                            <td>{appointment.patient?.name}</td>\r\n                                            <td>{appointment.time}</td>\r\n                                            <td>{appointment.abstract}</td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                                {\r\n                                    !props.appointments ? \r\n                                        <Loader \r\n                                            className=\"loader\" \r\n                                            type=\"TailSpin\" \r\n                                            color=\"#17A2B8\" \r\n                                            height={100} \r\n                                            width={100} \r\n                                        />\r\n                                    : false\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer,\r\n        appointments: store.appointmentsReducer.todaysAppointments,\r\n        madeAppointments: store.appointmentsReducer.madeAppointments,\r\n        files: store.filesReducer.files\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchPatients: () => dispatch(actions.fetchPatients(1)),\r\n    fetchTodaysAppointments: () => dispatch(actions.fetchTodaysAppointments()),\r\n    fetchFiles: () => dispatch(actions.fetchFiles(1)),\r\n    fetchMadeAppointments: () => dispatch(actions.fetchMadeAppointments())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","export const storeAppointments = data => ({\r\n    type: \"STORE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const updateAppointments = data => ({\r\n    type: \"UPDATE_APPOINTMENTS_SAGA\",\r\n    payload: data\r\n})\r\n\r\nexport const fetchTodaysAppointments = () => ({\r\n    type: \"FETCH_TODAYS_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const fetchMadeAppointments = () => ({\r\n    type: \"FETCH_MADE_APPOINTMENTS_SAGA\"\r\n})\r\n\r\nexport const fetchAppointments = page => ({\r\n    type: \"FETCH_ALL_APPOINTMENTS_SAGA\",\r\n    payload: page\r\n})\r\n\r\nexport const deleteAppointment = id => ({\r\n    type: \"DELETE_APPOINTMENT_SAGA\",\r\n    payload: id\r\n})","export const cpfMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2') \r\n        .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n        .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n        .replace(/(-\\d{2})\\d+?$/, '$1') \r\n}\r\n\r\nexport const phoneMask = value => {\r\n    return value\r\n        .replace(/\\D/g, '')\r\n        .replace(/(\\d{0})(\\d)/, '$1($2') \r\n        .replace(/(\\d{2})(\\d)/, '$1) $2')\r\n}\r\n\r\nexport const currencyMask = val => {\r\n    let value = val\r\n        .replace(/\\D/g, '')\r\n        .replace(/^0+/g, '')\r\n\r\n    if(value.length === 1){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{1})$/g, \"0,0$1\")\r\n    }\r\n    else if(value.length === 2){\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \"0,$1\")\r\n    }\r\n    else{\r\n        return value\r\n            .replace(/(\\d{0})(\\d)/, '$1R$ $2')\r\n            .replace(/([0-9]{2})$/g, \",$1\")\r\n    }\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/patients?page=-1')\r\nconst fetch = page => api.get(`/patients?page=${page}`)\r\nconst find = id => api.get(`/patients/${id}`)\r\nconst store = body => api.post('/patients', body)\r\nconst deletePatient = id => api.delete(`/patients/${id}`)\r\nconst fetchAppointments = patient => api.get(`/appointments/patient/${patient}`)\r\nconst filter = search => api.post(`/patients/search`, {value: search})\r\n\r\nexport default { \r\n    fetchAll,\r\n    fetch,\r\n    find,\r\n    fetchAppointments,\r\n    deletePatient,\r\n    store,\r\n    filter\r\n}","import React, { useEffect, useState } from 'react'\r\nimport './style.scss'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\nimport { cpfMask, phoneMask, currencyMask } from '../Mask/index'\r\nimport patientsService from \"../../services/patientsService\"\r\nimport Swal from \"sweetalert2\"\r\nimport axios from \"axios\"\r\n\r\nconst StorePatients = props => {\r\n\r\n    const [cpf, setCpf] = useState(\"\")\r\n    const [cep, setCep] = useState(\"\")\r\n    const [foreign, setForeign] = useState(false)\r\n    const [value, setValue] = useState(\"R$ 0,00\")\r\n    const [phone, setPhone] = useState(\"\")\r\n    const [mobilephone, setMobilephone] = useState(\"\")\r\n    const [isCepValid, setIsCepValid] = useState(false)\r\n    const [dateColor, setDateColor] = useState(\"form-control input nascimento\")\r\n    const [body, setBody] = useState({ address: {state: \"AC\"}, user: {role_id: 1, gender_id: 1} })\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\r\n            props.location.state ?\r\n            \"Atualizar Paciente\" :\r\n            \"Cadastrar Paciente\"\r\n        )\r\n\r\n        if (props.location.new) {\r\n            props.location.new = false\r\n            props.fetchPatientInfo(props.location.state.id)\r\n        }\r\n        \r\n        if (props.patient?.address && props.location.state) {\r\n            setBody({\r\n                ...props.patient,\r\n                plusInformation: props.patient.plus_informations\r\n            })\r\n            setPhone(props.patient.telephone)\r\n            setMobilephone(props.patient.phone)\r\n            setCpf(props.patient.cpf)\r\n            setCep(props.patient.address.cep)\r\n            setValue(currencyMask(String(props.patient.user.value)))\r\n        }\r\n    },[props.patient])\r\n\r\n    const handleCpf = e => {\r\n        setCpf(cpfMask(e.target.value))\r\n\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleVerifyPasswords = () => {\r\n        return body.user.password === body.user.password_confirmation\r\n    }\r\n\r\n    const handleChangeCep = e => {\r\n        let cep = e.target.value.replace(/[^0-9]/g, '')\r\n        setCep(cep)\r\n\r\n        if (cep.length === 8)\r\n            axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n                .then(res => {\r\n                    if (!res.data.erro) {\r\n                        setIsCepValid(true)\r\n                        setBody({\r\n                            ...body,\r\n                            address: {\r\n                                ...body.address,\r\n                                city: res.data.localidade,\r\n                                cep: cep,\r\n                                street: res.data.logradouro,\r\n                                state: res.data.uf,\r\n                                neighborhood: res.data.bairro\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        setIsCepValid(false)\r\n                    }\r\n                })\r\n                .catch(err => console.error(\"Um erro ocorreu ao buscar o CEP: \", err))\r\n        else\r\n            setBody({\r\n                ...body,\r\n                address: {\r\n                    ...body.address,\r\n                    cep: cep\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleDateChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n\r\n        setDateColor(\"form-control input\")\r\n    }\r\n\r\n    const handleChangeBody = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangePhone = e => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n\r\n        if (!foreign) {\r\n            value = value.replace(/[^0-9]/g, '')\r\n\r\n            if (name == \"telephone\")\r\n                setPhone(phoneMask(value))\r\n            else\r\n                setMobilephone(phoneMask(value))\r\n        } else {\r\n            if (name == \"telephone\")\r\n                setPhone(value)\r\n            else\r\n                setMobilephone(value)\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleChangeUser = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (name == \"value\") {\r\n            setValue(currencyMask(value))\r\n            value = value.replace(/[^0-9]/g, '')\r\n        }\r\n\r\n        setBody({\r\n            ...body,\r\n            user: {\r\n                ...body.user,\r\n                name: body.name,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeAddress = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        setBody({\r\n            ...body,\r\n            address: {\r\n                ...body.address,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handlePlusInformationChange = e => {\r\n        let value = e.target.value\r\n        let name = e.target.name\r\n\r\n        if (!foreign && name == \"emergency_contact\") {\r\n            setBody({\r\n                ...body,\r\n                plusInformation: {\r\n                    ...body.plusInformation,\r\n                    [name]: phoneMask(value)\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            setBody({\r\n                ...body,\r\n                plusInformation: {\r\n                    ...body.plusInformation,\r\n                    [name]: value\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleVerifyDate = () => {\r\n        let date = new Date()\r\n        let birthday = new Date(body.birthday)\r\n        let age = date.getFullYear() - birthday.getFullYear()\r\n        return !(age > 130 || age < 0)\r\n    }\r\n\r\n    const handleFormSubmit = async e => {\r\n        e.preventDefault()\r\n        if(value === \"R$ 0,00\")\r\n            return Swal.fire(\"Por favor informe o valor da consulta.\")\r\n        if (handleVerifyPasswords() && handleVerifyDate()) {\r\n            await setBody({\r\n                ...body,\r\n                foreign: foreign\r\n            })\r\n            await patientsService.store(body)\r\n                .then(() => {\r\n                    Swal.fire({\r\n                        title: \"Paciente cadastrado com sucesso!\",\r\n                        icon: \"success\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    if(e.message == \"Request failed with status code 422\"){\r\n                        return Swal.fire({\r\n                            title: \"Email já cadastrado.\",\r\n                            text: \"Por favor tente com um endereço de email diferente.\",\r\n                            icon: \"warning\",\r\n                            confirmButtonColor: \"#1492A5\"\r\n                        })\r\n                    }\r\n                    Swal.fire({\r\n                        title: \"Ocorreu um erro.\",\r\n                        text: \"Por favor tente novamente mais tarde.\",\r\n                        icon: \"warning\",\r\n                        confirmButtonColor: \"#1492A5\"\r\n                    })\r\n                })\r\n        } else {\r\n            if (!handleVerifyPasswords())\r\n                return Swal.fire(\"As senhas divergem.\")\r\n            if (!handleVerifyDate())\r\n                return Swal.fire(\"Por favor informe uma data de nascimento válida.\")\r\n        }\r\n    }\r\n\r\n    const handleForeignChange = () => {\r\n        setPhone(\"\")\r\n        setMobilephone(\"\")\r\n\r\n        if (!foreign)\r\n            setForeign(true)\r\n        else\r\n            setForeign(false)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"new-password\" onSubmit={handleFormSubmit}>\r\n            <Row>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados do paciente\r\n                        </h1>\r\n                        <Row>\r\n                            <Col md={8}>\r\n                                <label htmlFor=\"name\">Nome: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                    value={body.name || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"telephone\">Telefone Fixo: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"telephone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={phone || ''}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"phone\">Celular: </label>\r\n                                <input\r\n                                    onChange={handleChangePhone}\r\n                                    type=\"text\"\r\n                                    name=\"phone\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    value={mobilephone || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"cpf\">CPF: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"cpf\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleCpf}\r\n                                    maxLength=\"14\"\r\n                                    placeholder=\"___.___.___-__\"\r\n                                    value={cpf || ''}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"rg\">RG: </label>\r\n                                <input\r\n                                    onChange={handleChangeBody}\r\n                                    type=\"text\"\r\n                                    name=\"rg\"\r\n                                    className=\"form-control input\"\r\n                                    value={body.rg || ''}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"birthday\">Data de Nascimento: </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    name=\"birthday\"\r\n                                    className={dateColor}\r\n                                    placeholder=\"Data de Nascimento\"\r\n                                    onChange={handleDateChange}\r\n                                    onKeyDown={handleDateChange}\r\n                                    value={body.birthday || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Sexo\r\n                            <div className=\"genders\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Masculino\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"genders\"\r\n                                        />\r\n                                    Feminino\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <input\r\n                                    className=\"foreignCheckbox\"\r\n                                    name=\"foreign\"\r\n                                    type=\"checkbox\"\r\n                                    checked={foreign}\r\n                                    onChange={handleForeignChange}\r\n                                />\r\n                                <span className=\"foreignLabel\">\r\n                                    Estrangeiro?\r\n                                </span>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n                <Col md={{ size: 6 }}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Endereço\r\n                    </h1>\r\n                        {foreign ? <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"country\">País:</label>\r\n                                <input\r\n                                    name=\"country\"\r\n                                    onChange={handleChangeAddress}\r\n                                    className=\"form-control input\"\r\n                                    text=\"text\"\r\n                                    id=\"country\"\r\n                                />\r\n                            </Col>\r\n                        </Row> : ''}\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cep\">CEP: </label>\r\n                                {foreign ? \r\n                                <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeAddress}\r\n                                    type=\"text\"\r\n                                    name=\"foreign_cep\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Formato internacional\"\r\n                                    value={body.address.cep || ''}\r\n                                />\r\n                                : <input\r\n                                    maxLength=\"8\"\r\n                                    onChange={handleChangeCep}\r\n                                    type=\"text\"\r\n                                    name=\"cep\"\r\n                                    className=\"form-control input\"\r\n                                    value={cep || ''}\r\n                                />} \r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"street\">Logradouro: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"street\"\r\n                                    type=\"text\"\r\n                                    name=\"street\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Rua, AV, etc...\"\r\n                                    disabled={isCepValid}\r\n                                    value={body.address.street || ''}\r\n\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"complement\">Complemento: </label>\r\n                                <input\r\n                                    id=\"complement\"\r\n                                    type=\"text\"\r\n                                    name=\"complement\"\r\n                                    className=\"form-control input\"\r\n                                    onChange={handleChangeAddress}\r\n                                    value={body.address.complement || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"neighborhood\">Bairro: </label>\r\n                                <input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    name=\"neighborhood\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                    onChange={handleChangeAddress}\r\n                                    value={body.address.neighborhood || ''}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={3}>\r\n                                <label htmlFor=\"numero\">Número: </label>\r\n                                <input\r\n                                    onChange={handleChangeAddress}\r\n                                    id=\"number\"\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    name=\"number\"\r\n                                    className=\"form-control input\"\r\n                                    value={body.address.number || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={3}>\r\n                                {\r\n                                    foreign ? (\r\n                                        <>\r\n                                            <label htmlFor=\"state\">Estado: </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"state\"\r\n                                                id=\"state\"\r\n                                                className=\"form-control input\"\r\n                                                disabled={isCepValid}\r\n                                                onChange={handleChangeAddress}\r\n                                                value={body.address.state || ''}\r\n                                            />\r\n                                        </>\r\n                                    )\r\n                                        : (\r\n                                            <>\r\n                                                <label htmlFor=\"state\">UF: </label>\r\n                                                <select\r\n                                                    name=\"state\"\r\n                                                    id=\"state\"\r\n                                                    className=\"form-control input\"\r\n                                                    disabled={isCepValid}\r\n                                                    onChange={handleChangeAddress}\r\n                                                    value={body.address.state || ''}\r\n                                                >\r\n                                                    <option value=\"AC\">AC</option>\r\n                                                    <option value=\"AL\">AL</option>\r\n                                                    <option value=\"AP\">AP</option>\r\n                                                    <option value=\"AM\">AM</option>\r\n                                                    <option value=\"BA\">BA</option>\r\n                                                    <option value=\"CE\">CE</option>\r\n                                                    <option value=\"DF\">DF</option>\r\n                                                    <option value=\"ES\">ES</option>\r\n                                                    <option value=\"GO\">GO</option>\r\n                                                    <option value=\"MA\">MA</option>\r\n                                                    <option value=\"MT\">MT</option>\r\n                                                    <option value=\"MS\">MS</option>\r\n                                                    <option value=\"MG\">MG</option>\r\n                                                    <option value=\"PA\">PA</option>\r\n                                                    <option value=\"PB\">PB</option>\r\n                                                    <option value=\"PR\">PR</option>\r\n                                                    <option value=\"PE\">PE</option>\r\n                                                    <option value=\"PI\">PI</option>\r\n                                                    <option value=\"RJ\">RJ</option>\r\n                                                    <option value=\"RN\">RN</option>\r\n                                                    <option value=\"RS\">RS</option>\r\n                                                    <option value=\"RO\">RO</option>\r\n                                                    <option value=\"RR\">RR</option>\r\n                                                    <option value=\"SC\">SC</option>\r\n                                                    <option value=\"SP\">SP</option>\r\n                                                    <option value=\"SE\">SE</option>\r\n                                                    <option value=\"TO\">TO</option>\r\n                                                </select>\r\n                                            </>\r\n                                        )\r\n                                }\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"city\">Municipio: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeAddress}\r\n                                    name=\"city\"\r\n                                    id=\"city\"\r\n                                    className=\"form-control input\"\r\n                                    disabled={isCepValid}\r\n                                    value={body.address.city || ''}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Informações adicionais\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_contact\">Contato de Emergência: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_contact\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder={foreign ? \"Formato internacional\" : \"DDD + número\"}\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={body.plusInformation?.emergency_contact || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"emergency_name\">Nome: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"emergency_name\"\r\n                                    className=\"form-control input\"\r\n                                    placeholder=\"Nome completo\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={body.plusInformation?.name}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={12}>\r\n                                <label htmlFor=\"observation\">Observação: </label>\r\n                                <textarea\r\n                                    className=\"form-control input\"\r\n                                    name=\"observation\"\r\n                                    onChange={handlePlusInformationChange}\r\n                                    value={body.plusInformation?.observation || ''}\r\n                                >\r\n                                </textarea>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Valor da Sessão\r\n                    </h1>\r\n                        <Row style={{ marginBottom: '32px' }}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"value\">Valor: </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={handleChangeUser}\r\n                                    className=\"form-control input\"\r\n                                    name=\"value\"\r\n                                    value={value || ''}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                Deseja recibo?\r\n                            <div className=\"receipt\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"receipt\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">\r\n                            Dados de Acesso ao Sistema\r\n                    </h1>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"email\">Email: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"email\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                    value={body.user.email || ''}\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password\">Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"password_confirmation\">Repetir Senha: </label>\r\n                                <input\r\n                                    onChange={handleChangeUser}\r\n                                    type=\"password\"\r\n                                    className=\"form-control input\"\r\n                                    name=\"password_confirmation\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: '32px', marginBottom: '32px' }}>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"role_id\">Hierarquia: </label>\r\n                                <select \r\n                                    className=\"form-control input\" \r\n                                    name=\"role\"\r\n                                    value={body.user.role || ''}\r\n                                >\r\n                                    <option value=\"1\">Admin</option>\r\n                                    <option value=\"1\">Médico</option>\r\n                                    <option value=\"2\">Paciente</option>\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                Cadastro ativo?\r\n                            <div className=\"active\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                            defaultChecked\r\n                                        />\r\n                                    Sim\r\n                                </label>\r\n                                    <br />\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            className=\"option-input radio\"\r\n                                            name=\"active\"\r\n                                        />\r\n                                    Não\r\n                                </label>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: '100px' }}>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <h1 className=\"subtitle\">Salvar dados</h1>\r\n                        <Button type=\"submit\">Salvar</Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchPatientInfo: id => dispatch(actions.fetchPatientInfo(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        patient: store.patientsReducer.currentPatient\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StorePatients)","import { faClipboard, faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useState } from 'react'\r\nimport * as actions from '../../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Table } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst ModalExample = (props) => {\r\n\tconst { patientInfo, className } = props\r\n\r\n\tconst [modal, setModal] = useState(false)\r\n\tconst [nestedModal, setNestedModal] = useState(false)\r\n\tconst [nestedFilesModal, setNestedFilesModal] = useState(false)\r\n\tconst [closeAll, setCloseAll] = useState(false)\r\n\r\n\tconst toggle = () => setModal(!modal)\r\n\r\n\tconst toggleNested = () => {\r\n\t\tprops.fetchPatientAppointments(patientInfo.id)\r\n\t\tsetNestedModal(!nestedModal)\r\n\t\tsetCloseAll(false)\r\n\t}\r\n\r\n\tconst toggleFilesNested = () => {\r\n\t\tprops.fetchPatientFiles(patientInfo.id)\r\n\t\tsetNestedFilesModal(!nestedFilesModal)\r\n\t\tsetCloseAll(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Button className=\"edit-button\" style={{border: '#17a2b8'}} onClick={toggle}>\r\n\t\t\t\t<FontAwesomeIcon icon={faClipboard} /></Button>\r\n\t\t\t<Modal isOpen={modal} toggle={toggle} className={className}>\r\n\t\t\t\t<ModalHeader toggle={toggle}>\r\n\t\t\t\t\t<h4 className=\"patient-record-title\">\r\n\t\t\t\t\t\tFICHA DO PACIENTE <FontAwesomeIcon icon={faClipboard} />\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</ModalHeader>\r\n\t\t\t\t<ModalBody>\r\n\t\t\t\t<b>Nome:</b> {patientInfo?.name} <br />\r\n\t\t\t\t<b>Data de Nascimento:</b> {patientInfo?.birthday} <br />\r\n\t\t\t\t<b>Telefone:</b> {patientInfo?.phone} <br />\r\n\t\t\t\t<b>CPF:</b> {patientInfo?.cpf} <br />\r\n\t\t\t\t<b>RG:</b> {patientInfo?.rg} <br />\r\n\r\n\t\t\t\t\t<Modal isOpen={nestedModal} toggle={toggleNested} onClosed={closeAll ? toggle : undefined}>\r\n\t\t\t\t\t\t<ModalHeader>Atendimentos do Paciente</ModalHeader>\r\n\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.patient.appointments ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Table responsive striped>\r\n\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Data: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Hora: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Resumo: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t{props.patient.appointments?.map(appointment => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.date}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.time}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{appointment.abstract}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t<Loader \r\n\t\t\t\t\t\t\t\t\tclassName=\"loader\" \r\n\t\t\t\t\t\t\t\t\ttype=\"TailSpin\" \r\n\t\t\t\t\t\t\t\t\tcolor=\"#17A2B8\" \r\n\t\t\t\t\t\t\t\t\theight={100} \r\n\t\t\t\t\t\t\t\t\twidth={100} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleNested}>Fechar</Button>\r\n\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t</Modal>\r\n\r\n\t\t\t\t\t<Modal isOpen={nestedFilesModal} toggle={toggleFilesNested} onClosed={closeAll ? toggle : undefined}>\r\n\t\t\t\t\t\t<ModalHeader>Arquivos do Paciente</ModalHeader>\r\n\t\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.files ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Table responsive striped>\r\n\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Arquivo: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Data de Upload: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<th>Visualizar: </th>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t{props.files?.files?.map(file => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{file.name}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{file.created_at.split('.')[0].replace(\"T\", \" \")}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={file.path} target=\"_blank\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button className=\"color-button shadow-none\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faEye} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t\t<Loader \r\n\t\t\t\t\t\t\t\t\tclassName=\"loader\" \r\n\t\t\t\t\t\t\t\t\ttype=\"TailSpin\" \r\n\t\t\t\t\t\t\t\t\tcolor=\"#17A2B8\" \r\n\t\t\t\t\t\t\t\t\theight={100} \r\n\t\t\t\t\t\t\t\t\twidth={100} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleFilesNested}>Fechar</Button>\r\n\t\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t\t</Modal>\r\n\r\n\t\t\t\t</ModalBody>\r\n\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleFilesNested}>Material de Apoio</Button>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggleNested}>Atendimentos</Button>\r\n\t\t\t\t\t<Button className=\"color-button shadow-none\" onClick={toggle}>Fechar</Button>\r\n\t\t\t\t</ModalFooter>\r\n\t\t\t</Modal>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tpatient: store.patientsReducer,\r\n\t\tfiles: store.filesReducer\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tfetchPatientAppointments: patientId => dispatch(actions.fetchPatientAppointments(patientId)),\r\n\tfetchPatientFiles: patientId => dispatch(actions.fetchFilesByPatient(patientId))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalExample)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faEdit, faTrash, faUserMd } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Row, Col, Table, Pagination, PaginationItem, PaginationLink } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport PatientRecordModal from \"./patientRecordModal\"\r\n\r\nconst Patients = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar pacientes\")\r\n        props.fetchPatients(1)\r\n    },[])\r\n\r\n    const handleInput = e => {\r\n        props.filterPatients(e.target.value)\r\n    }\r\n\r\n    const handlePaginationClick = async page => {\r\n        await props.fetchPatients(page)\r\n    }\r\n\r\n    const newAppointment = id => {\r\n        props.history.push({ \r\n            pathname: 'cadastrar-atendimento', \r\n            patient: id\r\n        })\r\n    }\r\n\r\n    const handleEdit = patient => {\r\n        props.history.push({ \r\n            pathname: 'cadastrar-pacientes', \r\n            state: patient,\r\n            new: true\r\n        })\r\n    }\r\n\r\n    const deletePatient = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este paciente?',\r\n            text: 'Todos os registros vinculados ao paciente serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n        .then(res => {\r\n            if(res.value)\r\n                props.deletePatient(id)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"box\">\r\n            <Row>\r\n                <Col md={12}>\r\n                    <label htmlFor=\"search\">Pesquisar:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control input\" \r\n                        placeholder=\"Digite aqui o nome do paciente...\" \r\n                        onChange={handleInput} \r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <>\r\n                {\r\n                    !props.patients.patients || props.patients.loader ? (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                    ) : (\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>RG:</th>\r\n                                    <th>Celular:</th>\r\n                                    <th>Ficha:</th>\r\n                                    <th style={{textAlign: 'center'}}>Novo Atendimento:</th>\r\n                                    <th>Editar:</th>\r\n                                    <th>Deletar:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {props.patients.patients.map((patient, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{patient.name}</td>\r\n                                    <td>{patient.rg}</td>\r\n                                    <td>{patient.phone}</td>\r\n                                    <td><PatientRecordModal patientInfo={patient} /></td>\r\n                                    <td style={{textAlign: 'center'}}>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => newAppointment(patient.id) } \r\n                                            className=\"btn edit-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faUserMd} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            className=\"btn edit-button\"\r\n                                            onClick={ () => handleEdit(patient) }\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faEdit} />\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button \r\n                                            id={patient.id} \r\n                                            onClick={ () => deletePatient(patient.id) } \r\n                                            className=\"btn delete-button\"\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                            <Pagination aria-label=\"Page navigation example\">\r\n\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        className=\"page\"\r\n                                        first \r\n                                        onClick={() => handlePaginationClick(1)} \r\n                                    />\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        className=\"page\"\r\n                                        previous\r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.current_page - 1)} \r\n                                        disabled={props.patients.paginationData?.current_page == props.patients.paginationData?.from}\r\n                                    />\r\n                                </PaginationItem>\r\n                                \r\n                                {Array(props.patients.paginationData?.last_page).fill(1).map((el, i) =>\r\n                                    <PaginationItem \r\n                                        key={i}\r\n                                        className={\r\n                                            (props.patients.paginationData?.current_page) == (i + 1) ?\r\n                                            \"selectedPage\" : \"page\"\r\n                                        }\r\n                                    >\r\n                                        <PaginationLink onClick={() => handlePaginationClick(i + 1)}>\r\n                                        {i + 1}\r\n                                        </PaginationLink>\r\n                                    </PaginationItem>\r\n                                )}\r\n                                \r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        className=\"page\"\r\n                                        next \r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.current_page + 1)}\r\n                                        disabled={props.patients.paginationData?.current_page == props.patients.paginationData?.last_page}\r\n                                    />\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                    <PaginationLink \r\n                                        className=\"page\"\r\n                                        last\r\n                                        onClick={() => handlePaginationClick(props.patients.paginationData?.last_page)} \r\n                                    />\r\n                                </PaginationItem>\r\n\r\n                            </Pagination>\r\n                        </Table>\r\n                    )\r\n                }\r\n            </>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    filterPatients: patient => dispatch(actions.filterPatients(patient)),\r\n    fetchPatients: page => dispatch(actions.fetchPatients(page)),\r\n    deletePatient: id => dispatch(actions.deletePatient(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patients)","import React, { useMemo, useEffect } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../store/actions'\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n}\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n}\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n}\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n}\r\n\r\nconst StyledDropzone = props => {\r\n\r\n    const {\r\n        acceptedFiles,\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject\r\n    } = useDropzone()\r\n\r\n    useEffect(() => {\r\n        props.setSelectedFiles(acceptedFiles)\r\n    }, [acceptedFiles])\r\n\r\n\r\n    const style = useMemo(() => ({\r\n        ...baseStyle,\r\n        ...(isDragActive ? activeStyle : {}),\r\n        ...(isDragAccept ? acceptStyle : {}),\r\n        ...(isDragReject ? rejectStyle : {})\r\n    }), [\r\n        isDragActive,\r\n        isDragReject,\r\n        isDragAccept\r\n    ])\r\n\r\n    const files = acceptedFiles.map(file => (\r\n        <li key={file.path}>\r\n          {file.path} - {file.size} bytes\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <div {...getRootProps({ style })}>\r\n                <input {...getInputProps()} />\r\n                <p>Arraste e solte aqui os arquivos que deseja salvar.</p>\r\n                <FontAwesomeIcon icon={faUpload} />\r\n            </div>\r\n            <h5>Arquivos:</h5>\r\n            <ul>{files}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        files: store.filesReducer,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSelectedFiles: files => dispatch(actions.setSelectedFiles(files)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StyledDropzone)\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Row, Col, Button } from \"reactstrap\"\r\nimport * as actions from \"../../store/actions\"\r\nimport StyledDropzone from \"../Dropzone\"\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst Appointments = props => {\r\n\r\n    const [requestBody, setRequestBody] = useState({})\r\n\r\n    useEffect(() => {\r\n\r\n        props.setPageTitle(\r\n            props.location.state ?\r\n            \"ATUALIZAR ATENDIMENTO\" :\r\n            \"NOVO ATENDIMENTO \"\r\n        )\r\n\r\n        props.fetchPatients()\r\n        checkSuccess()\r\n\r\n        if (props.location.state) {\r\n            setRequestBody(props.location.state)\r\n        }\r\n        else if (props.location.patient) {\r\n            setRequestBody({patient_id: props.location.patient})\r\n        }\r\n        \r\n    },[props.appointments]) \r\n\r\n    const handleRequestBody = e => {\r\n        setRequestBody({\r\n            ...requestBody,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const checkSuccess = () => {\r\n        if (props.appointments.success) {\r\n            Swal.fire({\r\n                title: \"Sucesso!\",\r\n                text: \"Atendimento cadastrado com sucesso.\",\r\n                icon: \"success\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n            props.appointments.success = false\r\n        }\r\n        if (props.appointments.error) {\r\n            Swal.fire({\r\n                title: \"Ooops!\",\r\n                text: \"Ocorreu um erro, tente novamente mais tarde.\",\r\n                icon: \"warning\",\r\n                confirmButtonColor: \"#1492A5\"\r\n            })\r\n            props.appointments.error = false\r\n        }\r\n    }\r\n\r\n    const uploadFiles = async () => {\r\n        let files = new FormData()\r\n        await props.files.selectedFiles.forEach(file => {\r\n            files.append('files[]', file)\r\n        })\r\n        if (props.files.selectedFiles.length > 0){\r\n            await props.uploadFiles(files, requestBody.patient_id)\r\n        }\r\n    }\r\n\r\n    const handleStoreAppointment = async e => {\r\n        e.preventDefault()\r\n\r\n        if (props.location.state) {\r\n            await props.updateAppointment(requestBody)\r\n        }\r\n        else {\r\n            await props.storeAppointment(requestBody)\r\n        }\r\n            \r\n        await uploadFiles()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleStoreAppointment} style={{marginBottom: '100px'}}>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <div className=\"box\">\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"patient_id\">Paciente: </label>\r\n                                <select \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"patient_id\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Buscar...\" \r\n                                    className=\"form-control input\"\r\n                                    required\r\n                                    value={requestBody.patient_id}\r\n                                >\r\n                                    <option>Selecione...</option>\r\n                                    {\r\n                                        props.patients.patients ? \r\n                                        props.patients.patients.map(patient => (\r\n                                            <option key={patient.id} value={patient.id}>\r\n                                                {patient.name}\r\n                                            </option>\r\n                                        )) : (\"\")\r\n                                    }\r\n                                </select>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <label htmlFor=\"link\">Link: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"link\" \r\n                                    type=\"text\" \r\n                                    className=\"form-control input\" \r\n                                    placeholder=\"http://exemplo.com.br/link\" \r\n                                    required\r\n                                    value={requestBody.link}\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"date\">Data: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"date\" \r\n                                    type=\"date\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                    value={requestBody.date}\r\n                                />\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <label htmlFor=\"time\">Hora: </label>\r\n                                <input \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"time\" \r\n                                    type=\"time\" \r\n                                    className=\"form-control input\" \r\n                                    required\r\n                                    value={requestBody.time}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"notes\">Notas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"notes\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.notes}\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"cronogram\">Cronograma: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"cronogram\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.cronogram}\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"abstract\">Resumo: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"abstract\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.abstract}\r\n                                ></textarea>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <label htmlFor=\"todo_list\">Tarefas: </label>\r\n                                <textarea \r\n                                    onChange={handleRequestBody} \r\n                                    name=\"todo_list\" \r\n                                    className=\"form-control\"\r\n                                    value={requestBody.todo_list}\r\n                                ></textarea>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginTop: '50px'}}>\r\n                            <Col md={12} className=\"dropzone\">\r\n                                <StyledDropzone />\r\n                            </Col>\r\n                            <Col md={12} style={{textAlign: 'center', marginTop: '32px'}}>\r\n                                <Button\r\n                                    className=\"storeAppointmentButton shadow-none\"\r\n                                    disabled={props.appointments?.isLoading}\r\n                                >\r\n                                    {\r\n                                        props.location.state ?\r\n                                        \"ATUALIZAR ATENDIMENTO\" :\r\n                                        \"CADASTRAR ATENDIMENTO \"\r\n                                    }\r\n                                    {\r\n                                        props.appointments.isLoading ?\r\n                                            <Loader \r\n                                                type=\"TailSpin\" \r\n                                                color=\"#ffffff\"\r\n                                                height={40} \r\n                                                width={40} \r\n                                            />\r\n                                        : \"\"\r\n                                    }\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        patients: store.patientsReducer,\r\n        appointments: store.appointmentsReducer,\r\n        files: store.filesReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    storeAppointment: data => dispatch(actions.storeAppointments(data)),\r\n    updateAppointment: data => dispatch(actions.updateAppointments(data)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchPatients: () => dispatch(actions.fetchAllPatients()),\r\n    uploadFiles: (files, patient_id) => dispatch(actions.uploadFiles(files, patient_id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Appointments)","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from \"../../store/actions\"\r\nimport { faCalendar, faClock, faTrash, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Pagination, PaginationItem, PaginationLink  } from 'reactstrap'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"./style.scss\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nconst ListAppointments = props => {\r\n\r\n    useEffect(() => {\r\n        props.setPageTitle(\"Gerenciar atendimentos\")\r\n        props.fetchAppointments(1)\r\n    }, [])\r\n\r\n    const deleteAppointment = id => {\r\n        Swal.fire({\r\n            title: 'Tem certeza que deseja excluir este atendimento?',\r\n            text: 'Todos os registros vinculados ao atendimento serão completamente excluídos!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Excluir',\r\n            confirmButtonColor: 'red',\r\n            cancelButtonText: 'Cancelar',\r\n            cancelButtonColor: '#1492A5'\r\n        })\r\n            .then(res => {\r\n                if (res.value) {\r\n                    props.deleteAppointment(id)\r\n                    props.history.push('atendimentos')\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleEdit = id => {\r\n        let currentAppointment = props.appointments.appointments\r\n        .filter(appointment => appointment.id == id)[0]\r\n        props.history.push({ \r\n            pathname: 'cadastrar-atendimento', \r\n            state: currentAppointment\r\n        })\r\n    }\r\n\r\n    const handlePaginationClick = async page => {\r\n        await props.fetchAppointments(page)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.appointments.appointments?.length == 0 ?\r\n                <p style={{color: '#666'}}>Nenhum atendimento cadastrado.</p> : \r\n                !props.appointments.appointments || props.appointments.isLoading ? \r\n                (\r\n                    <Loader \r\n                        className=\"loader\" \r\n                        type=\"TailSpin\" \r\n                        color=\"#17A2B8\" \r\n                        height={100} \r\n                        width={100} \r\n                    />\r\n                ) \r\n                : (\r\n                    <div style={{marginBottom: '50px'}}>\r\n                        {props.appointments.appointments.map((appointment, index) => (\r\n                            <div \r\n                                key={index} \r\n                                className=\"appointment\" \r\n                                onClick={() => handleEdit(appointment.id)}\r\n                            >\r\n                                <div className=\"appointment-item\">\r\n                                    <FontAwesomeIcon className=\"light-icon\" icon={faCalendar} />\r\n                                    {appointment.date} \r\n                                </div>\r\n                                <div className=\"appointment-item\">\r\n                                    <FontAwesomeIcon className=\"light-icon\" icon={faClock} />\r\n                                    {appointment.time} \r\n                                </div>\r\n                                <div className=\"appointment-item patient-name\">\r\n                                    <FontAwesomeIcon className=\"light-icon\" icon={faUser} />\r\n                                    {appointment.patient?.name} \r\n                                </div>\r\n                                <div className=\"appointment-item\">\r\n                                    <a\r\n                                        id={appointment.id}\r\n                                        onClick={() => deleteAppointment(appointment.id)}\r\n                                        className=\"delete-button\"\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faTrash} />\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <Pagination aria-label=\"Page navigation example\">\r\n                            <PaginationItem>\r\n                                <PaginationLink \r\n                                    className=\"page\"\r\n                                    first \r\n                                    onClick={() => handlePaginationClick(1)} \r\n                                />\r\n                            </PaginationItem>\r\n                            <PaginationItem>\r\n                                <PaginationLink \r\n                                    className=\"page\"\r\n                                    previous\r\n                                    onClick={\r\n                                        () => handlePaginationClick(props.appointments.paginationData?.current_page - 1)\r\n                                    } \r\n                                    disabled={\r\n                                        props.appointments.paginationData?.current_page \r\n                                        == props.appointments.paginationData?.from\r\n                                    }\r\n                                />\r\n                            </PaginationItem>\r\n\r\n                            {Array(props.appointments.paginationData?.last_page).fill(1).map((el, i) =>\r\n                                <PaginationItem \r\n                                    key={i} \r\n                                    className={\r\n                                        (props.appointments.paginationData?.current_page) == (i + 1) ?\r\n                                        \"selectedPage\" : \"page\"\r\n                                    }\r\n                                >\r\n                                    <PaginationLink onClick={() => handlePaginationClick(i + 1)}>\r\n                                    {i + 1}\r\n                                    </PaginationLink>\r\n                                </PaginationItem>\r\n                            )}\r\n\r\n                            <PaginationItem>\r\n                                <PaginationLink \r\n                                    className=\"page\"\r\n                                    next \r\n                                    onClick={\r\n                                        () => handlePaginationClick(props.appointments.paginationData?.current_page + 1)\r\n                                    }\r\n                                    disabled={\r\n                                        props.appointments.paginationData?.current_page \r\n                                        == props.appointments.paginationData?.last_page\r\n                                    }\r\n                                />\r\n                            </PaginationItem>\r\n                            <PaginationItem>\r\n                                <PaginationLink \r\n                                    className=\"page\"\r\n                                    last\r\n                                    onClick={() => handlePaginationClick(props.appointments.paginationData?.last_page)} \r\n                                />\r\n                            </PaginationItem>\r\n                        </Pagination>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAppointments: page => dispatch(actions.fetchAppointments(page)),\r\n    deleteAppointment: id => dispatch(actions.deleteAppointment(id))\r\n})\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        appointments: store.appointmentsReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListAppointments)","import React, { useEffect } from \"react\"\r\nimport \"./style.scss\"\r\nimport { Col, Row, Table } from \"reactstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport * as actions from \"../../store/actions\"\r\nimport Loader from 'react-loader-spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Files = props => {\r\n\r\n    useEffect(() => {\r\n        props.fetchFiles(1)\r\n        props.setPageTitle(\"Material de Apoio\")\r\n        props.fetchAllPatients()\r\n    },[])\r\n\r\n    const handlePatientChange = e => {\r\n        if (e.target.value != \"Selecione um paciente\")\r\n            props.fetchFilesByPatient(e.target.value)\r\n    }\r\n\r\n    return(\r\n            <Row>\r\n                <Col md={4}>\r\n                    <div className=\"box\">\r\n                        <label htmlFor=\"selected-patient\">Paciente: </label>\r\n                        <select className=\"selected-patient\" onChange={handlePatientChange}>\r\n                            <option>Selecione um paciente</option>\r\n                            {\r\n                                props.patients?.map((patient, index) => (\r\n                                    <option key={index} value={patient.id}>{patient.name}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </Col>\r\n                <Col md={8}>\r\n                    <div className=\"box\">\r\n                    {\r\n                        props.loader ?\r\n                        (\r\n                        <Loader \r\n                            className=\"loader\" \r\n                            type=\"TailSpin\" \r\n                            color=\"#17A2B8\" \r\n                            height={100} \r\n                            width={100} \r\n                        />\r\n                        ) :\r\n                        (\r\n                        props.files?.length == 0 ? \r\n                        <p style={{color: '#666'}}>Nenhum material de apoio cadastrado.</p> :\r\n                        <Table responsive striped>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Arquivo: </th>\r\n                                    <th>Upload: </th>\r\n                                    <th>Visualizar: </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    props.files?.map(file => (\r\n                                        <tr>\r\n                                            <td>{file.name}</td>\r\n                                            <td>{file.created_at.split('.')[0].replace(\"T\", \" \")}</td>\r\n                                            <td style={{textAlign: 'center'}}>\r\n                                                <a target=\"_blank\" href={file.path}>\r\n                                                    <button className=\"btn edit-button\">\r\n                                                        <FontAwesomeIcon icon={faEye} />\r\n                                                    </button>\r\n                                                </a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </Table>  \r\n                        )\r\n                    }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        files: store.filesReducer.files,\r\n        loader: store.filesReducer.loader,\r\n        patients: store.patientsReducer.patients\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchFiles: page => dispatch(actions.fetchFiles(page)),\r\n    setPageTitle: title => dispatch(actions.setPageTitle(title)),\r\n    fetchAllPatients: () => dispatch(actions.fetchAllPatients()),\r\n    fetchFilesByPatient: patient => dispatch(actions.fetchFilesByPatient(patient))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Files)","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Container } from 'reactstrap'\r\nimport NavBar from './Navbar'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ProtectedRoute } from '../../protected.route'\r\n\r\nimport Home from '../Home'\r\nimport StorePatients from '../Patients/storePatient'\r\nimport Patients from '../Patients/patients'\r\nimport Appointments from '../Appointments/index'\r\nimport ListAppointments from '../Appointments/listAppointments'\r\nimport Files from '../Files/index'\r\n\r\nexport default props => (\r\n    <Container fluid className={classNames('content', {'is-open': props.isOpen})}>\r\n\t\t<NavBar toggle={props.toggle}/>\r\n\t\t<Switch>\r\n\t\t\t<ProtectedRoute exact path=\"/\" component={Home} />\r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-pacientes\" component={StorePatients} />\r\n\t\t\t<ProtectedRoute exact path=\"/pacientes\" component={Patients} />          \r\n\t\t\t<ProtectedRoute exact path=\"/cadastrar-atendimento\" component={Appointments} />          \r\n\t\t\t<ProtectedRoute exact path=\"/atendimentos\" component={ListAppointments} />\r\n\t\t\t<ProtectedRoute exact path=\"/material-apoio\" component={Files} />\r\n\t\t</Switch>\r\n    </Container>\r\n)","import React, { useState } from 'react'\r\nimport auth from '../../auth'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHospitalAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport Loader from 'react-loader-spinner'\r\nimport './style.scss'\r\n\r\nconst Login = props => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [incorrectMessage, setIncorrectMessage] = useState(false)\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const handleLogin = e => {\r\n        setLoader(true)\r\n        e.preventDefault()\r\n        \r\n        let data = {email: email, password: password}\r\n\r\n        auth.login(data, \r\n            () => props.history.push(\"/\"), \r\n            () => {\r\n                setIncorrectMessage(true)\r\n                setLoader(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n                <Col className=\"form-background\" md={{size: 6, offset: 3}}>\r\n                    <form onSubmit={handleLogin}>\r\n                        <h2><FontAwesomeIcon icon={faHospitalAlt} /> Acessar</h2>\r\n                        <input onChange={e => setEmail(e.target.value)} type=\"email\" className=\"form-control\" name=\"user\" required />\r\n                        <input onChange={e => setPassword(e.target.value)} type=\"password\" className=\"form-control\" name=\"password\" required />\r\n                        { loader ? <Loader type=\"TailSpin\" color=\"#ffffff\" height={40} width={40} /> : \"\" }\r\n                        { incorrectMessage ? <p>Usuário ou senha incorretos</p> : \"\" }\r\n                        <Button className=\"login-button\">Acessar</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SideBar from './components/SideBar'\r\nimport Content from './components/Content'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport './App.scss'\r\nimport Login from './components/Login'\r\n\r\nexport default () => {\r\n\r\n  const [isOpen, setOpen] = useState(true)\r\n  const toggle = () => setOpen(!isOpen)\r\n\r\n  return (\r\n    <Router>\r\n\t\t<Switch>\r\n\t\t<Route exact path=\"/login\" component={Login} />\r\n\t\t<div className=\"App wrapper\">\r\n\t\t\t<SideBar toggle={toggle} isOpen={isOpen} />\r\n\t\t\t<Content toggle={toggle} isOpen={isOpen} />\r\n\t\t</div>\r\n\t\t</Switch>\r\n    </Router>\r\n  )\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","const initState = {\r\n    pageTitle: \"Gerenciador de consultas\"\r\n}\r\n\r\nconst pageReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case \"SET_PAGE_TITLE\":\r\n            return {\r\n              pageTitle: action.payload  \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default pageReducer","const initState = {\r\n    currentPatient: {teste: \"teste\"},\r\n    patients: [],\r\n    paginationData: [],\r\n    loader: false\r\n}\r\n\r\nconst patientsReducer = (state = {}, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case \"SET_LOADER\":\r\n            return {\r\n                ...state,\r\n                loader: true\r\n            }\r\n\r\n        case \"SET_PATIENTS\":\r\n            initState.patients = action.payload\r\n            return {\r\n                ...state,\r\n                patients: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        case \"SET_PATIENT\":\r\n            return {\r\n                ...state,\r\n                patient: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        case \"SET_PATIENT_APPOINTMENTS\":\r\n            return {\r\n                ...state,\r\n                appointments: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        case \"SET_PAGINATION_DATA\":\r\n            return {\r\n                ...state,\r\n                paginationData: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        case \"SET_CURRENT_PATIENT\":\r\n            return {\r\n                ...state,\r\n                currentPatient: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        case \"DELETE_PATIENT\":\r\n            let remainingPatients = state.patients.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.patients = remainingPatients\r\n            return {\r\n                ...state,\r\n                patients: remainingPatients,\r\n                status: action.payload.jsonResponse.status,\r\n                loader: false\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n\r\n}\r\n\r\nexport default patientsReducer","const initState = {\r\n    isLoading: false,\r\n    success: false,\r\n    error: false,\r\n    errorMessage: '',\r\n    madeAppointments: [],\r\n    todaysAppointments: []\r\n}\r\n\r\nconst appointmentsReducer = (state = initState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"SET_APPOINTMENTS_LOADER\":\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                success: true,\r\n                isLoading: false\r\n            }\r\n        \r\n        case \"SET_APPOINTMENTS_PAGINATION_DATA\":\r\n            return {\r\n                ...state,\r\n                paginationData: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS_FAILURE\":\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                errorMessage: action.payload,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_APPOINTMENTS\":\r\n            initState.appointments = action.payload\r\n            return {\r\n                ...state,\r\n                appointments: action.payload,\r\n                isLoading: false\r\n            }\r\n\r\n        case \"SET_TODAYS_APPOINTMENTS\":\r\n            initState.todaysAppointments = action.payload\r\n            return {\r\n                ...state,\r\n                todaysAppointments: action.payload\r\n            }\r\n\r\n        case \"SET_MADE_APPOINTMENTS\":\r\n            initState.madeAppointments = action.payload\r\n            return {\r\n                ...state,\r\n                madeAppointments: action.payload\r\n            }\r\n\r\n        case \"DELETE_APPOINTMENT\":\r\n            let remainingAppointments = state.appointments.filter(patient => {\r\n                return patient.id != action.payload.id\r\n            })\r\n            initState.appointments = remainingAppointments\r\n            return {\r\n                ...state,\r\n                appointments: remainingAppointments,\r\n                status: action.payload.jsonResponse.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default appointmentsReducer","const initFiles = {\r\n    loader: true\r\n}\r\n\r\nconst filesReducer = (state = initFiles, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"SET_SELECTED_FILES\":\r\n            return {\r\n                ...state,\r\n                selectedFiles: action.payload\r\n            }\r\n\r\n        case \"SET_FILES_LOADER\": \r\n            return {\r\n                ...state,\r\n                loader: true\r\n            }\r\n\r\n        case \"SET_FILES\":\r\n            return {\r\n                ...state,\r\n                files: action.payload,\r\n                loader: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default filesReducer","import { combineReducers } from 'redux'\r\nimport pageReducer from './pageReducer'\r\nimport patientsReducer from './patientsReducer'\r\nimport appointmentsReducer from './appointmentsReducer'\r\nimport filesReducer from './filesReducer'\r\n\r\nexport default combineReducers ({\r\n    filesReducer,\r\n    pageReducer,\r\n    patientsReducer,\r\n    appointmentsReducer\r\n})","import { put, call } from 'redux-saga/effects'\r\nimport patientsService from '../../services/patientsService'\r\n\r\nexport function* fetchPatients(action){\r\n    yield put({ type: \"SET_LOADER\" })\r\n\r\n    let jsonResponse = yield call(patientsService.fetch, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PAGINATION_DATA\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* fetchPatientInfo(action){\r\n    yield put({ type: \"SET_LOADER\" })\r\n\r\n    let jsonResponse = yield call(patientsService.find, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_CURRENT_PATIENT\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchAll(){\r\n    let jsonResponse = yield call(patientsService.fetchAll)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchAppointments(action){\r\n    let jsonResponse = yield call(patientsService.fetchAppointments, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENT_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* filter(action){\r\n    yield put({ type: \"SET_LOADER\" })\r\n\r\n    let jsonResponse = yield call(patientsService.filter, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PAGINATION_DATA\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n    yield put({\r\n        type: \"SET_PATIENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n}\r\n\r\nexport function* find(action){\r\n    let jsonResponse = yield call(patientsService.find, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_PATIENT\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* deletePatient(action){\r\n    let jsonResponse = yield call(patientsService.deletePatient, action.payload)\r\n    \r\n    yield put({\r\n        type: \"DELETE_PATIENT\",\r\n        payload: {jsonResponse: jsonResponse, id: action.payload}\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = page => api.get(`/appointments?page=${page}`)\r\nconst store = body => api.post('/appointments', body)\r\nconst deleteAppointment = id => api.delete(`/appointments/${id}`)\r\nconst update = body => api.put(`/appointments/${body.id}`, body)\r\nconst fetchMade = () => api.get(`/made-appointments`)\r\nconst fetchTodays = () => api.get(`/todays-appointments`)\r\n\r\nexport default {\r\n    fetchAll,\r\n    deleteAppointment,\r\n    store,\r\n    update,\r\n    fetchMade,\r\n    fetchTodays\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport appointmentsService from '../../services/appointmentsService'\r\n\r\nexport function* storeAppointment(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    try {\r\n        let jsonResponse = yield call(appointmentsService.store, action.payload)\r\n\r\n        if (jsonResponse.status === 200) {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_SUCCESS\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n        else {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_FAILURE\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\",\r\n            payload: err\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport function* updateAppointment(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_APPOINTMENTS_LOADER\"\r\n    })\r\n\r\n    try {\r\n        let jsonResponse = yield call(appointmentsService.update, action.payload)\r\n\r\n        if (jsonResponse.status === 200) {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_SUCCESS\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n        else {\r\n            yield put({\r\n                type: \"SET_APPOINTMENTS_FAILURE\",\r\n                payload: jsonResponse\r\n            })\r\n        }\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"SET_APPOINTMENTS_FAILURE\",\r\n            payload: err\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport function* fetchAll(action) {\r\n    yield put({ type: \"SET_APPOINTMENTS_LOADER\" })\r\n\r\n    let jsonResponse = yield call(appointmentsService.fetchAll, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_APPOINTMENTS\",\r\n        payload: jsonResponse.data.data\r\n    })\r\n\r\n    yield put({\r\n        type: \"SET_APPOINTMENTS_PAGINATION_DATA\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchMadeAppointments() {\r\n    let jsonResponse = yield call(appointmentsService.fetchMade)\r\n\r\n    yield put({\r\n        type: \"SET_MADE_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* fetchTodaysAppointments() {\r\n    let jsonResponse = yield call(appointmentsService.fetchTodays)\r\n\r\n    yield put({\r\n        type: \"SET_TODAYS_APPOINTMENTS\",\r\n        payload: jsonResponse.data\r\n    })\r\n}\r\n\r\nexport function* deleteAppointment(action) {\r\n    let jsonResponse = yield call(appointmentsService.deleteAppointment, action.payload)\r\n    \r\n    yield put({\r\n        type: \"DELETE_APPOINTMENT\",\r\n        payload: { jsonResponse: jsonResponse, id: action.payload }\r\n    })\r\n}","import api from './api'\r\n\r\nconst fetchAll = () => api.get('/attachements')\r\nconst upload = files => api.post('/attachements/upload', files)\r\nconst deleteFile = id => api.delete(`/attachements/${id}`)\r\nconst fetchByPatient = patient => api.get(`/attachements/patients/${patient}`)\r\n\r\nconst attach = (patient, files) => {\r\n    files.forEach(file => {\r\n        api.post(`attachements/${file.id}/patients/${patient}`)\r\n    })\r\n}\r\n\r\nexport default {\r\n    fetchAll,\r\n    upload,\r\n    deleteFile,\r\n    attach,\r\n    fetchByPatient\r\n}","import { put, call } from 'redux-saga/effects'\r\nimport filesService from '../../services/filesService'\r\n\r\nexport function* upload(action) {\r\n\r\n    yield put({\r\n        type: \"TOGGLE_FILES_LOADER\"\r\n    })\r\n\r\n    let jsonResponse = yield call(filesService.upload, action.payload.files)\r\n    yield call(filesService.attach, action.payload.patient, jsonResponse.data)\r\n\r\n\r\n    if (jsonResponse.status === 200) {\r\n        yield put({ type: \"SET_FILES_SUCCESS\" })\r\n    } \r\n    else {\r\n        yield put({ type: \"SET_FILES_FAILURE\" })\r\n    }\r\n\r\n}\r\n\r\nexport function* fetchFiles() {\r\n\r\n    let jsonResponse = yield call(filesService.fetchAll)\r\n\r\n    yield put({\r\n        type: \"SET_FILES\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n}\r\n\r\nexport function* fetchByPatient(action) {\r\n\r\n    yield put({ type: \"SET_FILES_LOADER\" })\r\n\r\n    let jsonResponse = yield call(filesService.fetchByPatient, action.payload)\r\n\r\n    yield put({\r\n        type: \"SET_FILES\",\r\n        payload: jsonResponse.data\r\n    })\r\n\r\n}","import { takeEvery, all } from 'redux-saga/effects'\r\nimport * as patientsSagas from './patients'\r\nimport * as appointmentsSagas from './appointments'\r\nimport * as filesSagas from './files'\r\n\r\nexport function* watchSagas(){\r\n    yield all([\r\n        takeEvery(\"FETCH_PATIENTS_SAGA\", patientsSagas.fetchPatients),\r\n        takeEvery(\"FETCH_ALL_PATIENTS_SAGA\", patientsSagas.fetchAll),\r\n        takeEvery(\"FETCH_PATIENT_INFO_SAGA\", patientsSagas.fetchPatientInfo),\r\n        takeEvery(\"DELETE_PATIENT_SAGA\", patientsSagas.deletePatient),\r\n        takeEvery(\"FILTER_PATIENTS_SAGA\", patientsSagas.filter),\r\n        takeEvery(\"FETCH_PATIENT_APPOINTMENTS_SAGA\", patientsSagas.fetchAppointments),\r\n        takeEvery(\"FETCH_MADE_APPOINTMENTS_SAGA\", appointmentsSagas.fetchMadeAppointments),\r\n        takeEvery(\"FETCH_TODAYS_APPOINTMENTS_SAGA\", appointmentsSagas.fetchTodaysAppointments),\r\n        takeEvery(\"STORE_APPOINTMENTS_SAGA\", appointmentsSagas.storeAppointment),\r\n        takeEvery(\"UPDATE_APPOINTMENTS_SAGA\", appointmentsSagas.updateAppointment),\r\n        takeEvery(\"DELETE_APPOINTMENT_SAGA\", appointmentsSagas.deleteAppointment),\r\n        takeEvery(\"FETCH_ALL_APPOINTMENTS_SAGA\", appointmentsSagas.fetchAll),\r\n        takeEvery(\"UPLOAD_FILES\", filesSagas.upload),\r\n        takeEvery(\"FETCH_FILES\", filesSagas.fetchFiles),\r\n        takeEvery(\"FETCH_FILES_BY_PATIENT\", filesSagas.fetchByPatient)\r\n    ])\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/index'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { watchSagas } from './store/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(watchSagas)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}